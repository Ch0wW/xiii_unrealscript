/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef XIDCINE_API
#define XIDCINE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern XIDCINE_API FName XIDCINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(AvoidObstacle)
AUTOGENERATE_NAME(EndOfDial)
AUTOGENERATE_NAME(CineWarn)
AUTOGENERATE_NAME(EndOfMove)
AUTOGENERATE_NAME(EndOfSeq)

#ifndef NAMES_ONLY

#define UCONST_RotationAcceleration 145
#define UCONST_PlayerRotationSpeed 180
#define UCONST_PlayerLinearSpeed 600
#define UCONST_MAX_EVENTHISTORYTIME 10
#define UCONST_MAX_EVENT 8
#define UCONST_ON_Max 12
#define UCONST_ON_SeeCadaver 11
#define UCONST_ON_PlayerAway 10
#define UCONST_ON_NotSeenByPlayer 9
#define UCONST_ON_AnimEnd 8
#define UCONST_ON_Time 7
#define UCONST_ON_SeenByPlayer 6
#define UCONST_ON_SeePlayer 5
#define UCONST_ON_SequenceEnd 4
#define UCONST_ON_DialEnd 3
#define UCONST_ON_Warning 2
#define UCONST_ON_Event 1
#define UCONST_ON_PlayerProximity 0
#define UCONST_WT_Mask 0x00000FFF
#define UCONST_WT_SeeCadaver 0x00000800
#define UCONST_WT_PlayerAway 0x00000400
#define UCONST_WT_NotSeenByPlayer 0x00000200
#define UCONST_WT_AnimEnd 0x00000100
#define UCONST_WT_Time 0x00000080
#define UCONST_WT_SeenByPlayer 0x00000040
#define UCONST_WT_SeePlayer 0x00000020
#define UCONST_WT_SequenceEnd 0x00000010
#define UCONST_WT_DialEnd 0x00000008
#define UCONST_WT_Warn 0x00000004
#define UCONST_WT_Event 0x00000002
#define UCONST_WT_PlayerProximity 0x00000001

struct ACineController2_eventEndOfSeq_Parms
{
};
struct ACineController2_eventEndOfMove_Parms
{
};
struct ACineController2_eventCineWarn_Parms
{
    class AActor* Other;
};
struct ACineController2_eventEndOfDial_Parms
{
    class AActor* Other;
};
struct ACineController2_eventAvoidObstacle_Parms
{
    FVector TargetLocation;
    FVector wanted_acceleration;
};
class XIDCINE_API ACineController2 : public AController
{
public:
    INT nReturnIndex[16];
    INT nReturnIndexIndex;
    BITFIELD bMoving:1 GCC_PACK(4);
    BITFIELD bMovePaused:1;
    BITFIELD bAnimOnce:1;
    BITFIELD bAnimDev:1;
    BITFIELD bSubAnim:1;
    BITFIELD bInitialized:1;
    BITFIELD bCineControlAnims:1;
    BITFIELD bDying:1;
    BITFIELD bConstrainedToGround:1;
    BITFIELD bFrozenPlayer:1;
    class AActor* FPCTarget GCC_PACK(4);
    class AActor* FPCLocation;
    class ACine2* MyPawn;
    FStringNoInit MemoError;
    class AXIIIPlayerController* PC;
    class AXIIIPawn* Player;
    FName CurrentAnim;
    INT LinesCount;
    INT Counter[4];
    INT ScriptedActionIndex;
    INT flagsPaused;
    FLOAT JumpHeight;
    INT nOnJump[12];
    FStringNoInit MoveSequence;
    class AActor* Target;
    class AActor* LockedActor;
    class AActor* NextTarget;
    FVector Plane;
    FVector AdjustAiming;
    FLOAT wantedspeed;
    FLOAT RotationSpeed;
    FLOAT AccelerationFactor;
    FLOAT DetectionDistance;
    FLOAT ShootDispersion;
    FLOAT MyPawnGroundSpeed;
    FLOAT TimeStamp;
    FLOAT WaitTimeEnd;
    FLOAT JumpHight;
    class ADialogueManager* dm;
    FRotator rWantedRotation;
    class AActor* JumpTarget;
    FName EventNamesTab[8];
    class AActor* EventOthersTab[8];
    class APawn* EventInstigatorsTab[8];
    FLOAT EventDatesTab[8];
    INT WarnMemory;
    FLOAT ActualPlayerRotationSpeed;
    DECLARE_FUNCTION(execCharIsNum);
    DECLARE_FUNCTION(execGetFirstWord);
    DECLARE_FUNCTION(execFindAnActor);
    DECLARE_FUNCTION(execSteering);
    void eventEndOfSeq()
    {
        ProcessEvent(FindFunctionChecked(XIDCINE_EndOfSeq),NULL);
    }
    void eventEndOfMove()
    {
        ProcessEvent(FindFunctionChecked(XIDCINE_EndOfMove),NULL);
    }
    void eventCineWarn(class AActor* Other)
    {
        ACineController2_eventCineWarn_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(XIDCINE_CineWarn),&Parms);
    }
    void eventEndOfDial(class AActor* Other)
    {
        ACineController2_eventEndOfDial_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(XIDCINE_EndOfDial),&Parms);
    }
    void eventAvoidObstacle(FVector TargetLocation, FVector& wanted_acceleration)
    {
        ACineController2_eventAvoidObstacle_Parms Parms;
        Parms.TargetLocation=TargetLocation;
        Parms.wanted_acceleration=wanted_acceleration;
        ProcessEvent(FindFunctionChecked(XIDCINE_AvoidObstacle),&Parms);
        wanted_acceleration=Parms.wanted_acceleration;
    }
    DECLARE_CLASS(ACineController2,AController,0|CLASS_Config,XIDCine)
    NO_DEFAULT_CONSTRUCTOR(ACineController2)
};

enum ECineStimulus
{
    CS_None                 =0,
    CS_SeeCadaver           =1,
    CS_Trigger              =2,
    CS_SeePlayer            =3,
    CS_TakeDamage           =4,
    CS_MapStart             =5,
    CS_HearNoise            =6,
    CS_OutOfOrder_PlayerMove=7,
    CS_OutOfOrder_SeenByPlayer=8,
    CS_MAX                  =9,
};

class XIDCINE_API ACine2 : public ABaseSoldier
{
public:
    TArrayNoInit<FStructSave> CheckPoints;
    FName DefaultAnim;
    FName WalkAnim;
    FName RunAnim;
    FName WaitAnim;
    TArrayNoInit<class UMeshAnimation*> SpecificAnimations;
    FLOAT TweenTime;
    FLOAT WalkAnimVelocity;
    FLOAT WalkRunLimitVelocity;
    FLOAT RunAnimVelocity;
    TArrayNoInit<FStructReaction> Reaction;
    TArrayNoInit<FString> tabActions;
    TArrayNoInit<FString> tabActions2;
    TArrayNoInit<FString> tabActions3;
    TArrayNoInit<class USound*> Musics;
    TArrayNoInit<class USound*> Sounds;
    TArrayNoInit<class USound*> Onomatops;
    TArrayNoInit<class UClass*> AttachedArtefacts;
    FLOAT InitialShootDispersion;
    FLOAT InitialSpeed;
    FLOAT InitialRotationSpeed;
    FLOAT InitialAccelerationFactor;
    FLOAT InitialDetectionDistance;
    FVector vMoveconstraint;
    class UClass* CineControllerClass;
    INT CurrentScript;
    class AMapInfo* MI;
    BITFIELD bPauseMovementIfBumped:1 GCC_PACK(4);
    BITFIELD ImposedEndMovePosition:1;
    BITFIELD Invisible:1;
    BITFIELD bBlindWhenInvisible:1;
    BITFIELD bDeafWhenInvisible:1;
    BITFIELD bArmed:1;
    BITFIELD bPaused:1;
    BITFIELD MemoColActors:1;
    BITFIELD MemoBlockActors:1;
    BITFIELD MemoBlockPlayers:1;
    BITFIELD bBlinking:1;
    BITFIELD bInitialized:1;
    INT cpn GCC_PACK(4);
    class ACineController2* CineController;
    class UCanvas* MyCanvas;
    FLOAT MyYL;
    FLOAT MyYPos;
    FLOAT BlinkEndTime;
    class AXIIIPlayerController* PC;
    INT CurrentTabActionIndex;
    INT MyOldRotYaw;
    INT HeadYaw;
    class AActor* BumpedActor;
    class AActor* PeeredActor;
    class ASMAttached* mycasm;
    DECLARE_FUNCTION(execOnTheSpotRotation);
    DECLARE_CLASS(ACine2,ABaseSoldier,0,XIDCine)
    NO_DEFAULT_CONSTRUCTOR(ACine2)
};


class XIDCINE_API APositionInfo : public AInfo
{
public:
    BITFIELD bAutoZLocation:1 GCC_PACK(4);
    FLOAT fAltitude GCC_PACK(4);
    DECLARE_FUNCTION(execAutoPosition);
    DECLARE_CLASS(APositionInfo,AInfo,0,XIDCine)
    NO_DEFAULT_CONSTRUCTOR(APositionInfo)
};

#endif

AUTOGENERATE_FUNCTION(ACineController2,-1,execCharIsNum);
AUTOGENERATE_FUNCTION(ACineController2,-1,execGetFirstWord);
AUTOGENERATE_FUNCTION(ACineController2,-1,execFindAnActor);
AUTOGENERATE_FUNCTION(ACineController2,-1,execSteering);
AUTOGENERATE_FUNCTION(ACine2,-1,execOnTheSpotRotation);
AUTOGENERATE_FUNCTION(APositionInfo,-1,execAutoPosition);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif

#if __STATIC_LINK
#ifndef XIDCINE_NATIVE_DEFS
#define XIDCINE_NATIVE_DEFS

DECLARE_NATIVE_TYPE(XIDCine,ACineController2);
DECLARE_NATIVE_TYPE(XIDCine,ACine2);
DECLARE_NATIVE_TYPE(XIDCine,APositionInfo);

#define AUTO_INITIALIZE_REGISTRANTS_XIDCINE \
	ACineController2::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXIDCineACineController2Native; \
	ACine2::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXIDCineACine2Native; \
	APositionInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXIDCineAPositionInfoNative; \

#endif // XIDCine_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(ACineController2) GXIDCineACineController2Natives[] = 
{ 
	MAP_NATIVE(ACineController2,execCharIsNum)
	MAP_NATIVE(ACineController2,execGetFirstWord)
	MAP_NATIVE(ACineController2,execFindAnActor)
	MAP_NATIVE(ACineController2,execSteering)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XIDCine,ACineController2);

NATIVE_INFO(ACine2) GXIDCineACine2Natives[] = 
{ 
	MAP_NATIVE(ACine2,execOnTheSpotRotation)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XIDCine,ACine2);

NATIVE_INFO(APositionInfo) GXIDCineAPositionInfoNatives[] = 
{ 
	MAP_NATIVE(APositionInfo,execAutoPosition)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XIDCine,APositionInfo);

#endif // NATIVES_ONLY
#endif // __STATIC_LINK

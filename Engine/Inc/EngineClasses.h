/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef ENGINE_API
#define ENGINE_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern ENGINE_API FName ENGINE_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(Destroyed)
AUTOGENERATE_NAME(GainedChild)
AUTOGENERATE_NAME(LostChild)
AUTOGENERATE_NAME(Trigger)
AUTOGENERATE_NAME(UnTrigger)
AUTOGENERATE_NAME(Timer)
AUTOGENERATE_NAME(HitWall)
AUTOGENERATE_NAME(Falling)
AUTOGENERATE_NAME(Landed)
AUTOGENERATE_NAME(PhysicsVolumeChange)
AUTOGENERATE_NAME(Touch)
AUTOGENERATE_NAME(UnTouch)
AUTOGENERATE_NAME(Bump)
AUTOGENERATE_NAME(BaseChange)
AUTOGENERATE_NAME(Attach)
AUTOGENERATE_NAME(Detach)
AUTOGENERATE_NAME(ActorEntered)
AUTOGENERATE_NAME(ActorLeaving)
AUTOGENERATE_NAME(AnimEnd)
AUTOGENERATE_NAME(EndedRotation)
AUTOGENERATE_NAME(EncroachingOn)
AUTOGENERATE_NAME(EncroachedBy)
AUTOGENERATE_NAME(HeadVolumeChange)
AUTOGENERATE_NAME(Tick)
AUTOGENERATE_NAME(PlayerTick)
AUTOGENERATE_NAME(UpdateEyeHeight)
AUTOGENERATE_NAME(SpecialHandling)
AUTOGENERATE_NAME(EndOfVoice)
AUTOGENERATE_NAME(PauseVoice)
AUTOGENERATE_NAME(UnPauseVoice)
AUTOGENERATE_NAME(BeginBeginFlash)
AUTOGENERATE_NAME(EndBeginFlash)
AUTOGENERATE_NAME(BeginEndFlash)
AUTOGENERATE_NAME(EndEndFlash)
AUTOGENERATE_NAME(KeyType)
AUTOGENERATE_NAME(KeyEvent)
AUTOGENERATE_NAME(Message)
AUTOGENERATE_NAME(Generate)
AUTOGENERATE_NAME(PlayerCalcView)
AUTOGENERATE_NAME(PreTeleport)
AUTOGENERATE_NAME(PostTeleport)
AUTOGENERATE_NAME(Login)
AUTOGENERATE_NAME(AcceptInventory)
AUTOGENERATE_NAME(ClientMessage)
AUTOGENERATE_NAME(BeginEvent)
AUTOGENERATE_NAME(EndEvent)
AUTOGENERATE_NAME(KilledBy)
AUTOGENERATE_NAME(TakeDamage)
AUTOGENERATE_NAME(BeginPlay)
AUTOGENERATE_NAME(PreBeginPlay)
AUTOGENERATE_NAME(PostBeginPlay)
AUTOGENERATE_NAME(TravelPreAccept)
AUTOGENERATE_NAME(TravelPostAccept)
AUTOGENERATE_NAME(PostRender)
AUTOGENERATE_NAME(ForceGenerate)
AUTOGENERATE_NAME(InitGame)
AUTOGENERATE_NAME(GetBeaconText)
AUTOGENERATE_NAME(SetInitialState)
AUTOGENERATE_NAME(PreLogin)
AUTOGENERATE_NAME(DetailChange)
AUTOGENERATE_NAME(ClientTravel)
AUTOGENERATE_NAME(TeamMessage)
AUTOGENERATE_NAME(FellOutOfWorld)
AUTOGENERATE_NAME(EndCrouch)
AUTOGENERATE_NAME(GameEnding)
AUTOGENERATE_NAME(ServerTravel)
AUTOGENERATE_NAME(PostLogin)
AUTOGENERATE_NAME(PreClientTravel)
AUTOGENERATE_NAME(BroadcastLocalizedMessage)
AUTOGENERATE_NAME(ReceiveLocalizedMessage)
AUTOGENERATE_NAME(LogGameSpecial)
AUTOGENERATE_NAME(PostTouch)
AUTOGENERATE_NAME(LogGameSpecial2)
AUTOGENERATE_NAME(PostNetBeginPlay)
AUTOGENERATE_NAME(BroadcastLocalized)
AUTOGENERATE_NAME(ShowUpgradeMenu)
AUTOGENERATE_NAME(SetProgressMessage)
AUTOGENERATE_NAME(SetProgressTime)
AUTOGENERATE_NAME(StartCrouch)
AUTOGENERATE_NAME(EndClimbLadder)
AUTOGENERATE_NAME(Broadcast)
AUTOGENERATE_NAME(InitInputSystem)
AUTOGENERATE_NAME(FinishedInterpolation)
AUTOGENERATE_NAME(KeyFrameReached)
AUTOGENERATE_NAME(PlayerSeesMe)
AUTOGENERATE_NAME(ActorEnteredVolume)
AUTOGENERATE_NAME(ActorLeavingVolume)
AUTOGENERATE_NAME(BreathTimer)
AUTOGENERATE_NAME(PawnEnteredVolume)
AUTOGENERATE_NAME(PawnLeavingVolume)
AUTOGENERATE_NAME(TriggerEvent)
AUTOGENERATE_NAME(GetLocalLogFileName)
AUTOGENERATE_NAME(WorldSpaceOverlays)
AUTOGENERATE_NAME(ZoneChange)
AUTOGENERATE_NAME(ChangeAnimation)
AUTOGENERATE_NAME(PlayJump)
AUTOGENERATE_NAME(PlayFalling)
AUTOGENERATE_NAME(PlayLandingAnimation)
AUTOGENERATE_NAME(ThirdPersonEffects)
AUTOGENERATE_NAME(Initialized)
AUTOGENERATE_NAME(AddInteraction)
AUTOGENERATE_NAME(RemoveInteraction)
AUTOGENERATE_NAME(SetFocusTo)
AUTOGENERATE_NAME(PlayDying)
AUTOGENERATE_NAME(UsedBy)
AUTOGENERATE_NAME(PhysicsChangedFor)
AUTOGENERATE_NAME(SetAnimAction)
AUTOGENERATE_NAME(Timer2)
AUTOGENERATE_NAME(PreRender)
AUTOGENERATE_NAME(ScoreUpdated)
AUTOGENERATE_NAME(OnoStartNotif)
AUTOGENERATE_NAME(ThirdPersonAltEffects)
AUTOGENERATE_NAME(OnAdminReply)
AUTOGENERATE_NAME(CloseMenu)
AUTOGENERATE_NAME(CloseAll)
AUTOGENERATE_NAME(InitializeController)
AUTOGENERATE_NAME(NeedsMenuResolution)
AUTOGENERATE_NAME(SetRequiredGameResolution)
AUTOGENERATE_NAME(PlayBaffed)
AUTOGENERATE_NAME(ParseDynamicLoading)
AUTOGENERATE_NAME(InputTimeOut)
AUTOGENERATE_NAME(EndMap)
AUTOGENERATE_NAME(ThirdPersonReLoad)
AUTOGENERATE_NAME(ClientPickedUp)
AUTOGENERATE_NAME(ChangeSkin)
AUTOGENERATE_NAME(SetMenuStackBackup)
AUTOGENERATE_NAME(GetMenuStackBackup)
AUTOGENERATE_NAME(ClientRespawned)
AUTOGENERATE_NAME(SkinUpdated)
AUTOGENERATE_NAME(IAmKicked)

#ifndef NAMES_ONLY

enum EDoubleClickDir
{
    DCLICK_None             =0,
    DCLICK_Left             =1,
    DCLICK_Right            =2,
    DCLICK_Forward          =3,
    DCLICK_Back             =4,
    DCLICK_Active           =5,
    DCLICK_Done             =6,
    DCLICK_MAX              =7,
};
enum ETravelType
{
    TRAVEL_Absolute         =0,
    TRAVEL_Partial          =1,
    TRAVEL_Relative         =2,
    TRAVEL_MAX              =3,
};
enum ELightingGroup
{
    LG_Decor1               =0,
    LG_Decor2               =1,
    LG_Decor3               =2,
    LG_Actor                =3,
    LG_Decor4               =4,
    LG_Decor5               =5,
    LG_Decor6               =6,
    LG_Decor7               =7,
    LG_Decor8               =8,
    LG_Decor9               =9,
    LG_Decor10              =10,
    LG_MAX                  =11,
};
enum ELightEffect
{
    LE_None                 =0,
    LE_TorchWaver           =1,
    LE_FireWaver            =2,
    LE_WateryShimmer        =3,
    LE_Searchlight          =4,
    LE_SlowWave             =5,
    LE_FastWave             =6,
    LE_CloudCast            =7,
    LE_StaticSpot           =8,
    LE_Shock                =9,
    LE_Disco                =10,
    LE_Warp                 =11,
    LE_Spotlight            =12,
    LE_NonIncidence         =13,
    LE_Shell                =14,
    LE_OmniBumpMap          =15,
    LE_Interference         =16,
    LE_Cylinder             =17,
    LE_Rotor                =18,
    LE_Unused               =19,
    LE_Sunlight             =20,
    LE_MAX                  =21,
};
enum ELightType
{
    LT_None                 =0,
    LT_Steady               =1,
    LT_Pulse                =2,
    LT_Blink                =3,
    LT_Flicker              =4,
    LT_Strobe               =5,
    LT_BackdropLight        =6,
    LT_SubtlePulse          =7,
    LT_MAX                  =8,
};
enum ESNDMaterial
{
    SND_FootStep            =0,
    SND_XIIIFootStep        =1,
    SND_PNJStep             =2,
    SND_XIIIStep            =3,
    SND_Jump                =4,
    SND_XIIIJump            =5,
    SND_Hit                 =6,
    SND_MAX                 =7,
};
enum ERenderStyle
{
    STY_None                =0,
    STY_Normal              =1,
    STY_Masked              =2,
    STY_Translucent         =3,
    STY_Modulated           =4,
    STY_Alpha               =5,
    STY_Particle            =6,
    STY_MAX                 =7,
};
enum ESNDMusicVolume
{
    SNDMusic_Off            =0,
    SNDMusic_Light          =1,
    SNDMusic_Normal         =2,
    SNDMusic_MAX            =3,
};
enum EDrawType
{
    DT_None                 =0,
    DT_Sprite               =1,
    DT_Mesh                 =2,
    DT_Brush                =3,
    DT_RopeSprite           =4,
    DT_VerticalSprite       =5,
    DT_Terraform            =6,
    DT_SpriteAnimOnce       =7,
    DT_StaticMesh           =8,
    DT_DrawType             =9,
    DT_Particle             =10,
    DT_AntiPortal           =11,
    DT_Trail                =12,
    DT_MAX                  =13,
};
enum ENetRole
{
    ROLE_None               =0,
    ROLE_DumbProxy          =1,
    ROLE_SimulatedProxy     =2,
    ROLE_AutonomousProxy    =3,
    ROLE_Authority          =4,
    ROLE_MAX                =5,
};
enum EColCategory
{
    ColType_User            =0,
    ColType_NoCol           =1,
    ColType_StaticSolid     =2,
    ColType_StaticGlass     =3,
    ColType_StaticGrid      =4,
    ColType_StaticSolidOnlyWeapon=5,
    ColType_MoverSolid      =6,
    ColType_MoverGlass      =7,
    ColType_MoverGrid       =8,
    ColType_Pawn            =9,
    ColType_Pickup          =10,
    ColType_PickupArmeImpro =11,
    ColType_MAX             =12,
};
enum EPhysics
{
    PHYS_None               =0,
    PHYS_Walking            =1,
    PHYS_Falling            =2,
    PHYS_Swimming           =3,
    PHYS_Flying             =4,
    PHYS_Rotating           =5,
    PHYS_Projectile         =6,
    PHYS_Interpolating      =7,
    PHYS_MovingBrush        =8,
    PHYS_Spider             =9,
    PHYS_Trailer            =10,
    PHYS_Ladder             =11,
    PHYS_RootMotion         =12,
    PHYS_MAX                =13,
};
#define UCONST_TRACETYPE_RequestBones 0x010000
#define UCONST_TRACETYPE_DiscardIfCanShootThroughWithProjectileWeapon 0x008000
#define UCONST_TRACETYPE_DiscardIfCanShootThroughWithRayCastingWeapon 0x004000
#define UCONST_TRACETYPE_DiscardIfCanSeeThrough 0x002000
#define UCONST_TRACETYPE_Standard 0x000000
#define UCONST_MAXSTEPHEIGHT 35.0
#define UCONST_SNDType_All 0x00000FFF
#define UCONST_SNDType_SFXOnly 0x00000200
#define UCONST_SNDType_UnderWater 0x00000100
#define UCONST_SNDType_MicroCanon 0x00000080
#define UCONST_SNDType_Ryan 0x00000040
#define UCONST_SNDType_Menu 0x00000020
#define UCONST_SNDType_Music 0x00000010
#define UCONST_SNDType_StrAmb 0x00000008
#define UCONST_SNDType_StrVoice 0x00000004
#define UCONST_SNDType_Voice 0x00000002
#define UCONST_SNDType_Effect 0x00000001

struct AActor_eventTriggerEvent_Parms
{
    FName EventName;
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTravelPostAccept_Parms
{
};
struct AActor_eventTravelPreAccept_Parms
{
};
struct AActor_eventPostNetBeginPlay_Parms
{
};
struct AActor_eventSetInitialState_Parms
{
};
struct AActor_eventPostBeginPlay_Parms
{
};
struct AActor_eventBroadcastLocalizedMessage_Parms
{
    class UClass* MessageClass;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct AActor_eventPreBeginPlay_Parms
{
};
struct AActor_eventBeginPlay_Parms
{
};
struct AActor_eventPostTeleport_Parms
{
    class ATeleporter* OutTeleporter;
};
struct AActor_eventPreTeleport_Parms
{
    class ATeleporter* InTeleporter;
    BITFIELD ReturnValue;
};
struct AActor_eventTakeDamage_Parms
{
    INT Damage;
    class APawn* EventInstigator;
    FVector HitLocation;
    FVector Momentum;
    class UClass* DamageType;
};
struct AActor_eventKilledBy_Parms
{
    class APawn* EventInstigator;
};
struct AActor_eventFellOutOfWorld_Parms
{
};
struct AActor_eventUsedBy_Parms
{
    class APawn* User;
};
struct AActor_eventEndedRotation_Parms
{
};
struct AActor_eventFinishedInterpolation_Parms
{
    class AInterpolationPoint* Other;
};
struct AActor_eventEncroachedBy_Parms
{
    class AActor* Other;
};
struct AActor_eventEncroachingOn_Parms
{
    class AActor* Other;
    BITFIELD ReturnValue;
};
struct AActor_eventSpecialHandling_Parms
{
    class APawn* Other;
    class AActor* ReturnValue;
};
struct AActor_eventDetach_Parms
{
    class AActor* Other;
};
struct AActor_eventAttach_Parms
{
    class AActor* Other;
};
struct AActor_eventBaseChange_Parms
{
};
struct AActor_eventBump_Parms
{
    class AActor* Other;
};
struct AActor_eventUnTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventPostTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventTouch_Parms
{
    class AActor* Other;
};
struct AActor_eventPhysicsVolumeChange_Parms
{
    class APhysicsVolume* NewVolume;
};
struct AActor_eventZoneChange_Parms
{
    class AZoneInfo* NewZone;
};
struct AActor_eventLanded_Parms
{
    FVector HitNormal;
};
struct AActor_eventFalling_Parms
{
};
struct AActor_eventHitWall_Parms
{
    FVector HitNormal;
    class AActor* HitWall;
};
struct AActor_eventTimer2_Parms
{
};
struct AActor_eventTimer_Parms
{
};
struct AActor_eventEndEvent_Parms
{
};
struct AActor_eventBeginEvent_Parms
{
};
struct AActor_eventUnTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTrigger_Parms
{
    class AActor* Other;
    class APawn* EventInstigator;
};
struct AActor_eventTick_Parms
{
    FLOAT DeltaTime;
};
struct AActor_eventLostChild_Parms
{
    class AActor* Other;
};
struct AActor_eventGainedChild_Parms
{
    class AActor* Other;
};
struct AActor_eventDestroyed_Parms
{
};
struct AActor_eventOnoStartNotif_Parms
{
};
struct AActor_eventEndEndFlash_Parms
{
};
struct AActor_eventBeginEndFlash_Parms
{
};
struct AActor_eventEndBeginFlash_Parms
{
};
struct AActor_eventBeginBeginFlash_Parms
{
};
struct AActor_eventUnPauseVoice_Parms
{
};
struct AActor_eventPauseVoice_Parms
{
};
struct AActor_eventEndOfVoice_Parms
{
};
struct AActor_eventAnimEnd_Parms
{
    INT Channel;
};
struct AActor_eventParseDynamicLoading_Parms
{
    class ALevelInfo* pLevelInfo;
};
class ENGINE_API AActor : public UObject
{
public:
    FLOAT LastRenderTime;
    BITFIELD bDecor1Light:1 GCC_PACK(4);
    BITFIELD bDecor2Light:1;
    BITFIELD bDecor3Light:1;
    BITFIELD bActorLight:1;
    BITFIELD bDecor4Light:1;
    BITFIELD bDecor5Light:1;
    BITFIELD bDecor6Light:1;
    BITFIELD bDecor7Light:1;
    BITFIELD bDecor8Light:1;
    BITFIELD bDecor9Light:1;
    BITFIELD bDecor10Light:1;
    BITFIELD bStatic:1;
    BITFIELD bHidden:1;
    BITFIELD bNoDelete:1;
    BITFIELD bAnimFinished:1;
    BITFIELD bAnimByOwner:1;
    BITFIELD bDeleteMe:1;
    BITFIELD bTicked:1;
    BITFIELD bDynamicLight:1;
    BITFIELD bTimerLoop:1;
    BITFIELD bTimer2Loop:1;
    BITFIELD bCanTeleport:1;
    BITFIELD bOwnerNoSee:1;
    BITFIELD bOnlyOwnerSee:1;
    BITFIELD bAlwaysTick:1;
    BITFIELD bHighDetail:1;
    BITFIELD bStasis:1;
    BITFIELD bTrailerSameRotation:1;
    BITFIELD bTrailerPrePivot:1;
    BITFIELD bClientAnim:1;
    BITFIELD bWorldGeometry:1;
    BITFIELD bAcceptsProjectors:1;
    BITFIELD bOrientOnSlope:1;
    BITFIELD bEaseInteract:1;
    BITFIELD bInteractive:1;
    BITFIELD bNetTemporary:1;
    BITFIELD bNetOptional:1;
    BITFIELD bNetDirty:1;
    BITFIELD bAlwaysRelevant:1;
    BITFIELD bReplicateInstigator:1;
    BITFIELD bReplicateMovement:1;
    BITFIELD bSkipActorPropertyReplication:1;
    BITFIELD bUpdateSimulatedPosition:1;
    BITFIELD bTearOff:1;
    BITFIELD bOnlyDirtyReplication:1;
    BITFIELD bReplicateAnimations:1;
    BITFIELD bIgnoreVignetteAlpha:1;
    BITFIELD bDelayDisplay:1;
    BITFIELD bSpecialDelayFov:1;
    BITFIELD bUnlit:1;
    BITFIELD bNoSmooth:1;
    BITFIELD bShadowCast:1;
    BITFIELD bStaticLighting:1;
    BITFIELD bNoAmbientLight:1;
    BITFIELD bNoImpact:1;
    BITFIELD bIgnoreFog:1;
    BITFIELD bForceInUniverse:1;
    BITFIELD bIgnoreDynLight:1;
    BITFIELD bHurtEntry:1;
    BITFIELD bGameRelevant:1;
    BITFIELD bCollideWhenPlacing:1;
    BITFIELD bTravel:1;
    BITFIELD bMovable:1;
    BITFIELD bDestroyInPainVolume:1;
    BITFIELD bPendingDelete:1;
    BITFIELD bHasRollOff:1;
    BITFIELD bHasPosition:1;
    BITFIELD bUnderwater:1;
    BITFIELD bLeftFoot:1;
    BITFIELD bCollideActors:1;
    BITFIELD bCollideWorld:1;
    BITFIELD bBlockActors:1;
    BITFIELD bBlockPlayers:1;
    BITFIELD bProjTarget:1;
    BITFIELD bBlockZeroExtentTraces:1;
    BITFIELD bBlockNonZeroExtentTraces:1;
    BITFIELD bUseCylinderCollision:1;
    BITFIELD bCanSeeThrough:1;
    BITFIELD bCanShootThroughWithRayCastingWeapon:1;
    BITFIELD bCanShootThroughWithProjectileWeapon:1;
    BITFIELD bActorShadows:1;
    BITFIELD bIgnoredByShadows:1;
    BITFIELD bLensFlare:1;
    BITFIELD bLightOwnZone:1;
    BITFIELD bUseOnlyPivotAmbient:1;
    BITFIELD bVisibleOnlyOwnZone:1;
    BITFIELD bLightChanged:1;
    BITFIELD bBounce:1;
    BITFIELD bFixedRotationDir:1;
    BITFIELD bRotateToDesired:1;
    BITFIELD bInterpolating:1;
    BITFIELD bJustTeleported:1;
    BYTE Physics GCC_PACK(4);
    BYTE Role;
    BYTE RemoteRole;
    BYTE DrawType;
    INT NetTag;
    FLOAT LastRenderDist;
    FName Tag;
    FLOAT TimerRate;
    FLOAT TimerCounter;
    FLOAT Timer2Rate;
    FLOAT Timer2Counter;
    FLOAT LifeSpan;
    FName AnimSequence;
    FLOAT AnimFrame;
    FLOAT AnimRate;
    FLOAT TweenRate;
    class UMeshInstance* MeshInstance;
    class AActor* Owner;
    FName InitialState;
    FName Group;
    class ALevelInfo* Level;
    class ULevel* XLevel;
    FName Event;
    class APawn* Instigator;
    class USound* AmbientSound;
    class AInventory* Inventory;
    class AActor* Base;
    FPointRegion Region;
    TArrayNoInit<INT> Leaves;
    FLOAT LatentFloat;
    TArrayNoInit<class AActor*> Touching;
    class AActor* Deleted;
    INT CollisionInfo;
    class APhysicsVolume* PhysicsVolume;
    FVector Location;
    FRotator Rotation;
    FVector Velocity;
    FVector Acceleration;
    FName AttachTag;
    TArrayNoInit<class AActor*> Attached;
    FVector RelativeLocation;
    FRotator RelativeRotation;
    FName AttachmentBone;
    TArrayNoInit<FInstanceProjectorInfo> Projectors;
    class UMaterial* Texture;
    class UMesh* Mesh;
    class UStaticMesh* StaticMesh;
    class UStaticMeshInstance* StaticMeshInstance;
    class UModel* Brush;
    FLOAT DrawScale;
    FVector DrawScale3D;
    FVector PrePivot;
    TArrayNoInit<class UMaterial*> Skins;
    FLOAT PanCoeff;
    FLOAT SaturationDistance;
    FLOAT StabilisationDistance;
    FLOAT StabilisationVolume;
    FLOAT VoicesSaturationDistance;
    FLOAT VoicesStabilisationDistance;
    FLOAT VoicesStabilisationVolume;
    FLOAT CollisionRadius;
    FLOAT CollisionHeight;
    BYTE AmbientGlow;
    BYTE Style;
    BYTE SNDMaterial;
    BYTE LightType;
    BYTE LightEffect;
    BYTE LightBrightness;
    BYTE LightHue;
    BYTE LightSaturation;
    BYTE LightRadius;
    BYTE LightPeriod;
    BYTE LightPhase;
    BYTE LightCone;
    BYTE IterationCategory;
    BYTE bSLightGroup;
    BYTE ColCategory;
    FLOAT Mass;
    FLOAT Buoyancy;
    FRotator RotationRate;
    FRotator DesiredRotation;
    class AActor* PendingTouch;
    FVector ColLocation;
    FAnimRep SimAnim;
    FLOAT NetPriority;
    FLOAT NetUpdateFrequency;
    BITFIELD bNetInitial:1 GCC_PACK(4);
    BITFIELD bNetOwner:1;
    BITFIELD bNetRelevant:1;
    BITFIELD bDemoRecording:1;
    BITFIELD bClientDemoRecording:1;
    BITFIELD bClientDemoNetFunc:1;
    BITFIELD bHiddenEd:1;
    BITFIELD bHiddenEdGroup:1;
    BITFIELD bDirectional:1;
    BITFIELD bSelected:1;
    BITFIELD bEdLocked:1;
    BITFIELD bEdShouldSnap:1;
    BITFIELD bEdSnap:1;
    BITFIELD bTempEditor:1;
    BITFIELD bObsolete:1;
    BITFIELD bPathColliding:1;
    BITFIELD bPathTemp:1;
    BITFIELD bScriptInitialized:1;
    class UClass* MessageClass GCC_PACK(4);
    DECLARE_FUNCTION(execSaveAtCheckpoint);
    DECLARE_FUNCTION(execMultiply_ColorFloat);
    DECLARE_FUNCTION(execAdd_ColorColor);
    DECLARE_FUNCTION(execMultiply_FloatColor);
    DECLARE_FUNCTION(execSubtract_ColorColor);
    DECLARE_FUNCTION(execActorInIterationCategory);
    DECLARE_FUNCTION(execCollidingActors);
    DECLARE_FUNCTION(execVisibleDamageableActors);
    DECLARE_FUNCTION(execVisibleCollidingActors);
    DECLARE_FUNCTION(execVisibleActors);
    DECLARE_FUNCTION(execRadiusActors);
    DECLARE_FUNCTION(execTraceActors);
    DECLARE_FUNCTION(execTouchingActors);
    DECLARE_FUNCTION(execBasedActors);
    DECLARE_FUNCTION(execChildActors);
    DECLARE_FUNCTION(execDynamicActors);
    DECLARE_FUNCTION(execAllActors);
    DECLARE_FUNCTION(execMoveCacheEntry);
    DECLARE_FUNCTION(execGetCacheEntry);
    DECLARE_FUNCTION(execGetNextIntDesc);
    DECLARE_FUNCTION(execGetNextInt);
    DECLARE_FUNCTION(execGetURLMap);
    DECLARE_FUNCTION(execGetNextSkin);
    DECLARE_FUNCTION(execGetMapName);
    DECLARE_FUNCTION(execPlayerCanSeeMe);
    DECLARE_FUNCTION(execMakeNoise);
    DECLARE_FUNCTION(execResumeAllSounds);
    DECLARE_FUNCTION(execResumeMusic);
    DECLARE_FUNCTION(execKillAllSounds);
    DECLARE_FUNCTION(execPauseAllSounds);
    DECLARE_FUNCTION(execPauseMusic);
    DECLARE_FUNCTION(execStopAllSounds);
    DECLARE_FUNCTION(execStopActorSounds);
    DECLARE_FUNCTION(execStopVoice);
    DECLARE_FUNCTION(execStopMusic);
    DECLARE_FUNCTION(execStopSound);
    DECLARE_FUNCTION(execPlaySndDeathOno);
    DECLARE_FUNCTION(execPlaySndPNJOno);
    DECLARE_FUNCTION(execPlaySndXIIIStep);
    DECLARE_FUNCTION(execPlaySndPNJStep);
    DECLARE_FUNCTION(execPlayRolloffSound);
    DECLARE_FUNCTION(execPlayMenu);
    DECLARE_FUNCTION(execPlayStrAmb);
    DECLARE_FUNCTION(execPlayVoice);
    DECLARE_FUNCTION(execPlayStrVoice);
    DECLARE_FUNCTION(execWaveHasPosition);
    DECLARE_FUNCTION(execGetWaveDuration);
    DECLARE_FUNCTION(execPlayMusic);
    DECLARE_FUNCTION(execPlaySound);
    DECLARE_FUNCTION(execSetVolume);
    DECLARE_FUNCTION(execSetMusicSliderPos);
    DECLARE_FUNCTION(execSetSoundMode);
    DECLARE_FUNCTION(execSetTimer2);
    DECLARE_FUNCTION(execSetTimer);
    DECLARE_FUNCTION(execDestroy);
    DECLARE_FUNCTION(execSpawn);
    DECLARE_FUNCTION(execFastTrace);
    DECLARE_FUNCTION(execGetLastTraceBone);
    DECLARE_FUNCTION(execTrace);
    DECLARE_FUNCTION(execPSX2BootstrapDemoGetGamePlayTimeout);
    DECLARE_FUNCTION(execSetPhysics);
    DECLARE_FUNCTION(execFinishInterpolation);
    DECLARE_FUNCTION(execReplaceATextureByAnOther);
    DECLARE_FUNCTION(execRefreshLighting);
    DECLARE_FUNCTION(execRefreshDisplaying);
    DECLARE_FUNCTION(execRecomputeBoundingVolume);
    DECLARE_FUNCTION(execCheckWasVisible);
    DECLARE_FUNCTION(execGetCartoonLightDir);
    DECLARE_FUNCTION(execGetRenderBoundingSphere);
    DECLARE_FUNCTION(execAnimIsInGroup);
    DECLARE_FUNCTION(execGetAnimParams);
    DECLARE_FUNCTION(execSetBoneRotation);
    DECLARE_FUNCTION(execSetBoneLocation);
    DECLARE_FUNCTION(execSetBoneDirection);
    DECLARE_FUNCTION(execSetBoneScalePerAxis);
    DECLARE_FUNCTION(execSetBoneScale);
    DECLARE_FUNCTION(execLockRootMotion);
    DECLARE_FUNCTION(execDetachFromBone);
    DECLARE_FUNCTION(execAttachToBone);
    DECLARE_FUNCTION(execGetRootRotationDelta);
    DECLARE_FUNCTION(execGetRootLocationDelta);
    DECLARE_FUNCTION(execGetRootRotation);
    DECLARE_FUNCTION(execGetRootLocation);
    DECLARE_FUNCTION(execGetBoneRotation);
    DECLARE_FUNCTION(execGetBoneCoords);
    DECLARE_FUNCTION(execAnimBlendToAlpha);
    DECLARE_FUNCTION(execAnimBlendParams);
    DECLARE_FUNCTION(execLinkSkelAnim);
    DECLARE_FUNCTION(execGetNotifyChannel);
    DECLARE_FUNCTION(execEnableChannelNotify);
    DECLARE_FUNCTION(execIsTweening);
    DECLARE_FUNCTION(execStopAnimating);
    DECLARE_FUNCTION(execHasAnim);
    DECLARE_FUNCTION(execFinishAnim);
    DECLARE_FUNCTION(execIsAnimating);
    DECLARE_FUNCTION(execTweenAnim);
    DECLARE_FUNCTION(execLoopAnim);
    DECLARE_FUNCTION(execPlayAnim);
    DECLARE_FUNCTION(execResetInputs);
    DECLARE_FUNCTION(execIntersectWaterPlane);
    DECLARE_FUNCTION(execGetMaterial);
    DECLARE_FUNCTION(execGetBoundingBox);
    DECLARE_FUNCTION(execSetOwner);
    DECLARE_FUNCTION(execSetBase);
    DECLARE_FUNCTION(execAutonomousPhysics);
    DECLARE_FUNCTION(execMoveSmooth);
    DECLARE_FUNCTION(execSetRelativeLocation);
    DECLARE_FUNCTION(execSetRelativeRotation);
    DECLARE_FUNCTION(execSetRotation);
    DECLARE_FUNCTION(execSetLocation);
    DECLARE_FUNCTION(execMove);
    DECLARE_FUNCTION(execSetDrawType);
    DECLARE_FUNCTION(execSetDrawScale3D);
    DECLARE_FUNCTION(execSetDrawScale);
    DECLARE_FUNCTION(execSetCollisionSize);
    DECLARE_FUNCTION(execSetCollision);
    DECLARE_FUNCTION(execSleep);
    DECLARE_FUNCTION(execError);
    DECLARE_FUNCTION(execConsoleCommand);
    void eventTriggerEvent(FName EventName, class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventTriggerEvent_Parms Parms;
        Parms.EventName=EventName;
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_TriggerEvent),&Parms);
    }
    void eventTravelPostAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPostAccept),NULL);
    }
    void eventTravelPreAccept()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_TravelPreAccept),NULL);
    }
    void eventPostNetBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostNetBeginPlay),NULL);
    }
    void eventSetInitialState()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SetInitialState),NULL);
    }
    void eventPostBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PostBeginPlay),NULL);
    }
    void eventBroadcastLocalizedMessage(class UClass* MessageClass, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        AActor_eventBroadcastLocalizedMessage_Parms Parms;
        Parms.MessageClass=MessageClass;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalizedMessage),&Parms);
    }
    void eventPreBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreBeginPlay),NULL);
    }
    void eventBeginPlay()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginPlay),NULL);
    }
    void eventPostTeleport(class ATeleporter* OutTeleporter)
    {
        AActor_eventPostTeleport_Parms Parms;
        Parms.OutTeleporter=OutTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTeleport),&Parms);
    }
    BITFIELD eventPreTeleport(class ATeleporter* InTeleporter)
    {
        AActor_eventPreTeleport_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InTeleporter=InTeleporter;
        ProcessEvent(FindFunctionChecked(ENGINE_PreTeleport),&Parms);
        return Parms.ReturnValue;
    }
    void eventTakeDamage(INT Damage, class APawn* EventInstigator, FVector HitLocation, FVector Momentum, class UClass* DamageType)
    {
        AActor_eventTakeDamage_Parms Parms;
        Parms.Damage=Damage;
        Parms.EventInstigator=EventInstigator;
        Parms.HitLocation=HitLocation;
        Parms.Momentum=Momentum;
        Parms.DamageType=DamageType;
        ProcessEvent(FindFunctionChecked(ENGINE_TakeDamage),&Parms);
    }
    void eventKilledBy(class APawn* EventInstigator)
    {
        AActor_eventKilledBy_Parms Parms;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_KilledBy),&Parms);
    }
    void eventFellOutOfWorld()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_FellOutOfWorld),NULL);
    }
    void eventUsedBy(class APawn* User)
    {
        AActor_eventUsedBy_Parms Parms;
        Parms.User=User;
        ProcessEvent(FindFunctionChecked(ENGINE_UsedBy),&Parms);
    }
    void eventEndedRotation()
    {
        if(IsProbing(NAME_EndedRotation)) {
        ProcessEvent(FindFunctionChecked(ENGINE_EndedRotation),NULL);
        }
    }
    void eventFinishedInterpolation(class AInterpolationPoint* Other)
    {
        AActor_eventFinishedInterpolation_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_FinishedInterpolation),&Parms);
    }
    void eventEncroachedBy(class AActor* Other)
    {
        AActor_eventEncroachedBy_Parms Parms;
        if(IsProbing(NAME_EncroachedBy)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachedBy),&Parms);
        }
    }
    BITFIELD eventEncroachingOn(class AActor* Other)
    {
        AActor_eventEncroachingOn_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_EncroachingOn)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_EncroachingOn),&Parms);
        }
        return Parms.ReturnValue;
    }
    class AActor* eventSpecialHandling(class APawn* Other)
    {
        AActor_eventSpecialHandling_Parms Parms;
        Parms.ReturnValue=0;
        if(IsProbing(NAME_SpecialHandling)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_SpecialHandling),&Parms);
        }
        return Parms.ReturnValue;
    }
    void eventDetach(class AActor* Other)
    {
        AActor_eventDetach_Parms Parms;
        if(IsProbing(NAME_Detach)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Detach),&Parms);
        }
    }
    void eventAttach(class AActor* Other)
    {
        AActor_eventAttach_Parms Parms;
        if(IsProbing(NAME_Attach)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Attach),&Parms);
        }
    }
    void eventBaseChange()
    {
        if(IsProbing(NAME_BaseChange)) {
        ProcessEvent(FindFunctionChecked(ENGINE_BaseChange),NULL);
        }
    }
    void eventBump(class AActor* Other)
    {
        AActor_eventBump_Parms Parms;
        if(IsProbing(NAME_Bump)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Bump),&Parms);
        }
    }
    void eventUnTouch(class AActor* Other)
    {
        AActor_eventUnTouch_Parms Parms;
        if(IsProbing(NAME_UnTouch)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTouch),&Parms);
        }
    }
    void eventPostTouch(class AActor* Other)
    {
        AActor_eventPostTouch_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PostTouch),&Parms);
    }
    void eventTouch(class AActor* Other)
    {
        AActor_eventTouch_Parms Parms;
        if(IsProbing(NAME_Touch)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_Touch),&Parms);
        }
    }
    void eventPhysicsVolumeChange(class APhysicsVolume* NewVolume)
    {
        AActor_eventPhysicsVolumeChange_Parms Parms;
        if(IsProbing(NAME_PhysicsVolumeChange)) {
        Parms.NewVolume=NewVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_PhysicsVolumeChange),&Parms);
        }
    }
    void eventZoneChange(class AZoneInfo* NewZone)
    {
        AActor_eventZoneChange_Parms Parms;
        Parms.NewZone=NewZone;
        ProcessEvent(FindFunctionChecked(ENGINE_ZoneChange),&Parms);
    }
    void eventLanded(FVector HitNormal)
    {
        AActor_eventLanded_Parms Parms;
        if(IsProbing(NAME_Landed)) {
        Parms.HitNormal=HitNormal;
        ProcessEvent(FindFunctionChecked(ENGINE_Landed),&Parms);
        }
    }
    void eventFalling()
    {
        if(IsProbing(NAME_Falling)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Falling),NULL);
        }
    }
    void eventHitWall(FVector HitNormal, class AActor* HitWall)
    {
        AActor_eventHitWall_Parms Parms;
        if(IsProbing(NAME_HitWall)) {
        Parms.HitNormal=HitNormal;
        Parms.HitWall=HitWall;
        ProcessEvent(FindFunctionChecked(ENGINE_HitWall),&Parms);
        }
    }
    void eventTimer2()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Timer2),NULL);
    }
    void eventTimer()
    {
        if(IsProbing(NAME_Timer)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Timer),NULL);
        }
    }
    void eventEndEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndEvent),NULL);
    }
    void eventBeginEvent()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginEvent),NULL);
    }
    void eventUnTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventUnTrigger_Parms Parms;
        if(IsProbing(NAME_UnTrigger)) {
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_UnTrigger),&Parms);
        }
    }
    void eventTrigger(class AActor* Other, class APawn* EventInstigator)
    {
        AActor_eventTrigger_Parms Parms;
        if(IsProbing(NAME_Trigger)) {
        Parms.Other=Other;
        Parms.EventInstigator=EventInstigator;
        ProcessEvent(FindFunctionChecked(ENGINE_Trigger),&Parms);
        }
    }
    void eventTick(FLOAT DeltaTime)
    {
        AActor_eventTick_Parms Parms;
        if(IsProbing(NAME_Tick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Tick),&Parms);
        }
    }
    void eventLostChild(class AActor* Other)
    {
        AActor_eventLostChild_Parms Parms;
        if(IsProbing(NAME_LostChild)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_LostChild),&Parms);
        }
    }
    void eventGainedChild(class AActor* Other)
    {
        AActor_eventGainedChild_Parms Parms;
        if(IsProbing(NAME_GainedChild)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_GainedChild),&Parms);
        }
    }
    void eventDestroyed()
    {
        if(IsProbing(NAME_Destroyed)) {
        ProcessEvent(FindFunctionChecked(ENGINE_Destroyed),NULL);
        }
    }
    void eventOnoStartNotif()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_OnoStartNotif),NULL);
    }
    void eventEndEndFlash()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndEndFlash),NULL);
    }
    void eventBeginEndFlash()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginEndFlash),NULL);
    }
    void eventEndBeginFlash()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndBeginFlash),NULL);
    }
    void eventBeginBeginFlash()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BeginBeginFlash),NULL);
    }
    void eventUnPauseVoice()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_UnPauseVoice),NULL);
    }
    void eventPauseVoice()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PauseVoice),NULL);
    }
    void eventEndOfVoice()
    {
        if(IsProbing(NAME_EndOfVoice)) {
        ProcessEvent(FindFunctionChecked(ENGINE_EndOfVoice),NULL);
        }
    }
    void eventAnimEnd(INT Channel)
    {
        AActor_eventAnimEnd_Parms Parms;
        if(IsProbing(NAME_AnimEnd)) {
        Parms.Channel=Channel;
        ProcessEvent(FindFunctionChecked(ENGINE_AnimEnd),&Parms);
        }
    }
    void eventParseDynamicLoading(class ALevelInfo* pLevelInfo)
    {
        AActor_eventParseDynamicLoading_Parms Parms;
        Parms.pLevelInfo=pLevelInfo;
        ProcessEvent(FindFunctionChecked(ENGINE_ParseDynamicLoading),&Parms);
    }
    DECLARE_CLASS(AActor,UObject,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AActor)
};


class ENGINE_API ALadder : public ANavigationPoint
{
public:
    class ALadderVolume* MyLadder;
    class ALadder* LadderList;
    DECLARE_CLASS(ALadder,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALadder)
};


class ENGINE_API AAutoLadder : public ALadder
{
public:
    DECLARE_CLASS(AAutoLadder,ALadder,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAutoLadder)
};


class ENGINE_API ADoor : public ANavigationPoint
{
public:
    FName DoorTag;
    class AMover* MyDoor;
    FName DoorTrigger;
    class AActor* RecommendedTrigger;
    BITFIELD bInitiallyClosed:1 GCC_PACK(4);
    BITFIELD bBlockedWhenClosed:1;
    BITFIELD bDoorOpen:1;
    BITFIELD bTempNoCollide:1;
    DECLARE_CLASS(ADoor,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADoor)
};


class ENGINE_API ALiftExit : public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    BYTE SuggestedKeyFrame;
    BYTE KeyFrame;
    DECLARE_CLASS(ALiftExit,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALiftExit)
};


class ENGINE_API ALiftCenter : public ANavigationPoint
{
public:
    FName LiftTag;
    class AMover* MyLift;
    FName LiftTrigger;
    class ATrigger* RecommendedTrigger;
    FLOAT MaxDist2D;
    FVector LiftOffset;
    DECLARE_CLASS(ALiftCenter,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALiftCenter)
};


class ENGINE_API AWarpZoneMarker : public ANavigationPoint
{
public:
    class AWarpZoneInfo* markedWarpZone;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    DECLARE_CLASS(AWarpZoneMarker,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWarpZoneMarker)
};


class ENGINE_API AInventorySpot : public ANavigationPoint
{
public:
    class APickup* markedItem;
    DECLARE_CLASS(AInventorySpot,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInventorySpot)
};


class ENGINE_API APlayerStart : public ANavigationPoint
{
public:
    BYTE TeamNumber;
    BITFIELD bSinglePlayerStart:1 GCC_PACK(4);
    BITFIELD bCoopStart:1;
    BITFIELD bEnabled:1;
    DECLARE_CLASS(APlayerStart,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerStart)
};


class ENGINE_API ATeleporter : public ANavigationPoint
{
public:
    FStringNoInit URL;
    FName ProductRequired;
    BITFIELD bChangesVelocity:1 GCC_PACK(4);
    BITFIELD bChangesYaw:1;
    BITFIELD bReversesX:1;
    BITFIELD bReversesY:1;
    BITFIELD bReversesZ:1;
    BITFIELD bEnabled:1;
    FVector TargetVelocity GCC_PACK(4);
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    FLOAT LastFired;
    DECLARE_CLASS(ATeleporter,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATeleporter)
};


class ENGINE_API APathNode : public ANavigationPoint
{
public:
    DECLARE_CLASS(APathNode,ANavigationPoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APathNode)
};


class ENGINE_API AAIController : public AController
{
public:
    BITFIELD bHunting:1 GCC_PACK(4);
    BITFIELD bAdjustFromWalls:1;
    class AAIScript* MyScript GCC_PACK(4);
    DECLARE_CLASS(AAIController,AController,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAIController)
};

enum eConfigType
{
    CT_StrafeLookSameAxis   =0,
    CT_StrafeLookNotSameAxis=1,
    CT_MAX                  =2,
};

struct APlayerController_eventPlayerCalcView_Parms
{
    class AActor* ViewActor;
    FVector CameraLocation;
    FRotator CameraRotation;
};
struct APlayerController_eventPlayerTick_Parms
{
    FLOAT DeltaTime;
};
struct APlayerController_eventSetProgressTime_Parms
{
    FLOAT t;
};
struct APlayerController_eventSetProgressMessage_Parms
{
    INT Index;
    FString S;
    FColor C;
};
struct APlayerController_eventPreClientTravel_Parms
{
};
struct APlayerController_eventTeamMessage_Parms
{
    class APlayerReplicationInfo* PRI;
    FString S;
    FName Type;
};
struct APlayerController_eventClientMessage_Parms
{
    FString S;
    FName Type;
};
struct APlayerController_eventReceiveLocalizedMessage_Parms
{
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct APlayerController_eventIAmKicked_Parms
{
};
struct APlayerController_eventInitInputSystem_Parms
{
};
struct APlayerController_eventClientTravel_Parms
{
    FString URL;
    BYTE TravelType;
    BITFIELD bItems;
};
class ENGINE_API APlayerController : public AController
{
public:
    class UPlayer* Player;
    BITFIELD bLookUpStairs:1 GCC_PACK(4);
    BITFIELD bSnapToLevel:1;
    BITFIELD bAlwaysMouseLook:1;
    BITFIELD bKeyboardLook:1;
    BITFIELD bCenterView:1;
    BITFIELD bBehindView:1;
    BITFIELD bFrozen:1;
    BITFIELD bPressedJump:1;
    BITFIELD bUpdatePosition:1;
    BITFIELD bIsTyping:1;
    BITFIELD bFixedCamera:1;
    BITFIELD bJumpStatus:1;
    BITFIELD bUpdating:1;
    BITFIELD bNeverSwitchOnPickup:1;
    BITFIELD bZooming:1;
    BITFIELD bOnlySpectator:1;
    BITFIELD bAlwaysLevel:1;
    BITFIELD bSetTurnRot:1;
    BITFIELD bCheatFlying:1;
    BITFIELD bFreeCamera:1;
    BITFIELD bZeroRoll:1;
    BITFIELD bLocked:1;
    BITFIELD bDontUseVolumeFog:1;
    BITFIELD bIsInMenu:1;
    BITFIELD bAutoPickup:1;
    INT iAutoAimMode GCC_PACK(4);
    FLOAT WaitDelay;
    FLOAT aBaseX;
    FLOAT aBaseY;
    FLOAT aBaseZ;
    FLOAT aMouseX;
    FLOAT aMouseY;
    FLOAT aForward;
    FLOAT aTurn;
    FLOAT aStrafe;
    FLOAT aUp;
    FLOAT aLookUp;
    BYTE bStrafe;
    BYTE bSnapLevel;
    BYTE bLook;
    BYTE bFreeLook;
    BYTE bTurn180;
    BYTE bTurnToNearest;
    BYTE bUp;
    BYTE bDown;
    BYTE bLeft;
    BYTE bRight;
    BYTE b90Left;
    BYTE b90Right;
    BYTE b180Turn;
    BYTE bAltDuck;
    BYTE bAltJump;
    BYTE bAltRun;
    BITFIELD bInverseLook:1 GCC_PACK(4);
    BITFIELD bWalkCenterView:1;
    BYTE ConfigType GCC_PACK(4);
    FLOAT fLookSpeed;
    BITFIELD bUseRumble:1 GCC_PACK(4);
    INT UserPadConfig GCC_PACK(4);
    BYTE DoubleClickDir;
    INT ShowFlags;
    INT Misc1;
    INT Misc2;
    INT RendMap;
    FLOAT OrthoZoom;
    class AActor* ViewTarget;
    FLOAT CameraDist;
    FLOAT DesiredFOV;
    FLOAT DefaultFOV;
    FLOAT ZoomLevel;
    FVector FlashScale;
    FVector FlashFog;
    FLOAT DesiredFlashScale;
    FLOAT ConstantGlowScale;
    FLOAT InstantFlash;
    FVector DesiredFlashFog;
    FVector ConstantGlowFog;
    FVector InstantFog;
    FColor FilterColor;
    FColor FilterColorWanted;
    FLOAT FilterColorSpeed;
    INT FilterInternalInc;
    FRotator TargetViewRotation;
    FLOAT TargetEyeHeight;
    FVector TargetWeaponViewOffset;
    class AHUD* myHUD;
    FLOAT LastPlaySound;
    INT AnnouncerVolume;
    class ASavedMove* SavedMoves;
    class ASavedMove* FreeMoves;
    class ASavedMove* PendingMove;
    FLOAT CurrentTimeStamp;
    FLOAT LastUpdateTime;
    FLOAT ServerTimeStamp;
    FLOAT TimeMargin;
    FLOAT ClientUpdateTime;
    FLOAT MaxTimeMargin;
    class AWeapon* OldClientWeapon;
    INT WeaponUpdate;
    FStringNoInit ProgressMessage[4];
    FColor ProgressColor[4];
    FLOAT ProgressTimeOut;
    FStringNoInit QuickSaveString;
    FStringNoInit NoPauseMessage;
    FStringNoInit ViewingFrom;
    FStringNoInit OwnCamera;
    class AGameReplicationInfo* GameReplicationInfo;
    FStringNoInit ngWorldSecret;
    BITFIELD ngSecretSet:1 GCC_PACK(4);
    BITFIELD ReceivedSecretChecksum:1;
    class APlayerStats* PlayerStat GCC_PACK(4);
    class UClass* LocalMessageClass;
    FLOAT Bob;
    FLOAT LandBob;
    FLOAT AppliedBob;
    FLOAT bobtime;
    FVector WalkBob;
    FLOAT MaxShakeRoll;
    FVector MaxShakeOffset;
    FLOAT ShakeRollRate;
    FVector ShakeOffsetRate;
    FVector ShakeOffset;
    FLOAT ShakeRollTime;
    FVector ShakeOffsetTime;
    FVector MaxShakeFrame;
    FVector ShakeFrame;
    FVector ShakeFrameRate;
    FLOAT ShakeFrameTime;
    class APawn* TurnTarget;
    INT EnemyTurnSpeed;
    INT GroundPitch;
    FRotator TurnRot180;
    FVector OldFloor;
    class UCheatManager* CheatManager;
    class UClass* CheatClass;
    class UPlayerInput* PlayerInput;
    class UClass* InputClass;
    INT DemoViewPitch;
    INT DemoViewYaw;
    BYTE UseVignetteFilter;
    BYTE UseVignetteHighlight;
    FColor VignetteColor;
    FLOAT VignetteHighLight;
    class UMaterial* VignetteMaterial;
    FVector OldAdjustAim;
    FVector ViewAdjustAim;
    FLOAT fAdjustAimTrans;
    FVector MemAim;
    FVector AdjustedAimForFiring;
    class AActor* BestTarget;
    class AActor* OldBestTarget;
    FLOAT DeltaT;
    DECLARE_FUNCTION(execViewShake);
    DECLARE_FUNCTION(execCalcFirstPersonView);
    DECLARE_FUNCTION(execAdjustAimForDisplay);
    DECLARE_FUNCTION(execHandleWalking);
    DECLARE_FUNCTION(execCheckBob);
    DECLARE_FUNCTION(execViewFlash);
    DECLARE_FUNCTION(execFindStairRotation);
    DECLARE_FUNCTION(execPasteFromClipboard);
    DECLARE_FUNCTION(execCopyToClipboard);
    DECLARE_FUNCTION(execGetDefaultURL);
    DECLARE_FUNCTION(execUpdateURL);
    DECLARE_FUNCTION(execClientTravel);
    DECLARE_FUNCTION(execSetViewTarget);
    DECLARE_FUNCTION(execResetKeyboard);
    DECLARE_FUNCTION(execGetEntryLevel);
    DECLARE_FUNCTION(execConsoleCommand);
    DECLARE_FUNCTION(execGetPlayerNetworkAddress);
    DECLARE_FUNCTION(execOptimizeInputBindings);
    DECLARE_FUNCTION(execAttribPadToViewport);
    DECLARE_FUNCTION(execGetPadNumber);
    void eventPlayerCalcView(class AActor*& ViewActor, FVector& CameraLocation, FRotator& CameraRotation)
    {
        APlayerController_eventPlayerCalcView_Parms Parms;
        Parms.ViewActor=ViewActor;
        Parms.CameraLocation=CameraLocation;
        Parms.CameraRotation=CameraRotation;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerCalcView),&Parms);
        ViewActor=Parms.ViewActor;
        CameraLocation=Parms.CameraLocation;
        CameraRotation=Parms.CameraRotation;
    }
    void eventPlayerTick(FLOAT DeltaTime)
    {
        APlayerController_eventPlayerTick_Parms Parms;
        if(IsProbing(NAME_PlayerTick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerTick),&Parms);
        }
    }
    void eventSetProgressTime(FLOAT t)
    {
        APlayerController_eventSetProgressTime_Parms Parms;
        Parms.t=t;
        ProcessEvent(FindFunctionChecked(ENGINE_SetProgressTime),&Parms);
    }
    void eventSetProgressMessage(INT Index, const FString& S, FColor C)
    {
        APlayerController_eventSetProgressMessage_Parms Parms;
        Parms.Index=Index;
        Parms.S=S;
        Parms.C=C;
        ProcessEvent(FindFunctionChecked(ENGINE_SetProgressMessage),&Parms);
    }
    void eventPreClientTravel()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PreClientTravel),NULL);
    }
    void eventTeamMessage(class APlayerReplicationInfo* PRI, const FString& S, FName Type)
    {
        APlayerController_eventTeamMessage_Parms Parms;
        Parms.PRI=PRI;
        Parms.S=S;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_TeamMessage),&Parms);
    }
    void eventClientMessage(const FString& S, FName Type)
    {
        APlayerController_eventClientMessage_Parms Parms;
        Parms.S=S;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
    }
    void eventReceiveLocalizedMessage(class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        APlayerController_eventReceiveLocalizedMessage_Parms Parms;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_ReceiveLocalizedMessage),&Parms);
    }
    void eventIAmKicked()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_IAmKicked),NULL);
    }
    void eventInitInputSystem()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_InitInputSystem),NULL);
    }
    void eventClientTravel(const FString& URL, BYTE TravelType, BITFIELD bItems)
    {
        APlayerController_eventClientTravel_Parms Parms;
        Parms.URL=URL;
        Parms.TravelType=TravelType;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientTravel),&Parms);
    }
    DECLARE_CLASS(APlayerController,AController,0|CLASS_Config|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerController)
};


class ENGINE_API ACamera : public APlayerController
{
public:
    DECLARE_CLASS(ACamera,APlayerController,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(ACamera)
};


class ENGINE_API AKeypoint : public AActor
{
public:
    DECLARE_CLASS(AKeypoint,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AKeypoint)
};


class ENGINE_API AAIScript : public AKeypoint
{
public:
    class UClass* ControllerClass;
    FLOAT SkillModifier;
    FName NextScriptTag;
    class AAIScript* NextScript;
    DECLARE_CLASS(AAIScript,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAIScript)
};


class ENGINE_API AInterpolationPoint : public AKeypoint
{
public:
    DECLARE_CLASS(AInterpolationPoint,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInterpolationPoint)
};


class ENGINE_API APolyMarker : public AKeypoint
{
public:
    DECLARE_CLASS(APolyMarker,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APolyMarker)
};


class ENGINE_API AClipMarker : public AKeypoint
{
public:
    DECLARE_CLASS(AClipMarker,AKeypoint,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AClipMarker)
};

enum EGameOver
{
    GO_Never                =0,
    GO_TakeDamageFromPlayer =1,
    GO_KillByPlayer         =2,
    GO_AnyDeath             =3,
    GO_MAX                  =4,
};
enum DamageLocations
{
    LOC_Head                =0,
    LOC_Body                =1,
    LOC_HeadSide            =2,
    LOC_MAX                 =3,
};
#define UCONST_FIRINGBLENDBONE X Spine
#define UCONST_FIRINGCHANNEL 14

struct APawn_eventSetAnimAction_Parms
{
    FName NewAnimAction;
};
struct APawn_eventPlayLandingAnimation_Parms
{
    FLOAT impactVel;
};
struct APawn_eventPlayFalling_Parms
{
};
struct APawn_eventPlayJump_Parms
{
};
struct APawn_eventChangeAnimation_Parms
{
};
struct APawn_eventPlayBaffed_Parms
{
};
struct APawn_eventPlayDying_Parms
{
    class UClass* DamageType;
    FVector HitLoc;
};
struct APawn_eventBreathTimer_Parms
{
};
struct APawn_eventHeadVolumeChange_Parms
{
    class APhysicsVolume* newHeadVolume;
};
struct APawn_eventUpdateEyeHeight_Parms
{
    FLOAT DeltaTime;
};
struct APawn_eventStartCrouch_Parms
{
    FLOAT HeightAdjust;
};
struct APawn_eventEndCrouch_Parms
{
    FLOAT HeightAdjust;
};
struct APawn_eventClientMessage_Parms
{
    FString S;
    FName Type;
};
struct APawn_eventEndClimbLadder_Parms
{
    class ALadderVolume* OldLadder;
};
struct APawn_eventChangeSkin_Parms
{
};
class ENGINE_API APawn : public AActor
{
public:
    class AController* Controller;
    BITFIELD bJustLanded:1 GCC_PACK(4);
    BITFIELD bUpAndOut:1;
    BITFIELD bIsWalking:1;
    BITFIELD bWantsToCrouch:1;
    BITFIELD bIsCrouched:1;
    BITFIELD bTryToUncrouch:1;
    BITFIELD bCanCrouch:1;
    BITFIELD bCrawler:1;
    BITFIELD bReducedSpeed:1;
    BITFIELD bCanJump:1;
    BITFIELD bCanWalk:1;
    BITFIELD bCanSwim:1;
    BITFIELD bCanFly:1;
    BITFIELD bCanClimbLadders:1;
    BITFIELD bCanStrafe:1;
    BITFIELD bAvoidLedges:1;
    BITFIELD bStopAtLedges:1;
    BITFIELD bSimulateGravity:1;
    BITFIELD bUpdateEyeheight:1;
    BITFIELD bNoVelocityUpdate:1;
    BITFIELD bCanWalkOffLedges:1;
    BITFIELD bThumped:1;
    BITFIELD bInvulnerableBody:1;
    BITFIELD bBoss:1;
    BITFIELD bCanBeStunned:1;
    BITFIELD bIsFemale:1;
    BITFIELD bAutoActivate:1;
    BITFIELD bCanPickupInventory:1;
    BITFIELD bUpdatingDisplay:1;
    BITFIELD bAmbientCreature:1;
    BITFIELD bLOSHearing:1;
    BITFIELD bSameZoneHearing:1;
    BITFIELD bAdjacentZoneHearing:1;
    BITFIELD bMuffledHearing:1;
    BITFIELD bAroundCornerHearing:1;
    BITFIELD bDontPossess:1;
    BITFIELD bIsDead:1;
    BITFIELD bSpineControl:1;
    BITFIELD bHeadControl:1;
    BITFIELD bSpineYaw:1;
    BITFIELD bHeadYaw:1;
    BITFIELD bHaveOnlyOneHandFree:1;
    BITFIELD bPrisonner:1;
    BITFIELD bDrawBreathtimer:1;
    BITFIELD bDBAnim:1;
    BITFIELD bDBShowAutoAim:1;
    BITFIELD bDBCartoon:1;
    BITFIELD bEnTrainTirer:1;
    BITFIELD bEnableSpineControl:1;
    BITFIELD bMoving:1;
    BITFIELD bChangingWeapon:1;
    BITFIELD bReloadingWeapon:1;
    BITFIELD bWeaponFiring:1;
    BITFIELD bJumpImpulse:1;
    BITFIELD bAllowJump:1;
    BITFIELD bDestroyWhenDead:1;
    BITFIELD bPaf:1;
    BITFIELD bIsPafable:1;
    BITFIELD bCanBeGrabbed:1;
    BITFIELD bCauseEventOnStun:1;
    BITFIELD bStunnedIfJumpedOn:1;
    INT BaffeCount GCC_PACK(4);
    INT MemBaffeCount;
    FLOAT BaffeTimer;
    INT MaxSpineYaw;
    INT SpineYaw;
    FLOAT SpineYawRotationSpeed;
    INT MaxHeadYaw;
    INT HeadYaw;
    FLOAT HeadYawRotationSpeed;
    FLOAT Angle;
    BYTE FlashCount;
    BYTE AltFlashCount;
    BYTE ReloadClientCount;
    BYTE Visibility;
    FLOAT DesiredSpeed;
    FLOAT MaxDesiredSpeed;
    FLOAT HearingThreshold;
    FLOAT Alertness;
    FLOAT SightRadius;
    FLOAT PeripheralVision;
    FLOAT AvgPhysicsTime;
    class ANavigationPoint* Anchor;
    FLOAT UncrouchTime;
    FLOAT GroundSpeed;
    FLOAT WaterSpeed;
    FLOAT AirSpeed;
    FLOAT LadderSpeed;
    FLOAT AccelRate;
    FLOAT JumpZ;
    FLOAT AirControl;
    FLOAT WalkingPct;
    FLOAT CrouchingPct;
    FLOAT MaxFallSpeed;
    FStringNoInit PawnName;
    class AWeapon* Weapon;
    class AWeapon* PendingWeapon;
    class APowerups* SelectedItem;
    FLOAT BaseEyeHeight;
    FLOAT EyeHeight;
    FVector Floor;
    FLOAT SplashTime;
    FLOAT CrouchHeight;
    FLOAT CrouchRadius;
    FLOAT OldZ;
    class APhysicsVolume* HeadVolume;
    INT Health;
    FLOAT BreathTime;
    FLOAT UnderWaterTime;
    FLOAT LastPainTime;
    FVector noise1spot;
    FLOAT noise1time;
    class APawn* noise1other;
    FLOAT noise1loudness;
    FVector noise2spot;
    FLOAT noise2time;
    class APawn* noise2other;
    FLOAT noise2loudness;
    FLOAT LastPainSound;
    class USound* HitSound[4];
    INT SoundStepCategory;
    FStringNoInit MenuName;
    class AShadowProjector* Shadow;
    class UClass* ControllerClass;
    FLOAT CarcassCollisionHeight;
    class APlayerReplicationInfo* PlayerReplicationInfo;
    class ALadderVolume* OnLadder;
    FName LandMovementState;
    FName WaterMovementState;
    FName AnimStatus;
    FName AnimAction;
    FName WeaponAnim;
    FName WaitWeaponAnim;
    FVector TakeHitLocation;
    class UClass* HitDamageType;
    FVector TearOffMomentum;
    BITFIELD bPhysicsAnimUpdate:1 GCC_PACK(4);
    BITFIELD bWasCrouched:1;
    BITFIELD bWasWalking:1;
    BITFIELD bWasFalling:1;
    BITFIELD bWasOnGround:1;
    BITFIELD bInitializeAnimation:1;
    BITFIELD bPlayedDeath:1;
    BYTE OldPhysics GCC_PACK(4);
    FLOAT OldRotYaw;
    FVector OldAcceleration;
    FName MovementAnims[4];
    FName TurnLeftAnim;
    FName TurnRightAnim;
    FLOAT MovementAnimRate[4];
    FLOAT BlendChangeTime;
    FLOAT MovementBlendStartTime;
    class AActor* ControlledActor;
    BYTE ControllerPitch;
    class UMaterial* LastCollidedMaterial;
    class APowerups* PendingItems;
    BYTE GameOver;
    FName Alliance;
    INT Skill;
    FLOAT SpeedFactorLimit;
    class APowerups* PendingItem;
    FLOAT DrownTimer;
    FLOAT DTimerStep;
    BYTE DTMemorize;
    FName WeaponMode;
    INT CrouchedVisibility;
    class USound* hStunFromAboveSound;
    FVector MyOldAcceleration;
    class USound* hJumpSound;
    class USound* hHitSound;
    class USound* hLadderSound;
    class USound* hCrouchSound;
    class USound* hUnCrouchSound;
    class USound* hBodyFallSound;
    class USound* hSNDNotSound[30];
    class USound* hSwimmingSound;
    class USound* hNotifSwimSound;
    class USound* hBubbleSound;
    BITFIELD bRndAnimM16:1 GCC_PACK(4);
    INT AnimM16 GCC_PACK(4);
    FLOAT HeadShotFactor;
    FName LastBoneHit;
    class ATriggerParticleEmitter* UnderWaterSFX;
    class AEmitter* DrowningSFX;
    class AEmitter* MyDeathOno;
    class AProjector* MyBloodPool;
    FLOAT DeadPawnSightCounter;
    class AArmor* Vest;
    class AArmor* Helm;
    FLOAT DelayBeforeDestroyWhenDead;
    FLOAT DistanceBeforeDestroyWhenDead;
    class APawn* PawnKiller;
    INT SkinID;
    INT OldSkinID;
    class APawn* nextPawn;
    DECLARE_FUNCTION(execEyePosition);
    DECLARE_FUNCTION(execFindInventoryKind);
    DECLARE_FUNCTION(execFindInventoryType);
    DECLARE_FUNCTION(execFaceRotation);
    DECLARE_FUNCTION(execHeadYawControl);
    DECLARE_FUNCTION(execSpineYawControl);
    DECLARE_FUNCTION(execPressingFire);
    DECLARE_FUNCTION(execGetViewRotation);
    DECLARE_FUNCTION(execIsLocallyControlled);
    DECLARE_FUNCTION(execIsHumanControlled);
    DECLARE_FUNCTION(execIsPlayerPawn);
    DECLARE_FUNCTION(execCalcDrawOffset);
    DECLARE_FUNCTION(execSetWalking);
    DECLARE_FUNCTION(execRemovePawnFromList);
    DECLARE_FUNCTION(execAddPawnToList);
    void eventSetAnimAction(FName NewAnimAction)
    {
        APawn_eventSetAnimAction_Parms Parms;
        Parms.NewAnimAction=NewAnimAction;
        ProcessEvent(FindFunctionChecked(ENGINE_SetAnimAction),&Parms);
    }
    void eventPlayLandingAnimation(FLOAT impactVel)
    {
        APawn_eventPlayLandingAnimation_Parms Parms;
        Parms.impactVel=impactVel;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayLandingAnimation),&Parms);
    }
    void eventPlayFalling()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlayFalling),NULL);
    }
    void eventPlayJump()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlayJump),NULL);
    }
    void eventChangeAnimation()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ChangeAnimation),NULL);
    }
    void eventPlayBaffed()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_PlayBaffed),NULL);
    }
    void eventPlayDying(class UClass* DamageType, FVector HitLoc)
    {
        APawn_eventPlayDying_Parms Parms;
        Parms.DamageType=DamageType;
        Parms.HitLoc=HitLoc;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayDying),&Parms);
    }
    void eventBreathTimer()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_BreathTimer),NULL);
    }
    void eventHeadVolumeChange(class APhysicsVolume* newHeadVolume)
    {
        APawn_eventHeadVolumeChange_Parms Parms;
        if(IsProbing(NAME_HeadVolumeChange)) {
        Parms.newHeadVolume=newHeadVolume;
        ProcessEvent(FindFunctionChecked(ENGINE_HeadVolumeChange),&Parms);
        }
    }
    void eventUpdateEyeHeight(FLOAT DeltaTime)
    {
        APawn_eventUpdateEyeHeight_Parms Parms;
        if(IsProbing(NAME_UpdateEyeHeight)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_UpdateEyeHeight),&Parms);
        }
    }
    void eventStartCrouch(FLOAT HeightAdjust)
    {
        APawn_eventStartCrouch_Parms Parms;
        Parms.HeightAdjust=HeightAdjust;
        ProcessEvent(FindFunctionChecked(ENGINE_StartCrouch),&Parms);
    }
    void eventEndCrouch(FLOAT HeightAdjust)
    {
        APawn_eventEndCrouch_Parms Parms;
        Parms.HeightAdjust=HeightAdjust;
        ProcessEvent(FindFunctionChecked(ENGINE_EndCrouch),&Parms);
    }
    void eventClientMessage(const FString& S, FName Type)
    {
        APawn_eventClientMessage_Parms Parms;
        Parms.S=S;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_ClientMessage),&Parms);
    }
    void eventEndClimbLadder(class ALadderVolume* OldLadder)
    {
        APawn_eventEndClimbLadder_Parms Parms;
        Parms.OldLadder=OldLadder;
        ProcessEvent(FindFunctionChecked(ENGINE_EndClimbLadder),&Parms);
    }
    void eventChangeSkin()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ChangeSkin),NULL);
    }
    DECLARE_CLASS(APawn,AActor,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(APawn)
};


class ENGINE_API AVehicle : public APawn
{
public:
    class UClass* PartClass[16];
    class AVehiclePart* VehicleParts[16];
    FVector PartOffset[16];
    INT NumParts;
    BITFIELD bActivated:1 GCC_PACK(4);
    BITFIELD bUpdating:1;
    DECLARE_CLASS(AVehicle,APawn,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AVehicle)
};


class ENGINE_API AScout : public APawn
{
public:
    FLOAT MaxLandingVelocity;
    DECLARE_CLASS(AScout,APawn,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AScout)
};


class ENGINE_API ATriggers : public AActor
{
public:
    DECLARE_CLASS(ATriggers,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATriggers)
};


struct ALineOfSightTrigger_eventPlayerSeesMe_Parms
{
    class APlayerController* P;
};
class ENGINE_API ALineOfSightTrigger : public ATriggers
{
public:
    FLOAT MaxViewDist;
    FLOAT OldTickTime;
    BITFIELD bEnabled:1 GCC_PACK(4);
    BITFIELD bTriggered:1;
    FName SeenActorTag GCC_PACK(4);
    class AActor* SeenActor;
    INT MaxViewAngle;
    FLOAT RequiredViewDir;
    void eventPlayerSeesMe(class APlayerController* P)
    {
        ALineOfSightTrigger_eventPlayerSeesMe_Parms Parms;
        Parms.P=P;
        ProcessEvent(FindFunctionChecked(ENGINE_PlayerSeesMe),&Parms);
    }
    DECLARE_CLASS(ALineOfSightTrigger,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALineOfSightTrigger)
};

enum ETriggerType
{
    TT_PlayerProximity      =0,
    TT_PawnProximity        =1,
    TT_ClassProximity       =2,
    TT_AnyProximity         =3,
    TT_Shoot                =4,
    TT_MAX                  =5,
};

class ENGINE_API ATrigger : public ATriggers
{
public:
    BYTE TriggerType;
    FStringNoInit Message;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bInitiallyActive:1;
    class UClass* ClassProximityType GCC_PACK(4);
    FLOAT RepeatTriggerTime;
    FLOAT ReTriggerDelay;
    FLOAT TriggerTime;
    FLOAT DamageThreshold;
    class AActor* TriggerActor;
    class AActor* TriggerActor2;
    BITFIELD bSavedInitialCollision:1 GCC_PACK(4);
    BITFIELD bSavedInitialActive:1;
    DECLARE_CLASS(ATrigger,ATriggers,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATrigger)
};


class ENGINE_API AInfo : public AActor
{
public:
    DECLARE_CLASS(AInfo,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInfo)
};


class ENGINE_API APlayerStats : public AInfo
{
public:
    INT StatKills;
    INT StatDeaths;
    INT StatSuicides;
    INT StatMinutes;
    INT StatFlagsS;
    INT StatFlagsR;
    INT StatMatchesPlayed;
    FLOAT EnterTimeSeconds;
    FLOAT LeaveTimeSeconds;
    DECLARE_CLASS(APlayerStats,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerStats)
};


class ENGINE_API AMapList : public AInfo
{
public:
    TArrayNoInit<FStructMapInfo> MapListInfo;
    DECLARE_CLASS(AMapList,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMapList)
};


class ENGINE_API AReplicationInfo : public AInfo
{
public:
    DECLARE_CLASS(AReplicationInfo,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AReplicationInfo)
};


class ENGINE_API ATeamInfo : public AReplicationInfo
{
public:
    FStringNoInit TeamName;
    INT Size;
    FLOAT Score;
    INT TeamIndex;
    FColor TeamColor;
    FColor AltTeamColor;
    class UTexture* TeamIcon;
    class AActor* Flag;
    FStringNoInit DefaultPlayerClassName;
    DECLARE_CLASS(ATeamInfo,AReplicationInfo,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(ATeamInfo)
};


class ENGINE_API AGameReplicationInfo : public AReplicationInfo
{
public:
    FStringNoInit GameName;
    FStringNoInit GameClass;
    BITFIELD bTeamGame:1 GCC_PACK(4);
    BITFIELD bStopCountDown:1;
    INT RemainingTime GCC_PACK(4);
    INT ElapsedTime;
    INT RemainingMinute;
    FLOAT SecondCount;
    INT GoalScore;
    INT TimeLimit;
    class ATeamInfo* Teams[2];
    FStringNoInit ServerName;
    FStringNoInit ShortName;
    FStringNoInit AdminName;
    FStringNoInit AdminEmail;
    INT Region;
    FStringNoInit MOTDLine1;
    FStringNoInit MOTDLine2;
    FStringNoInit MOTDLine3;
    FStringNoInit MOTDLine4;
    class AActor* Winner;
    DECLARE_CLASS(AGameReplicationInfo,AReplicationInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AGameReplicationInfo)
};


struct APlayerReplicationInfo_eventSkinUpdated_Parms
{
};
struct APlayerReplicationInfo_eventScoreUpdated_Parms
{
};
class ENGINE_API APlayerReplicationInfo : public AReplicationInfo
{
public:
    FLOAT Score;
    FLOAT OldScore;
    FLOAT Deaths;
    class ADecoration* HasFlag;
    INT Ping;
    class AVolume* PlayerLocation;
    INT NumLives;
    FStringNoInit PlayerName;
    FStringNoInit OldName;
    FStringNoInit PreviousName;
    FStringNoInit OldSkinCodeName;
    FStringNoInit SkinCodeName;
    INT PlayerID;
    class ATeamInfo* Team;
    INT TeamID;
    class UClass* VoiceType;
    BITFIELD bIsFemale:1 GCC_PACK(4);
    BITFIELD bFeigningDeath:1;
    BITFIELD bIsSpectator:1;
    BITFIELD bWaitingPlayer:1;
    BITFIELD bReadyToPlay:1;
    BITFIELD bOutOfLives:1;
    BITFIELD bBot:1;
    class UTexture* TalkTexture GCC_PACK(4);
    INT StartTime;
    INT TimeAcc;
    void eventSkinUpdated()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_SkinUpdated),NULL);
    }
    void eventScoreUpdated()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ScoreUpdated),NULL);
    }
    DECLARE_CLASS(APlayerReplicationInfo,AReplicationInfo,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(APlayerReplicationInfo)
};


class ENGINE_API APotentialClimbWatcher : public AInfo
{
public:
    DECLARE_CLASS(APotentialClimbWatcher,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(APotentialClimbWatcher)
};


struct AStatLog_eventLogGameSpecial2_Parms
{
    FString SpecialID;
    FString SpecialParam;
    FString SpecialParam2;
};
struct AStatLog_eventLogGameSpecial_Parms
{
    FString SpecialID;
    FString SpecialParam;
};
struct AStatLog_eventGetLocalLogFileName_Parms
{
    FString ReturnValue;
};
class ENGINE_API AStatLog : public AInfo
{
public:
    INT Context;
    BITFIELD bWorld:1 GCC_PACK(4);
    FLOAT TimeStamp GCC_PACK(4);
    FStringNoInit LocalStandard;
    FStringNoInit WorldStandard;
    FStringNoInit LogVersion;
    FStringNoInit LogInfoURL;
    FStringNoInit GameName;
    FStringNoInit GameCreator;
    FStringNoInit GameCreatorURL;
    FStringNoInit DecoderRingURL;
    FStringNoInit LocalBatcherURL;
    FStringNoInit LocalBatcherParams;
    FStringNoInit LocalStatsURL;
    FStringNoInit WorldBatcherURL;
    FStringNoInit WorldBatcherParams;
    FStringNoInit WorldStatsURL;
    FStringNoInit LocalLogDir;
    FStringNoInit WorldLogDir;
    BITFIELD bWorldBatcherError:1 GCC_PACK(4);
    BITFIELD bBatchLocal:1;
    class AStatLog* LocalLog GCC_PACK(4);
    DECLARE_FUNCTION(execGetMapFileName);
    DECLARE_FUNCTION(execGetGMTRef);
    DECLARE_FUNCTION(execGetPlayerChecksum);
    DECLARE_FUNCTION(execLogMutator);
    DECLARE_FUNCTION(execInitialCheck);
    DECLARE_FUNCTION(execBrowseRelativeLocalURL);
    DECLARE_FUNCTION(execExecuteWorldLogBatcher);
    DECLARE_FUNCTION(execBatchLocal);
    DECLARE_FUNCTION(execExecuteSilentLogBatcher);
    DECLARE_FUNCTION(execExecuteLocalLogBatcher);
    void eventLogGameSpecial2(const FString& SpecialID, const FString& SpecialParam, const FString& SpecialParam2)
    {
        AStatLog_eventLogGameSpecial2_Parms Parms;
        Parms.SpecialID=SpecialID;
        Parms.SpecialParam=SpecialParam;
        Parms.SpecialParam2=SpecialParam2;
        ProcessEvent(FindFunctionChecked(ENGINE_LogGameSpecial2),&Parms);
    }
    void eventLogGameSpecial(const FString& SpecialID, const FString& SpecialParam)
    {
        AStatLog_eventLogGameSpecial_Parms Parms;
        Parms.SpecialID=SpecialID;
        Parms.SpecialParam=SpecialParam;
        ProcessEvent(FindFunctionChecked(ENGINE_LogGameSpecial),&Parms);
    }
    FString eventGetLocalLogFileName()
    {
        AStatLog_eventGetLocalLogFileName_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetLocalLogFileName),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(AStatLog,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStatLog)
};


class ENGINE_API AStatLogFile : public AStatLog
{
public:
    BITFIELD bWatermark:1 GCC_PACK(4);
    INT LogAr GCC_PACK(4);
    FStringNoInit StatLogFile;
    FStringNoInit StatLogFinal;
    DECLARE_FUNCTION(execFileLog);
    DECLARE_FUNCTION(execFileFlush);
    DECLARE_FUNCTION(execGetChecksum);
    DECLARE_FUNCTION(execWatermark);
    DECLARE_FUNCTION(execCloseLog);
    DECLARE_FUNCTION(execOpenLog);
    DECLARE_CLASS(AStatLogFile,AStatLog,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStatLogFile)
};


class ENGINE_API AInternetInfo : public AInfo
{
public:
    DECLARE_CLASS(AInternetInfo,AInfo,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInternetInfo)
};


class ENGINE_API ASavedMove : public AInfo
{
public:
    class ASavedMove* NextMove;
    FLOAT TimeStamp;
    FLOAT Delta;
    BITFIELD bRun:1 GCC_PACK(4);
    BITFIELD bDuck:1;
    BITFIELD bPressedJump:1;
    BYTE DoubleClickMove GCC_PACK(4);
    DECLARE_CLASS(ASavedMove,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASavedMove)
};


struct AZoneInfo_eventActorLeaving_Parms
{
    class AActor* Other;
};
struct AZoneInfo_eventActorEntered_Parms
{
    class AActor* Other;
};
class ENGINE_API AZoneInfo : public AInfo
{
public:
    class ASkyZoneInfo* SkyZone;
    FName ZoneTag;
    class ASkyZoneInfo* SkyZoneUser;
    BITFIELD bFogZone:1 GCC_PACK(4);
    BITFIELD bTerrainZone:1;
    BITFIELD bDistanceFog:1;
    BITFIELD bFogPerZone:1;
    BITFIELD bForceClear:1;
    TArrayNoInit<class ATerrainInfo*> Terrains GCC_PACK(4);
    BYTE AmbientBrightness;
    BYTE AmbientHue;
    BYTE AmbientSaturation;
    FColor DistanceFogColor;
    FLOAT DistanceFogStart;
    FLOAT DistanceFogEnd;
    class UTexture* EnvironmentMap;
    FLOAT TexUPanSpeed;
    FLOAT TexVPanSpeed;
    BYTE LightCurveShadow;
    BYTE LightCurveBright;
    BYTE AmbientIntensity;
    FFlashEffectStruct FlashEffectDesc;
    BITFIELD bReverbZone:1 GCC_PACK(4);
    BITFIELD bRaytraceReverb:1;
    FLOAT SpeedOfSound GCC_PACK(4);
    BYTE MasterGain;
    INT CutoffHz;
    BYTE Delay[6];
    BYTE Gain[6];
    class UTexture* LensFlare[12];
    FLOAT LensFlareOffset[12];
    FLOAT LensFlareScale[12];
    BYTE MinLightCount;
    BYTE MaxLightCount;
    INT MinLightingPolyCount;
    INT MaxLightingPolyCount;
    DECLARE_FUNCTION(execZoneActors);
    void eventActorLeaving(class AActor* Other)
    {
        AZoneInfo_eventActorLeaving_Parms Parms;
        if(IsProbing(NAME_ActorLeaving)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeaving),&Parms);
        }
    }
    void eventActorEntered(class AActor* Other)
    {
        AZoneInfo_eventActorEntered_Parms Parms;
        if(IsProbing(NAME_ActorEntered)) {
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEntered),&Parms);
        }
    }
    DECLARE_CLASS(AZoneInfo,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AZoneInfo)
};


struct AWarpZoneInfo_eventForceGenerate_Parms
{
};
struct AWarpZoneInfo_eventGenerate_Parms
{
};
class ENGINE_API AWarpZoneInfo : public AZoneInfo
{
public:
    FStringNoInit OtherSideURL;
    FName ThisTag;
    BITFIELD bNoTeleFrag:1 GCC_PACK(4);
    INT iWarpZone GCC_PACK(4);
    FCoords WarpCoords;
    class AWarpZoneInfo* OtherSideActor;
    class UObject* OtherSideLevel;
    FStringNoInit Destinations[8];
    INT numDestinations;
    DECLARE_FUNCTION(execUnWarp);
    DECLARE_FUNCTION(execWarp);
    void eventForceGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ForceGenerate),NULL);
    }
    void eventGenerate()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Generate),NULL);
    }
    DECLARE_CLASS(AWarpZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWarpZoneInfo)
};


class ENGINE_API ASkyZoneInfo : public AZoneInfo
{
public:
    DECLARE_CLASS(ASkyZoneInfo,AZoneInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ASkyZoneInfo)
};

enum ENetMode
{
    NM_Standalone           =0,
    NM_DedicatedServer      =1,
    NM_ListenServer         =2,
    NM_Client               =3,
    NM_MAX                  =4,
};
enum ELevelAction
{
    LEVACT_None             =0,
    LEVACT_Loading          =1,
    LEVACT_Saving           =2,
    LEVACT_Connecting       =3,
    LEVACT_Precaching       =4,
    LEVACT_MAX              =5,
};

struct ALevelInfo_eventServerTravel_Parms
{
    FString URL;
    BITFIELD bItems;
};
class ENGINE_API ALevelInfo : public AZoneInfo
{
public:
    FLOAT TimeDilation;
    FLOAT TimeSeconds;
    INT Year;
    INT Month;
    INT Day;
    INT DayOfWeek;
    INT Hour;
    INT Minute;
    INT Second;
    INT Millisecond;
    FStringNoInit Title;
    FStringNoInit Author;
    INT IdealPlayerCount;
    FStringNoInit LevelEnterText;
    FStringNoInit LocalizedPkg;
    class APlayerReplicationInfo* Pauser;
    class ULevelSummary* Summary;
    FStringNoInit VisibleGroups;
    BITFIELD bLonePlayer:1 GCC_PACK(4);
    BITFIELD bBegunPlay:1;
    BITFIELD bPlayersOnly:1;
    BITFIELD bHighDetailMode:1;
    BITFIELD bDropDetail:1;
    BITFIELD bAggressiveLOD:1;
    BITFIELD bStartup:1;
    BITFIELD bPathsRebuilt:1;
    BITFIELD bNoEnemyAlliance:1;
    BITFIELD bCineFrame:1;
    BITFIELD bAllowCheat:1;
    INT ShadowMode GCC_PACK(4);
    FVector CameraLocationDynamic;
    FVector CameraLocationTop;
    FVector CameraLocationFront;
    FVector CameraLocationSide;
    FRotator CameraRotationDynamic;
    class USound* InitMusic;
    INT InitMusicParameters[5];
    TArrayNoInit<FMusicVar> MusicVars;
    BITFIELD bReplaceHXScripts:1 GCC_PACK(4);
    INT iLoadEngineValue GCC_PACK(4);
    FLOAT Brightness;
    class UTexture* Screenshot;
    class UTexture* DefaultTexture;
    class UTexture* WhiteSquareTexture;
    class UTexture* LargeVertex;
    INT HubStackLevel;
    BYTE LevelAction;
    BITFIELD bNeverPrecache:1 GCC_PACK(4);
    BYTE NetMode GCC_PACK(4);
    FStringNoInit ComputerName;
    FStringNoInit EngineVersion;
    FStringNoInit MinNetVersion;
    FStringNoInit DefaultGameType;
    class AGameInfo* Game;
    class AActor* FlashManager;
    class ANavigationPoint* NavigationPointList;
    class AController* ControllerList;
    class APawn* PawnList;
    FStringNoInit NextURL;
    BITFIELD bNextItems:1 GCC_PACK(4);
    FLOAT NextSwitchCountdown GCC_PACK(4);
    INT InitialCartoonEffect;
    INT BotLevel[8];
    INT BotTeam[8];
    INT BotNumber;
    FStringNoInit configMenu;
    FLOAT AdjustDifficulty;
    TArrayNoInit<class UTexture*> ForcedTextures;
    TArrayNoInit<class UMesh*> ForcedMeshes;
    TArrayNoInit<class UStaticMesh*> ForcedStaticMeshes;
    TArrayNoInit<class UClass*> ForcedClasses;
    TArrayNoInit<FString> MPClassNames;
    TArrayNoInit<FString> MPMeshNames;
    TArrayNoInit<FString> MPSMeshNames;
    TArrayNoInit<FString> MPTexNames;
    DECLARE_FUNCTION(execGetPlateForme);
    DECLARE_FUNCTION(execDecalScreen);
    DECLARE_FUNCTION(execGetAvailableRes);
    DECLARE_FUNCTION(execSetOnlyPostRender);
    DECLARE_FUNCTION(execSetViewport);
    DECLARE_FUNCTION(execSetInjuredEffect);
    DECLARE_FUNCTION(execSetSharpEffect);
    DECLARE_FUNCTION(execSetBlurEffect);
    DECLARE_FUNCTION(execSetPoisonEffect);
    DECLARE_FUNCTION(execSetRndCubeSprSize);
    DECLARE_FUNCTION(execAddRndCubeSprExclude);
    DECLARE_FUNCTION(execChangeRndCubeSprProp);
    DECLARE_FUNCTION(execSetRndCubeSprSpeed);
    DECLARE_FUNCTION(execSetRndCubeSprState);
    DECLARE_FUNCTION(execInitRndCubeSpr);
    DECLARE_FUNCTION(execGetAddressURL);
    DECLARE_FUNCTION(execGetLocalURL);
    DECLARE_FUNCTION(execDecAttaque);
    DECLARE_FUNCTION(execIncAttaque);
    DECLARE_FUNCTION(execDecAlerte);
    DECLARE_FUNCTION(execIncAlerte);
    DECLARE_FUNCTION(execDecAttente);
    DECLARE_FUNCTION(execIncAttente);
    void eventServerTravel(const FString& URL, BITFIELD bItems)
    {
        ALevelInfo_eventServerTravel_Parms Parms;
        Parms.URL=URL;
        Parms.bItems=bItems;
        ProcessEvent(FindFunctionChecked(ENGINE_ServerTravel),&Parms);
    }
    DECLARE_CLASS(ALevelInfo,AZoneInfo,0|CLASS_Config|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALevelInfo)
};


struct AGameInfo_eventBroadcastLocalized_Parms
{
    class AActor* Sender;
    class UClass* Message;
    INT Switch;
    class APlayerReplicationInfo* RelatedPRI_1;
    class APlayerReplicationInfo* RelatedPRI_2;
    class UObject* OptionalObject;
};
struct AGameInfo_eventBroadcast_Parms
{
    class AActor* Sender;
    FString msg;
    FName Type;
};
struct AGameInfo_eventAcceptInventory_Parms
{
    class APawn* PlayerPawn;
};
struct AGameInfo_eventPostLogin_Parms
{
    class APlayerController* NewPlayer;
};
struct AGameInfo_eventLogin_Parms
{
    FString Portal;
    FString Options;
    FString Error;
    class APlayerController* ReturnValue;
};
struct AGameInfo_eventPreLogin_Parms
{
    FString Options;
    FString Address;
    FString Error;
    FString FailCode;
};
struct AGameInfo_eventGetBeaconText_Parms
{
    FString ReturnValue;
};
struct AGameInfo_eventInitGame_Parms
{
    FString Options;
    FString Error;
};
struct AGameInfo_eventDetailChange_Parms
{
};
struct AGameInfo_eventGameEnding_Parms
{
};
class ENGINE_API AGameInfo : public AInfo
{
public:
    BYTE Difficulty;
    BYTE DetailLevel;
    BITFIELD bRestartLevel:1 GCC_PACK(4);
    BITFIELD bPauseable:1;
    BITFIELD bCoopWeaponMode:1;
    BITFIELD bTeamGame:1;
    BITFIELD bGameEnded:1;
    BITFIELD bOverTime:1;
    BITFIELD bAlternateMode:1;
    BITFIELD bCanViewOthers:1;
    BITFIELD bDelayedStart:1;
    BITFIELD bWaitingToStartMatch:1;
    BITFIELD bLocalLog:1;
    BITFIELD bWorldLog:1;
    BITFIELD bLoggingGame:1;
    BITFIELD bInventorySetUp:1;
    INT GoreLevel GCC_PACK(4);
    FLOAT GameSpeed;
    FStringNoInit DefaultPlayerClassName;
    FStringNoInit ScoreBoardType;
    FStringNoInit HUDType;
    FStringNoInit MapPrefix;
    FStringNoInit BeaconName;
    INT MaxSpectators;
    INT NumSpectators;
    INT MaxPlayers;
    INT NumPlayers;
    INT NumBots;
    INT CurrentID;
    FStringNoInit DefaultPlayerName;
    FStringNoInit GameName;
    class UClass* DeathMessageClass;
    class UClass* GameMessageClass;
    FStringNoInit MutatorClass;
    class AMutator* BaseMutator;
    FStringNoInit AccessControlClass;
    class AAccessControl* AccessControl;
    class AGameRules* GameRulesModifiers;
    FStringNoInit BroadcastHandlerClass;
    class ABroadcastHandler* BroadcastHandler;
    class UClass* PlayerControllerClass;
    FStringNoInit PlayerControllerClassName;
    class UClass* GameReplicationInfoClass;
    class AGameReplicationInfo* GameReplicationInfo;
    FLOAT DummyStuff1;
    INT DummyStuff2;
    class AStatLog* StatLog;
    class UClass* StatLogClass;
    class AKeypoint* GenAlerte;
    TArrayNoInit<class APawn*> BaseSoldierList;
    TArrayNoInit<class ATriggers*> AlarmList;
    TArrayNoInit<class AKeypoint*> GrenadeTargetList;
    TArrayNoInit<class ANavigationPoint*> SafePointList;
    TArrayNoInit<class ANavigationPoint*> AttackPointList;
    TArrayNoInit<class ANavigationPoint*> PatrolPointList;
    INT StatPlayerStart[8];
    DECLARE_FUNCTION(execParseKillMessage);
    DECLARE_FUNCTION(execGetNetworkNumber);
    void eventBroadcastLocalized(class AActor* Sender, class UClass* Message, INT Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
    {
        AGameInfo_eventBroadcastLocalized_Parms Parms;
        Parms.Sender=Sender;
        Parms.Message=Message;
        Parms.Switch=Switch;
        Parms.RelatedPRI_1=RelatedPRI_1;
        Parms.RelatedPRI_2=RelatedPRI_2;
        Parms.OptionalObject=OptionalObject;
        ProcessEvent(FindFunctionChecked(ENGINE_BroadcastLocalized),&Parms);
    }
    void eventBroadcast(class AActor* Sender, const FString& msg, FName Type)
    {
        AGameInfo_eventBroadcast_Parms Parms;
        Parms.Sender=Sender;
        Parms.msg=msg;
        Parms.Type=Type;
        ProcessEvent(FindFunctionChecked(ENGINE_Broadcast),&Parms);
    }
    void eventAcceptInventory(class APawn* PlayerPawn)
    {
        AGameInfo_eventAcceptInventory_Parms Parms;
        Parms.PlayerPawn=PlayerPawn;
        ProcessEvent(FindFunctionChecked(ENGINE_AcceptInventory),&Parms);
    }
    void eventPostLogin(class APlayerController* NewPlayer)
    {
        AGameInfo_eventPostLogin_Parms Parms;
        Parms.NewPlayer=NewPlayer;
        ProcessEvent(FindFunctionChecked(ENGINE_PostLogin),&Parms);
    }
    class APlayerController* eventLogin(const FString& Portal, const FString& Options, FString& Error)
    {
        AGameInfo_eventLogin_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Portal=Portal;
        Parms.Options=Options;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_Login),&Parms);
        Error=Parms.Error;
        return Parms.ReturnValue;
    }
    void eventPreLogin(const FString& Options, const FString& Address, FString& Error, FString& FailCode)
    {
        AGameInfo_eventPreLogin_Parms Parms;
        Parms.Options=Options;
        Parms.Address=Address;
        Parms.Error=Error;
        Parms.FailCode=FailCode;
        ProcessEvent(FindFunctionChecked(ENGINE_PreLogin),&Parms);
        Error=Parms.Error;
        FailCode=Parms.FailCode;
    }
    FString eventGetBeaconText()
    {
        AGameInfo_eventGetBeaconText_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetBeaconText),&Parms);
        return Parms.ReturnValue;
    }
    void eventInitGame(const FString& Options, FString& Error)
    {
        AGameInfo_eventInitGame_Parms Parms;
        Parms.Options=Options;
        Parms.Error=Error;
        ProcessEvent(FindFunctionChecked(ENGINE_InitGame),&Parms);
        Error=Parms.Error;
    }
    void eventDetailChange()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_DetailChange),NULL);
    }
    void eventGameEnding()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_GameEnding),NULL);
    }
    DECLARE_CLASS(AGameInfo,AInfo,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AGameInfo)
};


class ENGINE_API AMutator : public AInfo
{
public:
    class AMutator* NextMutator;
    class UClass* DefaultWeapon;
    FStringNoInit DefaultWeaponName;
    DECLARE_CLASS(AMutator,AInfo,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMutator)
};


class ENGINE_API AProjector : public AActor
{
public:
    FMatrix GradientMatrix;
    FMatrix Matrix;
    FVector OldLocation;
    class UMaterial* ProjTexture;
    INT FOV;
    INT MaxTraceDistance;
    BITFIELD bProjectBSP:1 GCC_PACK(4);
    BITFIELD bProjectTerrain:1;
    BITFIELD bProjectStaticMesh:1;
    BITFIELD bProjectActor:1;
    BITFIELD bLevelStatic:1;
    BITFIELD bClipBSP:1;
    BITFIELD bProjectOnUnlit:1;
    BITFIELD bFade:1;
    BITFIELD bProjectOnAlpha:1;
    BITFIELD bProjectOnParallelBSP:1;
    FName ProjectTag GCC_PACK(4);
    FLOAT VScale;
    BYTE AttachPriority;
    FPlane FrustumPlanes[6];
    FVector FrustumVertices[8];
    FBox Box;
    FProjectorRenderInfoPtr RenderInfo;
    DECLARE_FUNCTION(execAbandonProjector);
    DECLARE_FUNCTION(execDetachProjector);
    DECLARE_FUNCTION(execAttachProjector);
    DECLARE_CLASS(AProjector,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AProjector)
};


class ENGINE_API AShadowProjector : public AProjector
{
public:
    FVector LightDirection;
    class UShadowBitmapMaterial* ShadowTexture;
    class UFinalBlend* ShadowMaterial;
    INT ShadowIntensity;
    INT UpdateCount;
    FLOAT ShadowScale;
    FLOAT ShadowMaxDist;
    FLOAT ShadowTransDist;
    BITFIELD bShadowIsStatic:1 GCC_PACK(4);
    DECLARE_CLASS(AShadowProjector,AProjector,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AShadowProjector)
};


class ENGINE_API AStaticMeshActor : public AActor
{
public:
    DECLARE_CLASS(AStaticMeshActor,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AStaticMeshActor)
};


class ENGINE_API AEmitter : public AActor
{
public:
    TArrayNoInit<class UParticleEmitter*> Emitters;
    BITFIELD AutoDestroy:1 GCC_PACK(4);
    BITFIELD AutoReset:1;
    BITFIELD DisableFogging:1;
    FRangeVector GlobalOffsetRange GCC_PACK(4);
    FRange TimeTillResetRange;
    FLOAT EmitterRadius;
    FLOAT EmitterHeight;
    BITFIELD ActorForcesEnabled:1 GCC_PACK(4);
    FVector GlobalOffset GCC_PACK(4);
    FLOAT TimeTillReset;
    DECLARE_CLASS(AEmitter,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AEmitter)
};

enum EBumpType
{
    BT_PlayerBump           =0,
    BT_PawnBump             =1,
    BT_AnyBump              =2,
    BT_MAX                  =3,
};
enum EMoverGlideType
{
    MV_MoveByTime           =0,
    MV_GlideByTime          =1,
    MV_MAX                  =2,
};
enum EMoverEncroachType
{
    ME_StopWhenEncroach     =0,
    ME_ReturnWhenEncroach   =1,
    ME_CrushWhenEncroach    =2,
    ME_IgnoreWhenEncroach   =3,
    ME_MAX                  =4,
};

struct AMover_eventKeyFrameReached_Parms
{
};
class ENGINE_API AMover : public AActor
{
public:
    BYTE MoverEncroachType;
    BYTE MoverGlideType;
    BYTE BumpType;
    BYTE KeyNum;
    BYTE PrevKeyNum;
    BYTE NumKeys;
    BYTE WorldRaytraceKey;
    BYTE BrushRaytraceKey;
    FLOAT MoveTime;
    FLOAT StayOpenTime;
    FLOAT OtherTime;
    INT EncroachDamage;
    BITFIELD bTriggerOnceOnly:1 GCC_PACK(4);
    BITFIELD bSlave:1;
    BITFIELD bUseTriggered:1;
    BITFIELD bDamageTriggered:1;
    BITFIELD bDynamicLightMover:1;
    BITFIELD bBreakable:1;
    FName PlayerBumpEvent GCC_PACK(4);
    FName BumpEvent;
    class AActor* SavedTrigger;
    FLOAT DamageThreshold;
    INT numTriggerEvents;
    class AMover* Leader;
    class AMover* Follower;
    FName ReturnGroup;
    FLOAT DelayTime;
    class USound* OpeningSound;
    class USound* OpeningMusic;
    class USound* OpenedSound;
    class USound* OpenedMusic;
    class USound* ClosingSound;
    class USound* ClosingMusic;
    class USound* ClosedSound;
    class USound* ClosedMusic;
    class USound* MoveAmbientSound;
    FVector SoundLocationOffset;
    BITFIELD bMusicOnlyOnce:1 GCC_PACK(4);
    BITFIELD bAlreadyOpening:1;
    BITFIELD bAlreadyOpened:1;
    BITFIELD bAlreadyClosing:1;
    BITFIELD bAlreadyClosed:1;
    FVector KeyPos[8] GCC_PACK(4);
    FRotator KeyRot[8];
    FVector BasePos;
    FVector OldPos;
    FVector OldPrePivot;
    FVector SavedPos;
    FRotator BaseRot;
    FRotator OldRot;
    FRotator SavedRot;
    FLOAT PhysAlpha;
    FLOAT PhysRate;
    class ANavigationPoint* myMarker;
    BITFIELD bOpening:1 GCC_PACK(4);
    BITFIELD bDelaying:1;
    BITFIELD bClientPause:1;
    BITFIELD bClosed:1;
    BITFIELD bPlayerOnly:1;
    FVector SimOldPos GCC_PACK(4);
    INT SimOldRotPitch;
    INT SimOldRotYaw;
    INT SimOldRotRoll;
    FVector SimInterpolate;
    FVector RealPosition;
    FRotator RealRotation;
    INT ClientUpdate;
    void eventKeyFrameReached()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_KeyFrameReached),NULL);
    }
    DECLARE_CLASS(AMover,AActor,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AMover)
};


class ENGINE_API AInventoryAttachment : public AActor
{
public:
    FStringNoInit StaticMeshName;
    DECLARE_CLASS(AInventoryAttachment,AActor,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInventoryAttachment)
};


struct AWeaponAttachment_eventThirdPersonReLoad_Parms
{
};
struct AWeaponAttachment_eventThirdPersonAltEffects_Parms
{
};
struct AWeaponAttachment_eventThirdPersonEffects_Parms
{
};
class ENGINE_API AWeaponAttachment : public AInventoryAttachment
{
public:
    BITFIELD DBOnline:1 GCC_PACK(4);
    BYTE FlashCount GCC_PACK(4);
    BYTE AltFlashCount;
    BYTE ReloadClientCount;
    FName FiringMode;
    FName AltFiringMode;
    FLOAT FiringSpeed;
    INT iBTrailDist;
    class USound* hFireSound;
    class USound* hAltFireSound;
    class USound* hReloadSound;
    void eventThirdPersonReLoad()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ThirdPersonReLoad),NULL);
    }
    void eventThirdPersonAltEffects()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ThirdPersonAltEffects),NULL);
    }
    void eventThirdPersonEffects()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ThirdPersonEffects),NULL);
    }
    DECLARE_CLASS(AWeaponAttachment,AInventoryAttachment,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWeaponAttachment)
};

enum ECsgOper
{
    CSG_Active              =0,
    CSG_Add                 =1,
    CSG_Subtract            =2,
    CSG_Intersect           =3,
    CSG_Deintersect         =4,
    CSG_MAX                 =5,
};

class ENGINE_API ABrush : public AActor
{
public:
    BYTE CsgOper;
    class UObject* UnusedLightMesh;
    FVector PostPivot;
    FScale MainScale;
    FScale PostScale;
    FScale TempScale;
    FColor BrushColor;
    INT PolyFlags;
    BITFIELD bColored:1 GCC_PACK(4);
    class AMover* LinkedMover GCC_PACK(4);
    class AMover* LinkedMover2;
    DECLARE_CLASS(ABrush,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ABrush)
};


class ENGINE_API AVolume : public ABrush
{
public:
    class AActor* AssociatedActor;
    FName AssociatedActorTag;
    INT LocationPriority;
    FStringNoInit LocationName;
    DECLARE_FUNCTION(execEncompasses);
    DECLARE_CLASS(AVolume,ABrush,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AVolume)
};


struct APhysicsVolume_eventPhysicsChangedFor_Parms
{
    class AActor* Other;
};
struct APhysicsVolume_eventPawnLeavingVolume_Parms
{
    class APawn* Other;
};
struct APhysicsVolume_eventPawnEnteredVolume_Parms
{
    class APawn* Other;
};
struct APhysicsVolume_eventActorLeavingVolume_Parms
{
    class AActor* Other;
};
struct APhysicsVolume_eventActorEnteredVolume_Parms
{
    class AActor* Other;
};
class ENGINE_API APhysicsVolume : public AVolume
{
public:
    BITFIELD bPainCausing:1 GCC_PACK(4);
    FVector ZoneVelocity GCC_PACK(4);
    FVector Gravity;
    FLOAT GroundFriction;
    FLOAT TerminalVelocity;
    FLOAT DamagePerSec;
    class UClass* DamageType;
    INT Priority;
    class USound* EntrySound;
    class USound* ExitSound;
    class UClass* EntryActor;
    class UClass* EntryNonPawnActor;
    class UClass* ExitActor;
    FLOAT FluidFriction;
    FVector ViewFlash;
    FVector ViewFog;
    BITFIELD bDestructive:1 GCC_PACK(4);
    BITFIELD bNoInventory:1;
    BITFIELD bMoveProjectiles:1;
    BITFIELD bBounceVelocity:1;
    BITFIELD bNeutralZone:1;
    BITFIELD bWaterVolume:1;
    BITFIELD bWaterEffectIsOn:1;
    BITFIELD bSkipWaterRepulsion:1;
    class AInfo* PainTimer GCC_PACK(4);
    BITFIELD bDistanceFog:1 GCC_PACK(4);
    FColor DistanceFogColor GCC_PACK(4);
    FLOAT DistanceFogStart;
    FLOAT DistanceFogEnd;
    FLOAT WaterEffectIntensity;
    void eventPhysicsChangedFor(class AActor* Other)
    {
        APhysicsVolume_eventPhysicsChangedFor_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PhysicsChangedFor),&Parms);
    }
    void eventPawnLeavingVolume(class APawn* Other)
    {
        APhysicsVolume_eventPawnLeavingVolume_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnLeavingVolume),&Parms);
    }
    void eventPawnEnteredVolume(class APawn* Other)
    {
        APhysicsVolume_eventPawnEnteredVolume_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_PawnEnteredVolume),&Parms);
    }
    void eventActorLeavingVolume(class AActor* Other)
    {
        APhysicsVolume_eventActorLeavingVolume_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorLeavingVolume),&Parms);
    }
    void eventActorEnteredVolume(class AActor* Other)
    {
        APhysicsVolume_eventActorEnteredVolume_Parms Parms;
        Parms.Other=Other;
        ProcessEvent(FindFunctionChecked(ENGINE_ActorEnteredVolume),&Parms);
    }
    DECLARE_CLASS(APhysicsVolume,AVolume,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(APhysicsVolume)
};


class ENGINE_API ALadderVolume : public APhysicsVolume
{
public:
    FName ClimbingAnimation;
    FName TopAnimation;
    FRotator WallDir;
    FVector LookDir;
    FVector ClimbDir;
    class ALadder* LadderList;
    BITFIELD bNoPhysicalLadder:1 GCC_PACK(4);
    BITFIELD bAutoPath:1;
    class USound* hFootLadderSound GCC_PACK(4);
    DECLARE_CLASS(ALadderVolume,APhysicsVolume,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALadderVolume)
};


class ENGINE_API ADefaultPhysicsVolume : public APhysicsVolume
{
public:
    DECLARE_CLASS(ADefaultPhysicsVolume,APhysicsVolume,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADefaultPhysicsVolume)
};


class ENGINE_API ADamageType : public AActor
{
public:
    FStringNoInit DeathString;
    FStringNoInit FemaleSuicide;
    FStringNoInit MaleSuicide;
    FStringNoInit DamageWeaponName;
    BITFIELD bArmorStops:1 GCC_PACK(4);
    BITFIELD bSpawnDeathOnomatop:1;
    BITFIELD bDieInSilencePlease:1;
    BITFIELD bSpawnBloodFX:1;
    BITFIELD bGlobalDamages:1;
    BITFIELD bAllowHeadShotSFXTrigger:1;
    BITFIELD bBloodSplash:1;
    BITFIELD bCanKillStunnedCorspes:1;
    FLOAT GibModifier GCC_PACK(4);
    INT SoundType;
    class UClass* HeadBloodTrailEmitterClass;
    class UClass* BloodShotEmitterClass;
    DECLARE_CLASS(ADamageType,AActor,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADamageType)
};


class ENGINE_API AVehiclePart : public AActor
{
public:
    BITFIELD bUpdating:1 GCC_PACK(4);
    DECLARE_CLASS(AVehiclePart,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AVehiclePart)
};


class ENGINE_API AInventory : public AActor
{
public:
    BYTE InventoryGroup;
    BYTE GroupOffset;
    BITFIELD bDisplayableInv:1 GCC_PACK(4);
    BITFIELD bTossedOut:1;
    class UClass* PickupClass GCC_PACK(4);
    FStringNoInit PickupClassName;
    INT Charge;
    FStringNoInit PlayerTransferClassName;
    FStringNoInit NonPlayerTransferClassName;
    class UClass* PlayerTransferClass;
    class UClass* NonPlayerTransferClass;
    FVector PlayerViewOffset;
    FLOAT BobDamping;
    class AActor* ThirdPersonActor;
    FLOAT ThirdPersonScale;
    FVector ThirdPersonRelativeLocation;
    FRotator ThirdPersonRelativeRotation;
    class UClass* AttachmentClass;
    class UTexture* Icon;
    FStringNoInit ItemName;
    DECLARE_CLASS(AInventory,AActor,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AInventory)
};


class ENGINE_API AAmmunition : public AInventory
{
public:
    BITFIELD bInstantHit:1 GCC_PACK(4);
    BITFIELD bPlayHitSound:1;
    BITFIELD bDrawTracingBullets:1;
    BITFIELD bDisplayNameInHUD:1;
    BITFIELD bHandToHand:1;
    INT MaxAmmo GCC_PACK(4);
    INT AmmoAmount;
    class UClass* ProjectileClass;
    class UClass* MyDamageType;
    FLOAT WarnTargetPct;
    FLOAT ImpactNoise;
    FLOAT SoftImpactNoise;
    INT TraceType;
    INT HitSoundType;
    class USound* HitSoundMem;
    class UTexture* TBTexture;
    FLOAT fTraceFrequency;
    FLOAT fFireDelay;
    class UClass* ImpactEmitterMem;
    DECLARE_FUNCTION(execHasAmmo);
    DECLARE_CLASS(AAmmunition,AInventory,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAmmunition)
};


class ENGINE_API APowerups : public AInventory
{
public:
    INT NumCopies;
    BITFIELD bCanHaveMultipleCopies:1 GCC_PACK(4);
    BITFIELD bAutoActivate:1;
    BITFIELD bActivatable:1;
    BITFIELD bActive:1;
    FStringNoInit ExpireMessage GCC_PACK(4);
    class USound* ActivateSound;
    class USound* DeActivateSound;
    DECLARE_CLASS(APowerups,AInventory,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(APowerups)
};


class ENGINE_API AArmor : public AInventory
{
public:
    INT ArmorAbsorption;
    BYTE ProtectedArea;
    FName BoneToAttach;
    DECLARE_CLASS(AArmor,AInventory,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AArmor)
};

enum eWeaponMode
{
    WM_Auto                 =0,
    WM_SemiAuto             =1,
    WM_Burst                =2,
    WM_MAX                  =3,
};
enum eWeaponHand
{
    WHA_Fist                =0,
    WHA_1HShot              =1,
    WHA_2HShot              =2,
    WHA_Throw               =3,
    WHA_Deco                =4,
    WHA_MAX                 =5,
};
#define UCONST_BOREDSFXTHRESHOLD 10

class ENGINE_API AWeapon : public AInventory
{
public:
    BITFIELD bChangeWeapon:1 GCC_PACK(4);
    BITFIELD bCanThrow:1;
    BITFIELD bRapidFire:1;
    BITFIELD bForceReload:1;
    BITFIELD bMeleeWeapon:1;
    BITFIELD bForceFire:1;
    BITFIELD bForceAltFire:1;
    BITFIELD bHaveAltFire:1;
    BITFIELD bEmptyShot:1;
    BITFIELD bAllowEmptyShot:1;
    BITFIELD bAllowShot:1;
    BITFIELD bHaveScope:1;
    BITFIELD bZoomed:1;
    BITFIELD bDrawCrosshairOutZoom:1;
    BITFIELD bUnderWaterWork:1;
    BITFIELD bUseSilencer:1;
    BITFIELD bShouldGoThroughTraversable:1;
    BITFIELD bTraceBullets:1;
    BITFIELD bDrawZoomedCrosshair:1;
    BITFIELD bAutoReload:1;
    BITFIELD bAltEmptyShot:1;
    BITFIELD bDrawAltMuzzleFlash:1;
    BITFIELD bHeavyWeapon:1;
    BITFIELD bHaveBoredSfx:1;
    BITFIELD bCanHaveSlave:1;
    BITFIELD bHaveSlave:1;
    BITFIELD bIsSlave:1;
    BITFIELD bEnableSlave:1;
    BITFIELD bMuzzleFlash:1;
    BITFIELD bSetFlashTime:1;
    BITFIELD bDrawMuzzleFlash:1;
    BITFIELD bRendered:1;
    BYTE WHand GCC_PACK(4);
    BYTE WeaponMode;
    class UClass* AmmoName;
    class UClass* AltAmmoName;
    INT PickupAmmoCount;
    INT AltPickupAmmoCount;
    class AAmmunition* AmmoType;
    class AAmmunition* AltAmmoType;
    BYTE ReloadCount;
    BYTE AltReloadCount;
    FStringNoInit MeshName;
    class AActor* Silencer;
    FLOAT StopFiringTime;
    FVector FireOffset;
    FVector AltFireOffset;
    class UTexture* CrossHair;
    FLOAT TraceAccuracy;
    INT iBurstCount;
    FLOAT fVarAccuracy;
    FLOAT ScopeFOV;
    FLOAT ShotTime;
    FName FiringMode;
    FLOAT FireNoise;
    FLOAT ReLoadNoise;
    FLOAT AltFireNoise;
    FLOAT fTraceBulletCount;
    class UTexture* ZCrosshair;
    class UTexture* ZCrosshairDot;
    class UTexture* StabilityTex;
    FName LoadedFiringAnim;
    FName EmptyFiringAnim;
    FName LoadedAltFiringAnim;
    FName EmptyAltFiringAnim;
    FVector ViewFeedBack;
    FVector AltViewFeedBack;
    INT iAltZoomLevel;
    FLOAT fAltZoomValue[3];
    INT iBoredCount;
    INT RumbleFXNum;
    FStringNoInit sWeaponModeAuto;
    FStringNoInit sWeaponModeSemiAuto;
    FStringNoInit sWeaponModeBurst;
    class AInventoryAttachment* FirstPersonMF;
    class UClass* FirstPersonMFClass;
    FVector FPMFRelativeLoc;
    FRotator FPMFRelativeRot;
    class AEmitter* WRE;
    class AWeapon* MySlave;
    class AWeapon* SlaveOf;
    FName NextSlaveState;
    FLOAT ShakeMag;
    FLOAT shaketime;
    FVector ShakeVert;
    FVector ShakeSpeed;
    FLOAT ShakeCycles;
    FLOAT AltShakeMag;
    FLOAT AltShakeTime;
    FVector AltShakeVert;
    FVector AltShakeSpeed;
    FLOAT AltShakeCycles;
    FLOAT AIRating;
    FLOAT TraceDist;
    FLOAT AltTraceDist;
    FRotator AdjustedAim;
    class USound* hFireSound;
    class USound* hReloadSound;
    class USound* hNoAmmoSound;
    class USound* hSelectWeaponSound;
    class USound* hZoomSound;
    class USound* hAltFireSound;
    class USound* hActWaitSound;
    FStringNoInit MessageNoAmmo;
    FLOAT FlashTime;
    FLOAT MuzzleScale;
    FLOAT FlashOffsetY;
    FLOAT FlashOffsetX;
    FLOAT FlashLength;
    FLOAT MuzzleFlashSize;
    class UTexture* MFTexture;
    BYTE FlashCount;
    BYTE AltFlashCount;
    BYTE ReloadClientCount;
    BITFIELD DBDual:1 GCC_PACK(4);
    BITFIELD DBWeap:1;
    DECLARE_FUNCTION(execPlayFiringSound);
    DECLARE_FUNCTION(execGetFireStart);
    DECLARE_FUNCTION(execHasAmmo);
    DECLARE_CLASS(AWeapon,AInventory,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(AWeapon)
};


struct APickup_eventClientRespawned_Parms
{
};
struct APickup_eventClientPickedUp_Parms
{
};
class ENGINE_API APickup : public AActor
{
public:
    BITFIELD bInstantRespawn:1 GCC_PACK(4);
    BITFIELD bOnlyReplicateHidden:1;
    BITFIELD bAmbientGlow:1;
    FLOAT MaxDesireability GCC_PACK(4);
    class AInventorySpot* myMarker;
    class UClass* InventoryType;
    FLOAT RespawnTime;
    FStringNoInit PickupMessage;
    class USound* PickupSound;
    class USound* hRespawnSound;
    void eventClientRespawned()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ClientRespawned),NULL);
    }
    void eventClientPickedUp()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ClientPickedUp),NULL);
    }
    DECLARE_CLASS(APickup,AActor,0|CLASS_NativeReplication,Engine)
    NO_DEFAULT_CONSTRUCTOR(APickup)
};


class ENGINE_API AAmmo : public APickup
{
public:
    INT AmmoAmount;
    DECLARE_CLASS(AAmmo,APickup,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AAmmo)
};


struct AHUD_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
struct AHUD_eventWorldSpaceOverlays_Parms
{
};
struct AHUD_eventShowUpgradeMenu_Parms
{
};
class ENGINE_API AHUD : public AActor
{
public:
    class UFont* SmallFont;
    class UFont* MedFont;
    class UFont* BigFont;
    class UFont* LargeFont;
    FStringNoInit HUDConfigWindowType;
    class AHUD* nextHUD;
    class APlayerController* PlayerOwner;
    class AScoreBoard* Scoring;
    BITFIELD bShowScores:1 GCC_PACK(4);
    BITFIELD bShowDebugInfo:1;
    BITFIELD bHideCenterMessages:1;
    BITFIELD bBadConnectionAlert:1;
    BITFIELD bMessageBeep:1;
    BITFIELD bViewPlayer:1;
    BITFIELD bDrawChrono:1;
    BITFIELD bDrawSixSense:1;
    BITFIELD bDrawChronoWithWarningColors:1;
    FStringNoInit LoadingMessage GCC_PACK(4);
    FStringNoInit SavingMessage;
    FStringNoInit ConnectingMessage;
    FStringNoInit PausedMessage;
    FStringNoInit PrecachingMessage;
    BITFIELD bHideHUD:1 GCC_PACK(4);
    FStringNoInit TextMessages[4] GCC_PACK(4);
    FLOAT MessageLife[4];
    class APawn* PawnOwner;
    class UTexture* RoundBackGroundTex;
    class UTexture* FondMsg;
    FColor HudWarningColor;
    FColor HudBasicColor;
    FColor HudBackGroundColor;
    FLOAT XP;
    FLOAT YP;
    FLOAT IconSize;
    INT LifeDisplayWidth;
    INT LifeDisplayHeight;
    FColor OrangeColor;
    FColor BlackColor;
    FColor WhiteColor;
    FColor GoldColor;
    FColor RedColor;
    FColor BlueColor;
    FColor GreenColor;
    FColor TurqColor;
    FColor GrayColor;
    FColor CyanColor;
    FColor PurpleColor;
    FColor LightGreenColor;
    FColor LightBlueColor;
    FColor LightPurpleColor;
    FLOAT fDrawSixSenseTimer[5];
    FVector vSixSensePos[5];
    class UTexture* SixSenseTex;
    class UTexture* SixSenseDisplayTex;
    class UTexture* BulletIconTex;
    FLOAT LeftMargin;
    FLOAT RightMargin;
    FLOAT UpMargin;
    FLOAT DownMargin;
    class UTexture* HudIcons;
    class UTexture* HudWIcons;
    FLOAT fDrawChronoTimer;
    FStringNoInit sChronoString;
    class AWeapon* DrawnWeapon;
    FLOAT fDrawWeaponsTimer;
    FStringNoInit sAmmoRef;
    BITFIELD HelpDisplay:1 GCC_PACK(4);
    DECLARE_FUNCTION(execDrawWeaponsList);
    DECLARE_FUNCTION(execDrawAmmo);
    DECLARE_FUNCTION(execDrawPlayerInfo);
    DECLARE_FUNCTION(execDrawStdBackground);
    DECLARE_FUNCTION(execDraw3DLine);
    void eventPostRender(class UCanvas* Canvas)
    {
        AHUD_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    void eventWorldSpaceOverlays()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_WorldSpaceOverlays),NULL);
    }
    void eventShowUpgradeMenu()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_ShowUpgradeMenu),NULL);
    }
    DECLARE_CLASS(AHUD,AActor,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(AHUD)
};


class ENGINE_API AProjectile : public AActor
{
public:
    FLOAT Speed;
    FLOAT MaxSpeed;
    FLOAT TossZ;
    FLOAT Damage;
    FLOAT DamageRadius;
    FLOAT MomentumTransfer;
    class UClass* MyDamageType;
    class USound* SpawnSound;
    class USound* ImpactSound;
    class UClass* ExplosionDecal;
    FLOAT ExploWallOut;
    DECLARE_CLASS(AProjectile,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(AProjectile)
};


class ENGINE_API ADecoration : public AActor
{
public:
    class UClass* EffectWhenDestroyed;
    BITFIELD bPushable:1 GCC_PACK(4);
    BITFIELD bDamageable:1;
    BITFIELD bPushSoundPlaying:1;
    BITFIELD bSplash:1;
    class USound* PushSound GCC_PACK(4);
    class USound* EndPushSound;
    INT numLandings;
    class UClass* contents;
    INT NumFrags;
    class UTexture* FragSkin;
    class UClass* FragType;
    FVector FragMomentum;
    INT Health;
    FLOAT SplashTime;
    class AShadowProjector* Shadow;
    DECLARE_CLASS(ADecoration,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ADecoration)
};


class ENGINE_API ANote : public AActor
{
public:
    FStringNoInit Text;
    DECLARE_CLASS(ANote,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ANote)
};


class ENGINE_API ALight : public AActor
{
public:
    DECLARE_CLASS(ALight,AActor,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ALight)
};

enum XBL_MESSAGES
{
    XBLE_NONE               =0,
    XBLE_UNEXPECTED         =1,
    XBLE_OVERFLOW           =2,
    XBLE_NO_SESSION         =3,
    XBLE_USER_NOT_LOGGED_ON =4,
    XBLE_NO_GUEST_ACCESS    =5,
    XBLE_NOT_INITIALIZED    =6,
    XBLE_NO_USER            =7,
    XBLE_INTERNAL_ERROR     =8,
    XBLE_OUT_OF_MEMORY      =9,
    XBLE_TASK_BUSY          =10,
    XBLE_SERVER_ERROR       =11,
    XBLE_IO_ERROR           =12,
    XBLE_BAD_CONTENT_TYPE   =13,
    XBLE_USER_NOT_PRESENT   =14,
    XBLE_PROTOCOL_MISMATCH  =15,
    XBLE_INVALID_SERVICE_ID =16,
    XBLE_INVALID_REQUEST    =17,
    XBLE_LOGON_NO_NETWORK_CONNECTION=18,
    XBLE_LOGON_CANNOT_ACCESS_SERVICE=19,
    XBLE_LOGON_UPDATE_REQUIRED=20,
    XBLE_LOGON_SERVERS_TOO_BUSY=21,
    XBLE_LOGON_CONNECTION_LOST=22,
    XBLE_LOGON_KICKED_BY_DUPLICATE_LOGON=23,
    XBLE_LOGON_INVALID_USER =24,
    XBLE_SILENT_LOGON_DISABLED=25,
    XBLE_SILENT_LOGON_NO_ACCOUNTS=26,
    XBLE_SILENT_LOGON_PASSCODE_REQUIRED=27,
    XBLE_LOGON_SERVICE_NOT_REQUESTED=28,
    XBLE_LOGON_SERVICE_NOT_AUTHORIZED=29,
    XBLE_LOGON_SERVICE_TEMPORARILY_UNAVAILABLE=30,
    XBLE_LOGON_USER_HAS_MESSAGE=31,
    XBLE_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT=32,
    XBLE_LOGON_MU_NOT_MOUNTED=33,
    XBLE_LOGON_MU_IO_ERROR  =34,
    XBLE_LOGON_CHANGE_USER_FAILED=35,
    XBLE_LOGON_NOT_LOGGED_ON=36,
    XBLE_NOTIFICATION_BAD_CONTENT_TYPE=37,
    XBLE_NOTIFICATION_INVALID_MESSAGE_TYPE=38,
    XBLE_NOTIFICATION_NO_ADDRESS=39,
    XBLE_NOTIFICATION_INVALID_PUID=40,
    XBLE_NOTIFICATION_NO_CONNECTION=41,
    XBLE_NOTIFICATION_SEND_FAILED=42,
    XBLE_NOTIFICATION_RECV_FAILED=43,
    XBLE_NOTIFICATION_MESSAGE_TRUNCATED=44,
    XBLE_NOTIFICATION_SERVER_BUSY=45,
    XBLE_NOTIFICATION_LIST_FULL=46,
    XBLE_NOTIFICATION_BLOCKED=47,
    XBLE_NOTIFICATION_FRIEND_PENDING=48,
    XBLE_NOTIFICATION_FLUSH_TICKETS=49,
    XBLE_NOTIFICATION_TOO_MANY_REQUESTS=50,
    XBLE_NOTIFICATION_USER_ALREADY_EXISTS=51,
    XBLE_NOTIFICATION_USER_NOT_FOUND=52,
    XBLE_NOTIFICATION_OTHER_LIST_FULL=53,
    XBLE_NOTIFICATION_SELF  =54,
    XBLE_NOTIFICATION_SAME_TITLE=55,
    XBLE_NOTIFICATION_NO_TASK=56,
    XBLE_MATCH_INVALID_SESSION_ID=57,
    XBLE_MATCH_INVALID_TITLE_ID=58,
    XBLE_MATCH_INVALID_DATA_TYPE=59,
    XBLE_MATCH_REQUEST_TOO_SMALL=60,
    XBLE_MATCH_REQUEST_TRUNCATED=61,
    XBLE_MATCH_INVALID_SEARCH_REQ=62,
    XBLE_MATCH_INVALID_OFFSET=63,
    XBLE_MATCH_INVALID_ATTR_TYPE=64,
    XBLE_MATCH_INVALID_VERSION=65,
    XBLE_MATCH_OVERFLOW     =66,
    XBLE_MATCH_INVALID_RESULT_COL=67,
    XBLE_MATCH_INVALID_STRING=68,
    XBLE_MATCH_STRING_TOO_LONG=69,
    XBLE_MATCH_BLOB_TOO_LONG=70,
    XBLE_MATCH_INVALID_ATTRIBUTE_ID=71,
    XBLE_MATCH_SESSION_ALREADY_EXISTS=72,
    XBLE_MATCH_CRITICAL_DB_ERR=73,
    XBLE_MATCH_NOT_ENOUGH_COLUMNS=74,
    XBLE_MATCH_PERMISSION_DENIED=75,
    XBLE_MATCH_INVALID_PART_SCHEME=76,
    XBLE_MATCH_INVALID_PARAM=77,
    XBLE_MATCH_DATA_TYPE_MISMATCH=78,
    XBLE_MATCH_SERVER_ERROR =79,
    XBLE_MATCH_NO_USERS     =80,
    XBLE_MATCH_INVALID_BLOB =81,
    XBLE_OFFERING_NEW_CONTENT=82,
    XBLE_OFFERING_NO_NEW_CONTENT=83,
    XBLE_OFFERING_BAD_REQUEST=84,
    XBLE_OFFERING_INVALID_USER=85,
    XBLE_OFFERING_INVALID_OFFER_ID=86,
    XBLE_OFFERING_INELIGIBLE_FOR_OFFER=87,
    XBLE_OFFERING_OFFER_EXPIRED=88,
    XBLE_OFFERING_SERVICE_UNREACHABLE=89,
    XBLE_OFFERING_PURCHASE_BLOCKED=90,
    XBLE_OFFERING_PURCHASE_DENIED=91,
    XBLE_OFFERING_BILLING_SERVER_ERROR=92,
    XBLE_OFFERING_OFFER_NOT_CANCELABLE=93,
    XBLE_OFFERING_NOTHING_TO_CANCEL=94,
    XBLE_OFFERING_ALREADY_OWN_MAX=95,
    XBLE_OFFERING_NO_CHARGE =96,
    XBLE_OFFERING_PERMISSION_DENIED=97,
    XBLE_OFFERING_NAME_TAKEN=98,
    XBLE_BILLING_AUTHORIZATION_FAILED=99,
    XBLE_BILLING_CREDIT_CARD_EXPIRED=100,
    XBLE_BILLING_NON_ACTIVE_ACCOUNT=101,
    XBLE_BILLING_INVALID_PAYMENT_INSTRUMENT_STATUS=102,
    XBLE_UODB_KEY_ALREADY_EXISTS=103,
    XBLE_MSGSVR_INVALID_REQUEST=104,
    XBLE_FEEDBACK_NULL_TARGET=105,
    XBLE_FEEDBACK_BAD_TYPE  =106,
    XBLE_FEEDBACK_CANNOT_LOG=107,
    XBLE_STAT_BAD_REQUEST   =108,
    XBLE_STAT_INVALID_TITLE_OR_LEADERBOARD=109,
    XBLE_STAT_TOO_MANY_SPECS=110,
    XBLE_STAT_TOO_MANY_STATS=111,
    XBLE_STAT_USER_NOT_FOUND=112,
    XBLE_STAT_SET_FAILED_0  =113,
    XBLE_STAT_PERMISSION_DENIED=114,
    XBLE_STAT_LEADERBOARD_WAS_RESET=115,
    XBLE_STAT_INVALID_ATTACHMENT=116,
    XBLE_STAT_CAN_UPLOAD_ATTACHMENT=117,
    XBLE_STORAGE_INVALID_REQUEST=118,
    XBLE_STORAGE_ACCESS_DENIED=119,
    XBLE_STORAGE_FILE_IS_TOO_BIG=120,
    XBLE_STORAGE_FILE_NOT_FOUND=121,
    XBLE_STORAGE_INVALID_ACCESS_TOKEN=122,
    XBLE_STORAGE_CANNOT_FIND_PATH=123,
    XBLE_STORAGE_FILE_IS_ELSEWHERE=124,
    XBLE_STORAGE_INVALID_STORAGE_PATH=125,
    XBLE_STORAGE_INVALID_FACILITY=126,
    XBLE_STORAGE_UNKNOWN_DOMAIN=127,
    XBLE_STORAGE_SYNC_TIME_SKEW=128,
    XBLE_STORAGE_SYNC_TIME_SKEW_LOCALTIME=129,
    XBLE_CUSTOM_YOU_HAVE_NO_FRIENDS=130,
    XBLE_RUNNING            =131,
    XBLE_COUNT              =132,
    XBLE_MAX                =133,
};
enum ePasscodeSymbol
{
    PS_DPAD_UP              =0,
    PS_DPAD_DOWN            =1,
    PS_DPAD_LEFT            =2,
    PS_DPAD_RIGHT           =3,
    PS_GAMEPAD_X            =4,
    PS_GAMEPAD_Y            =5,
    PS_GAMEPAD_LEFT_TRIGGER =6,
    PS_GAMEPAD_RIGHT_TRIGGER=7,
    PS_MAX                  =8,
};
enum eSkill
{
    SKILL_All               =0,
    SKILL_Beginner          =1,
    SKILL_BelowAverage      =2,
    SKILL_Average           =3,
    SKILL_AboveAverage      =4,
    SKILL_Skilled           =5,
    SKILL_Pro               =6,
    SKILL_Elite             =7,
    SKILL_MAX               =8,
};
enum eLanguage
{
    LANG_All                =0,
    LANG_EnglishOnly        =1,
    LANG_FrenchOnly         =2,
    LANG_GermanOnly         =3,
    LANG_SpanishOnly        =4,
    LANG_SwedishOnly        =5,
    LANG_DutchOnly          =6,
    LANG_ItalianOnly        =7,
    LANG_Invalid            =8,
    LANG_MAX                =9,
};
enum eGameType
{
    GT_DM                   =0,
    GT_TeamDM               =1,
    GT_CTF                  =2,
    GT_Sabotage             =3,
    GT_Duel                 =4,
    GT_Ladder               =5,
    GT_Invalid              =6,
    GT_MAX                  =7,
};
enum dashboardPage
{
    DASHBOARD_ACCOUNT_CREATION=0,
    DASHBOARD_ACCOUNT_MANAGEMENT=1,
    DASHBOARD_NETWORK_CONFIG=2,
    DASHBOARD_MESSAGES      =3,
    DASHBOARD_MAX           =4,
};
enum eVoiceMask
{
    VOICE_Anonymous         =0,
    VOICE_WalkieTalkie      =1,
    VOICE_RobotAngel        =2,
    VOICE_Boogieman         =3,
    VOICE_RobotLord1        =4,
    VOICE_RobotLord2        =5,
    VOICE_WhisperingDonald  =6,
    VOICE_GenderBender      =7,
    VOICE_RobotChild1       =8,
    VOICE_RobotChild2       =9,
    VOICE_WhisperChild      =10,
    VOICE_NoHomers          =11,
    VOICE_Android           =12,
    VOICE_Robot             =13,
    VOICE_Custom            =14,
    VOICE_MAX               =15,
};
#define UCONST_XONLINE_FRIENDSTATE_FLAG_RECEIVEDREQUEST 0x80000000
#define UCONST_XONLINE_FRIENDSTATE_FLAG_SENTREQUEST 0x40000000
#define UCONST_XONLINE_FRIENDSTATE_FLAG_INVITEREJECTED 0x20000000
#define UCONST_XONLINE_FRIENDSTATE_FLAG_INVITEACCEPTED 0x10000000
#define UCONST_XONLINE_FRIENDSTATE_FLAG_RECEIVEDINVITE 0x08000000
#define UCONST_XONLINE_FRIENDSTATE_FLAG_SENTINVITE 0x04000000
#define UCONST_XONLINE_FRIENDSTATE_FLAG_RESERVED0 0x00000080
#define UCONST_XONLINE_FRIENDSTATE_MASK_GUESTS 0x00000060
#define UCONST_XONLINE_FRIENDSTATE_FLAG_JOINABLE 0x00000010
#define UCONST_XONLINE_FRIENDSTATE_FLAG_VOICE 0x00000008
#define UCONST_XONLINE_FRIENDSTATE_FLAG_PLAYING 0x00000002
#define UCONST_XONLINE_FRIENDSTATE_FLAG_ONLINE 0x00000001
#define UCONST_XONLINE_FRIENDSTATE_FLAG_NONE 0x00000000
#define UCONST_US_VOICE 8
#define UCONST_US_PLAYING 4
#define UCONST_US_ONLINE 2
#define UCONST_US_JOINABLE 1

class ENGINE_API UXboxLiveManager : public UObject
{
public:
    FStringNoInit errorMessages[132];
    DECLARE_FUNCTION(execUpdateServerListeners);
    DECLARE_FUNCTION(execGetSetting);
    DECLARE_FUNCTION(execSetSetting);
    DECLARE_FUNCTION(execEnumerateFriends);
    DECLARE_FUNCTION(execSetListeners);
    DECLARE_FUNCTION(execIsUserMuted);
    DECLARE_FUNCTION(execResetVoiceNet);
    DECLARE_FUNCTION(execBootToDownloadManager);
    DECLARE_FUNCTION(execBootToUpdateXBE);
    DECLARE_FUNCTION(execHasFriendRequest);
    DECLARE_FUNCTION(execHasInvite);
    DECLARE_FUNCTION(execShouldRenderInvite);
    DECLARE_FUNCTION(execIsPlayerNameInGame);
    DECLARE_FUNCTION(execGetLevelInfo);
    DECLARE_FUNCTION(execSetPlayerVoiceStatus);
    DECLARE_FUNCTION(execInternalKick);
    DECLARE_FUNCTION(execIsHost);
    DECLARE_FUNCTION(execIsPlayerListUpdated);
    DECLARE_FUNCTION(execIsFriend);
    DECLARE_FUNCTION(execGetActivePlayer);
    DECLARE_FUNCTION(execSetActivePlayer);
    DECLARE_FUNCTION(execSendFeedback);
    DECLARE_FUNCTION(execIsInSameSession);
    DECLARE_FUNCTION(execIsUpdatingFriends);
    DECLARE_FUNCTION(execRevokeGameInvite);
    DECLARE_FUNCTION(execDeclineGameInvite);
    DECLARE_FUNCTION(execAcceptGameInvite);
    DECLARE_FUNCTION(execSendGameInvite);
    DECLARE_FUNCTION(execSendFriendRequest);
    DECLARE_FUNCTION(execBlockFriendRequest);
    DECLARE_FUNCTION(execCancelFriendRequest);
    DECLARE_FUNCTION(execDeclineFriendRequest);
    DECLARE_FUNCTION(execAcceptFriendRequest);
    DECLARE_FUNCTION(execGetFriendGameName);
    DECLARE_FUNCTION(execRemoveFriend);
    DECLARE_FUNCTION(execGetActiveFriendTitle);
    DECLARE_FUNCTION(execGetActiveFriendName);
    DECLARE_FUNCTION(execGetActiveFriend);
    DECLARE_FUNCTION(execSetActiveFriend);
    DECLARE_FUNCTION(execIsFriendsListChanged);
    DECLARE_FUNCTION(execUpdateFriends);
    DECLARE_FUNCTION(execGetNumberOfFriends);
    DECLARE_FUNCTION(execGetFriend);
    DECLARE_FUNCTION(execGetFriendTitleAtIndex);
    DECLARE_FUNCTION(execGetFriendNameAtIndex);
    DECLARE_FUNCTION(execGetFriendAtIndex);
    DECLARE_FUNCTION(execSessionSetMaxSkill);
    DECLARE_FUNCTION(execSessionSetMinSkill);
    DECLARE_FUNCTION(execSessionSetCycleLevels);
    DECLARE_FUNCTION(execSessionSetFriendlyFire);
    DECLARE_FUNCTION(execSessionSetReserved);
    DECLARE_FUNCTION(execSessionSetPrivateSlots);
    DECLARE_FUNCTION(execSessionSetPublicSlots);
    DECLARE_FUNCTION(execSessionSetTimeLimit);
    DECLARE_FUNCTION(execSessionSetFragLimit);
    DECLARE_FUNCTION(execSessionSetLanguage);
    DECLARE_FUNCTION(execSessionSetMapName);
    DECLARE_FUNCTION(execSessionSetGameType);
    DECLARE_FUNCTION(execSessionListen);
    DECLARE_FUNCTION(execSessionReset);
    DECLARE_FUNCTION(execSessionDelete);
    DECLARE_FUNCTION(execSessionProcess);
    DECLARE_FUNCTION(execSessionUpdate);
    DECLARE_FUNCTION(execSessionIsSubnetStarted);
    DECLARE_FUNCTION(execSessionStartSubnet);
    DECLARE_FUNCTION(execSessionIsCreateFinished);
    DECLARE_FUNCTION(execSessionCreate);
    DECLARE_FUNCTION(execFriendJoinGetURL);
    DECLARE_FUNCTION(execFriendJoinIsFinished);
    DECLARE_FUNCTION(execFriendJoinSession);
    DECLARE_FUNCTION(execFriendFindIsFinished);
    DECLARE_FUNCTION(execFriendFindSession);
    DECLARE_FUNCTION(execFriendIsInSameSession);
    DECLARE_FUNCTION(execFriendIsInSameGame);
    DECLARE_FUNCTION(execJoinGetURL);
    DECLARE_FUNCTION(execJoinIsFinished);
    DECLARE_FUNCTION(execJoinSession);
    DECLARE_FUNCTION(execUnconvertString);
    DECLARE_FUNCTION(execConvertString);
    DECLARE_FUNCTION(execOptimatchIsProbing);
    DECLARE_FUNCTION(execOptimatchProbe);
    DECLARE_FUNCTION(execOptimatchGetQoS);
    DECLARE_FUNCTION(execOptimatchGetURL);
    DECLARE_FUNCTION(execOptimatchJoinIsFinished);
    DECLARE_FUNCTION(execOptimatchJoinSession);
    DECLARE_FUNCTION(execOptimatchGetOpenPrivateSlots);
    DECLARE_FUNCTION(execOptimatchGetTotalPrivateSlots);
    DECLARE_FUNCTION(execOptimatchGetOpenPublicSlots);
    DECLARE_FUNCTION(execOptimatchGetTotalPublicSlots);
    DECLARE_FUNCTION(execOptimatchGetCycleLevels);
    DECLARE_FUNCTION(execOptimatchGetFriendlyFire);
    DECLARE_FUNCTION(execOptimatchGetPlayerCount);
    DECLARE_FUNCTION(execOptimatchGetMaxSkill);
    DECLARE_FUNCTION(execOptimatchGetMinSkill);
    DECLARE_FUNCTION(execOptimatchGetLanguage);
    DECLARE_FUNCTION(execOptimatchGetTimeLimit);
    DECLARE_FUNCTION(execOptimatchGetFragLimit);
    DECLARE_FUNCTION(execOptimatchGetOwner);
    DECLARE_FUNCTION(execOptimatchGetMapName);
    DECLARE_FUNCTION(execOptimatchGetGameType);
    DECLARE_FUNCTION(execOptimatchGetResultCount);
    DECLARE_FUNCTION(execOptimatchCancelQuery);
    DECLARE_FUNCTION(execOptimatchProcessQuery);
    DECLARE_FUNCTION(execOptimatchStartQuery);
    DECLARE_FUNCTION(execQuickmatchIsProbing);
    DECLARE_FUNCTION(execQuickmatchProbe);
    DECLARE_FUNCTION(execQuickmatchGetQoS);
    DECLARE_FUNCTION(execQuickmatchGetURL);
    DECLARE_FUNCTION(execQuickmatchJoinIsFinished);
    DECLARE_FUNCTION(execQuickmatchJoinSession);
    DECLARE_FUNCTION(execQuickmatchGetOpenPrivateSlots);
    DECLARE_FUNCTION(execQuickmatchGetTotalPrivateSlots);
    DECLARE_FUNCTION(execQuickmatchGetOpenPublicSlots);
    DECLARE_FUNCTION(execQuickmatchGetTotalPublicSlots);
    DECLARE_FUNCTION(execQuickmatchGetCycleLevels);
    DECLARE_FUNCTION(execQuickmatchGetFriendlyFire);
    DECLARE_FUNCTION(execQuickmatchGetPlayerCount);
    DECLARE_FUNCTION(execQuickmatchGetMaxSkill);
    DECLARE_FUNCTION(execQuickmatchGetMinSkill);
    DECLARE_FUNCTION(execQuickmatchGetLanguage);
    DECLARE_FUNCTION(execQuickmatchGetTimeLimit);
    DECLARE_FUNCTION(execQuickmatchGetFragLimit);
    DECLARE_FUNCTION(execQuickmatchGetOwner);
    DECLARE_FUNCTION(execQuickmatchGetMapName);
    DECLARE_FUNCTION(execQuickmatchGetGameType);
    DECLARE_FUNCTION(execQuickmatchGetResultCount);
    DECLARE_FUNCTION(execQuickmatchCancelQuery);
    DECLARE_FUNCTION(execQuickmatchProcessQuery);
    DECLARE_FUNCTION(execQuickmatchStartQuery);
    DECLARE_FUNCTION(execSetShouldUpdateStats);
    DECLARE_FUNCTION(execGetMyLadderRank);
    DECLARE_FUNCTION(execGetLadderSize);
    DECLARE_FUNCTION(execIsGetMyLadderStatsDone);
    DECLARE_FUNCTION(execGetMyLadderStats);
    DECLARE_FUNCTION(execStatsGetFriendsResultFlagsCap);
    DECLARE_FUNCTION(execStatsGetFriendsResultFlagsRet);
    DECLARE_FUNCTION(execStatsGetFriendsResultSuicides);
    DECLARE_FUNCTION(execStatsGetFriendsResultGamesWon);
    DECLARE_FUNCTION(execStatsGetFriendsResultGames);
    DECLARE_FUNCTION(execStatsGetFriendsResultMinutes);
    DECLARE_FUNCTION(execStatsGetFriendsResultDeaths);
    DECLARE_FUNCTION(execStatsGetFriendsResultKills);
    DECLARE_FUNCTION(execStatsGetFriendsResultName);
    DECLARE_FUNCTION(execStatsGetFriendsResultPosition);
    DECLARE_FUNCTION(execStatsGetFriendsResultCount);
    DECLARE_FUNCTION(execStatsGetResultFlagsCap);
    DECLARE_FUNCTION(execStatsGetResultFlagsRet);
    DECLARE_FUNCTION(execStatsGetResultSuicides);
    DECLARE_FUNCTION(execStatsGetResultGamesWon);
    DECLARE_FUNCTION(execStatsGetResultGames);
    DECLARE_FUNCTION(execStatsGetResultMinutes);
    DECLARE_FUNCTION(execStatsGetResultDeaths);
    DECLARE_FUNCTION(execStatsGetResultKills);
    DECLARE_FUNCTION(execStatsGetResultName);
    DECLARE_FUNCTION(execStatsGetResultPosition);
    DECLARE_FUNCTION(execStatsGetResultCount);
    DECLARE_FUNCTION(execWasMyStatsUpdateSuccessful);
    DECLARE_FUNCTION(execIsMyStatsUpdateDone);
    DECLARE_FUNCTION(execStatsUpdateMyStats);
    DECLARE_FUNCTION(execStatsCancelRequestUser);
    DECLARE_FUNCTION(execStatsPumpRequestUser);
    DECLARE_FUNCTION(execStatsRequestUser);
    DECLARE_FUNCTION(execStatsCancelRequestFriends);
    DECLARE_FUNCTION(execStatsPumpRequestFriends);
    DECLARE_FUNCTION(execStatsRequestFriends);
    DECLARE_FUNCTION(execStatsCancelRequestOverall);
    DECLARE_FUNCTION(execStatsPumpRequestOverall);
    DECLARE_FUNCTION(execStatsRequestOverall);
    DECLARE_FUNCTION(execStatsCancelReset);
    DECLARE_FUNCTION(execStatsPumpReset);
    DECLARE_FUNCTION(execStatsReset);
    DECLARE_FUNCTION(execGetStatisticsType);
    DECLARE_FUNCTION(execStatsStopCachingLeaderboard);
    DECLARE_FUNCTION(execStatsSetRequestedRank);
    DECLARE_FUNCTION(execStatsGetActiveUserRank);
    DECLARE_FUNCTION(execStatsIsRankReady);
    DECLARE_FUNCTION(execStatsGetLeaderboardSize);
    DECLARE_FUNCTION(execSetStatisticsType);
    DECLARE_FUNCTION(execIsKicked);
    DECLARE_FUNCTION(execIsServerDown);
    DECLARE_FUNCTION(execGetVoiceMaskEnabled);
    DECLARE_FUNCTION(execSetVoiceMaskEnabled);
    DECLARE_FUNCTION(execGetVoiceMaskRoboticValue);
    DECLARE_FUNCTION(execGetVoiceMaskWhisperValue);
    DECLARE_FUNCTION(execGetVoiceMaskPitchScale);
    DECLARE_FUNCTION(execGetVoiceMaskSpecEnergyWeight);
    DECLARE_FUNCTION(execSetVoiceMaskRoboticValue);
    DECLARE_FUNCTION(execSetVoiceMaskWhisperValue);
    DECLARE_FUNCTION(execSetVoiceMaskPitchScale);
    DECLARE_FUNCTION(execSetVoiceMaskSpecEnergyWeight);
    DECLARE_FUNCTION(execGetVoiceMask);
    DECLARE_FUNCTION(execSetVoiceMask);
    DECLARE_FUNCTION(execGetVoiceStatus);
    DECLARE_FUNCTION(execSetVoiceStatus);
    DECLARE_FUNCTION(execGetOnlineStatus);
    DECLARE_FUNCTION(execSetOnlineStatus);
    DECLARE_FUNCTION(execGetVoiceThroughSpeakers);
    DECLARE_FUNCTION(execSetVoiceThroughSpeakers);
    DECLARE_FUNCTION(execIsPlayerOnMuteListByName);
    DECLARE_FUNCTION(execRemovePlayerFromMuteListByName);
    DECLARE_FUNCTION(execAddPlayerToMuteListByName);
    DECLARE_FUNCTION(execIsPlayerOnMuteList);
    DECLARE_FUNCTION(execRemovePlayerFromMuteList);
    DECLARE_FUNCTION(execAddPlayerToMuteList);
    DECLARE_FUNCTION(execIsPlayerInGame);
    DECLARE_FUNCTION(execHasPlayerVoice);
    DECLARE_FUNCTION(execIsPlayerMuted);
    DECLARE_FUNCTION(execIsPlayerTalking);
    DECLARE_FUNCTION(execGetPlayerName);
    DECLARE_FUNCTION(execGetNumberOfPlayers);
    DECLARE_FUNCTION(execUpdatePlayersTalking);
    DECLARE_FUNCTION(execCachePlayerList);
    DECLARE_FUNCTION(execGetRecommendedPlayers);
    DECLARE_FUNCTION(execGetNiceName);
    DECLARE_FUNCTION(execGetRandomMap);
    DECLARE_FUNCTION(execGetNextMap);
    DECLARE_FUNCTION(execGetFirstMap);
    DECLARE_FUNCTION(execGetGamerTag);
    DECLARE_FUNCTION(execVerifyIPLoggedIn);
    DECLARE_FUNCTION(execHasUserVoice);
    DECLARE_FUNCTION(execGetSearchLanguage);
    DECLARE_FUNCTION(execGetSearchFriendlyFire);
    DECLARE_FUNCTION(execGetSearchMap);
    DECLARE_FUNCTION(execGetSearchGameType);
    DECLARE_FUNCTION(execSetSearchParams);
    DECLARE_FUNCTION(execSetLadderGame);
    DECLARE_FUNCTION(execIsLadderGame);
    DECLARE_FUNCTION(execGetUserInvitedAfterBoot);
    DECLARE_FUNCTION(execGetFriendInviterAfterBoot);
    DECLARE_FUNCTION(execResetJoiningAfterBoot);
    DECLARE_FUNCTION(execIsJoiningAfterBoot);
    DECLARE_FUNCTION(execGetLastError);
    DECLARE_FUNCTION(execSetUserState);
    DECLARE_FUNCTION(execShutdownAndCleanup);
    DECLARE_FUNCTION(execGetCurrentUser);
    DECLARE_FUNCTION(execSetCurrentUser);
    DECLARE_FUNCTION(execIsIngame);
    DECLARE_FUNCTION(execIsPlaying);
    DECLARE_FUNCTION(execErrorLoggingIn);
    DECLARE_FUNCTION(execIsLoggedIn);
    DECLARE_FUNCTION(execStartLogin);
    DECLARE_FUNCTION(execIsPasscodeCorrect);
    DECLARE_FUNCTION(execHasPasscode);
    DECLARE_FUNCTION(execRebootToDashboard);
    DECLARE_FUNCTION(execIsAccountListUpdated);
    DECLARE_FUNCTION(execGetAccountName);
    DECLARE_FUNCTION(execGetNumberOfAccounts);
    DECLARE_FUNCTION(execIsLoggedInTwice);
    DECLARE_FUNCTION(execIsNetCableIn);
    DECLARE_CLASS(UXboxLiveManager,UObject,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UXboxLiveManager)
};


class ENGINE_API UMatchMakingManager : public UObject
{
public:
    FStringNoInit FailureMessages[106];
    DECLARE_FUNCTION(execPSX2McCheckPort);
    DECLARE_FUNCTION(execPSX2DNASProgress);
    DECLARE_FUNCTION(execPSX2DNASAuthenticate);
    DECLARE_FUNCTION(execPSX2DNASExit);
    DECLARE_FUNCTION(execPSX2DNASInit);
    DECLARE_FUNCTION(execPSX2NetCtlGetStatus);
    DECLARE_FUNCTION(execPSX2NetCtlDown);
    DECLARE_FUNCTION(execPSX2NetCtlUp);
    DECLARE_FUNCTION(execPSX2NetCtlBind);
    DECLARE_FUNCTION(execPSX2NetCtlExit);
    DECLARE_FUNCTION(execPSX2NetCtlInit);
    DECLARE_FUNCTION(execPSX2NetCnfSelectCombination);
    DECLARE_FUNCTION(execPSX2NetCnfGetDefault);
    DECLARE_FUNCTION(execPSX2NetCnfGetCombination);
    DECLARE_FUNCTION(execPSX2NetCnfGetCombinationList);
    DECLARE_FUNCTION(execPSX2NetCnfExit);
    DECLARE_FUNCTION(execPSX2NetCnfInit);
    DECLARE_FUNCTION(execPSX2NetCnfGetResult);
    DECLARE_FUNCTION(execPSX2NetCnfGetState);
    DECLARE_FUNCTION(execPSX2SwitchToOfflineMode);
    DECLARE_FUNCTION(execPSX2SwitchToOnlineMode);
    DECLARE_FUNCTION(execIsMyGameServerStillRegistered);
    DECLARE_FUNCTION(execUnregisterMyGameServer);
    DECLARE_FUNCTION(execIsMatchFinishedAcknowledged);
    DECLARE_FUNCTION(execMatchFinished);
    DECLARE_FUNCTION(execIsStartMatchAcknowledged);
    DECLARE_FUNCTION(execStartMatch);
    DECLARE_FUNCTION(execIsMyGameServerUpdated);
    DECLARE_FUNCTION(execUpdateMyGameServer);
    DECLARE_FUNCTION(execAllPlayerConnectedToMyGameServer);
    DECLARE_FUNCTION(execIsMyGameServerRegistered);
    DECLARE_FUNCTION(execRegisterMyGameServer);
    DECLARE_FUNCTION(execIsConnectionLostWithGS);
    DECLARE_FUNCTION(execLeaveGameServer);
    DECLARE_FUNCTION(execIFinishMatch);
    DECLARE_FUNCTION(execIStartMatch);
    DECLARE_FUNCTION(execIsMatchStartedByGameServer);
    DECLARE_FUNCTION(execIsJoinGameServerAcknowledged);
    DECLARE_FUNCTION(execJoinGameServer);
    DECLARE_FUNCTION(execIsGameServerAdditionalInfoArrived);
    DECLARE_FUNCTION(execRequestGameServerAdditionalInfo);
    DECLARE_FUNCTION(execIsGameServerRefreshed);
    DECLARE_FUNCTION(execRefreshGameServer);
    DECLARE_FUNCTION(execAllGameServer);
    DECLARE_FUNCTION(execIsPlayerAccountModified);
    DECLARE_FUNCTION(execModifyPlayerAccount);
    DECLARE_FUNCTION(execIsGameServerListComplete);
    DECLARE_FUNCTION(execRequestGameServerList);
    DECLARE_FUNCTION(execLogout);
    DECLARE_FUNCTION(execLogin);
    DECLARE_FUNCTION(execIsAccountValidityChecked);
    DECLARE_FUNCTION(execCheckAccountValidity);
    DECLARE_FUNCTION(execIsPlayerAccountCreated);
    DECLARE_FUNCTION(execCreatePlayerAccount);
    DECLARE_CLASS(UMatchMakingManager,UObject,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMatchMakingManager)
};


class ENGINE_API UVideoPlayer : public UObject
{
public:
    DECLARE_FUNCTION(execGetStatus);
    DECLARE_FUNCTION(execSetSoundTrack);
    DECLARE_FUNCTION(execSetSoundVolume);
    DECLARE_FUNCTION(execResume);
    DECLARE_FUNCTION(execPause);
    DECLARE_FUNCTION(execStop);
    DECLARE_FUNCTION(execPlay);
    DECLARE_FUNCTION(execOpen);
    DECLARE_CLASS(UVideoPlayer,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UVideoPlayer)
};

enum EOutputBlending
{
    OB_Normal               =0,
    OB_Masked               =1,
    OB_Modulate             =2,
    OB_Translucent          =3,
    OB_Invisible            =4,
    OB_AlphaBlend           =5,
    OB_Darken               =6,
    OB_Brighten             =7,
    OB_AddWhiteFog          =8,
    OB_MAX                  =9,
};

class ENGINE_API UShader : public URenderedMaterial
{
public:
    class UMaterial* Diffuse;
    class UMaterial* Opacity;
    class UMaterial* Specular;
    class UMaterial* SpecularityMask;
    class UMaterial* SelfIllumination;
    class UMaterial* SelfIlluminationMask;
    class UMaterial* Detail;
    BYTE OutputBlending;
    BITFIELD TwoSided:1 GCC_PACK(4);
    BITFIELD Wireframe:1;
    BITFIELD ModulateStaticLighting2X:1;
    BITFIELD InvertOpacity:1;
    BITFIELD InvertSelfIllumMask:1;
    BITFIELD UseGlassImpact:1;
    DECLARE_CLASS(UShader,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UShader)
};


class ENGINE_API UParticleMaterial : public URenderedMaterial
{
public:
    INT ParticleBlending;
    INT BlendBetweenSubdivisions;
    INT RenderTwoSided;
    INT UseTFactor;
    class UBitmapMaterial* BitmapMaterial;
    BITFIELD IgnoreFog:1 GCC_PACK(4);
    DECLARE_CLASS(UParticleMaterial,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UParticleMaterial)
};


class ENGINE_API UConstantMaterial : public URenderedMaterial
{
public:
    DECLARE_CLASS(UConstantMaterial,URenderedMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UConstantMaterial)
};

enum EColorFadeType
{
    FC_Linear               =0,
    FC_Sinusoidal           =1,
    FC_MAX                  =2,
};

class ENGINE_API UFadeColor : public UConstantMaterial
{
public:
    FColor Color1;
    FColor Color2;
    FLOAT FadePeriod;
    FLOAT FadePhase;
    BYTE ColorFadeType;
    DECLARE_CLASS(UFadeColor,UConstantMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UFadeColor)
};


class ENGINE_API UConstantColor : public UConstantMaterial
{
public:
    FColor Color;
    DECLARE_CLASS(UConstantColor,UConstantMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UConstantColor)
};


class ENGINE_API UModifier : public UMaterial
{
public:
    class UMaterial* Material;
    DECLARE_CLASS(UModifier,UMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UModifier)
};

enum ESinusAmplitudeFade
{
    SinFade_None            =0,
    SinFade_Negative        =1,
    SinFade_Positive        =2,
    SinFade_Both            =3,
    SinFade_MAX             =4,
};

class ENGINE_API USinusModifier : public UModifier
{
public:
    BYTE LastFrameCount;
    FVector Amplitude;
    FVector WaveLenghtX;
    FVector WaveLenghtY;
    FVector WaveLenghtZ;
    FVector FreqOsci;
    BYTE AmplitudeFadeX;
    FVector RndAmplitude;
    FLOAT RndAmpSpeed;
    FLOAT RndTimeVar;
    FLOAT RndTimeSpeed;
    FLOAT CurrentTime;
    FLOAT CurTimeSpeed;
    FLOAT CurAmplitude;
    FLOAT CurAmpSpeed;
    DECLARE_CLASS(USinusModifier,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USinusModifier)
};

enum EFrameBufferBlending
{
    FB_Overwrite            =0,
    FB_Modulate             =1,
    FB_AlphaBlend           =2,
    FB_AlphaModulate_MightNotFogCorrectly=3,
    FB_Translucent          =4,
    FB_Darken               =5,
    FB_Brighten             =6,
    FB_Invisible            =7,
    FB_MAX                  =8,
};

class ENGINE_API UFinalBlend : public UModifier
{
public:
    BYTE FrameBufferBlending;
    BITFIELD ZWrite:1 GCC_PACK(4);
    BITFIELD ZTest:1;
    BITFIELD AlphaTest:1;
    BITFIELD TwoSided:1;
    BITFIELD IgnoreFog:1;
    BYTE AlphaRef GCC_PACK(4);
    DECLARE_CLASS(UFinalBlend,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UFinalBlend)
};

enum ETexCoordCount
{
    TCN_2DCoords            =0,
    TCN_3DCoords            =1,
    TCN_4DCoords            =2,
    TCN_MAX                 =3,
};
enum ETexCoordSrc
{
    TCS_Stream0             =0,
    TCS_Stream1             =1,
    TCS_Stream2             =2,
    TCS_Stream3             =3,
    TCS_Stream4             =4,
    TCS_Stream5             =5,
    TCS_Stream6             =6,
    TCS_Stream7             =7,
    TCS_WorldCoords         =8,
    TCS_CameraCoords        =9,
    TCS_WorldEnvMapCoords   =10,
    TCS_CameraEnvMapCoords  =11,
    TCS_ProjectorCoords     =12,
    TCS_NoChange            =13,
    TCS_MAX                 =14,
};

class ENGINE_API UTexModifier : public UModifier
{
public:
    BYTE TexCoordSource;
    BYTE TexCoordCount;
    BYTE LastFrameCount;
    BITFIELD TexCoordProjected:1 GCC_PACK(4);
    DECLARE_CLASS(UTexModifier,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexModifier)
};


class ENGINE_API UTexMatrix : public UTexModifier
{
public:
    FMatrix Matrix;
    DECLARE_CLASS(UTexMatrix,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexMatrix)
};

enum ETexEnvMapType
{
    EM_WorldSpace           =0,
    EM_CameraSpace          =1,
    EM_MAX                  =2,
};

class ENGINE_API UTexEnvMap : public UTexModifier
{
public:
    BYTE EnvMapType;
    DECLARE_CLASS(UTexEnvMap,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexEnvMap)
};

enum ETexOscillationType
{
    OT_Pan                  =0,
    OT_Stretch              =1,
    OT_MAX                  =2,
};

class ENGINE_API UTexOscillator : public UTexModifier
{
public:
    FMatrix M;
    FLOAT UOscillationRate;
    FLOAT VOscillationRate;
    FLOAT UOscillationPhase;
    FLOAT VOscillationPhase;
    FLOAT UOscillationAmplitude;
    FLOAT VOscillationAmplitude;
    FLOAT UCenter;
    FLOAT VCenter;
    BYTE UOscillationType;
    BYTE VOscillationType;
    FLOAT CurPosU;
    FLOAT CurPosV;
    DECLARE_CLASS(UTexOscillator,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexOscillator)
};


class ENGINE_API UTexRotator : public UTexModifier
{
public:
    FMatrix M;
    FRotator Rotation;
    BITFIELD ConstantRotation:1 GCC_PACK(4);
    FLOAT URotCenter GCC_PACK(4);
    FLOAT VRotCenter;
    FRotator CurrentRotation;
    DECLARE_CLASS(UTexRotator,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexRotator)
};


class ENGINE_API UTexScaler : public UTexModifier
{
public:
    FMatrix M;
    FLOAT UScale;
    FLOAT VScale;
    FLOAT UOffset;
    FLOAT VOffset;
    DECLARE_CLASS(UTexScaler,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexScaler)
};


class ENGINE_API UTexPanner : public UTexModifier
{
public:
    FMatrix M;
    FRotator PanDirection;
    FLOAT PanRate;
    FLOAT CurPosU;
    FLOAT CurPosV;
    DECLARE_CLASS(UTexPanner,UTexModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UTexPanner)
};


class ENGINE_API UColorModifier : public UModifier
{
public:
    FColor Color;
    BITFIELD RenderTwoSided:1 GCC_PACK(4);
    BITFIELD AlphaBlend:1;
    DECLARE_CLASS(UColorModifier,UModifier,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UColorModifier)
};

enum EAlphaOperation
{
    AO_Use_Mask             =0,
    AO_Multiply             =1,
    AO_Add                  =2,
    AO_Use_Alpha_From_Material1=3,
    AO_Use_Alpha_From_Material2=4,
    AO_MAX                  =5,
};
enum EColorOperation
{
    CO_Use_Color_From_Material1=0,
    CO_Use_Color_From_Material2=1,
    CO_Multiply             =2,
    CO_Add                  =3,
    CO_Subtract             =4,
    CO_AlphaBlend_With_Mask =5,
    CO_Add_With_Mask_Modulation=6,
    CO_ProjDarken           =7,
    CO_MAX                  =8,
};

class ENGINE_API UCombiner : public UMaterial
{
public:
    BYTE CombineOperation;
    BYTE AlphaOperation;
    class UMaterial* Material1;
    class UMaterial* Material2;
    class UMaterial* Mask;
    BITFIELD InvertMask:1 GCC_PACK(4);
    BITFIELD Modulate2X:1;
    DECLARE_CLASS(UCombiner,UMaterial,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCombiner)
};

enum EParticleEffectAxis
{
    PTEA_NegativeX          =0,
    PTEA_PositiveZ          =1,
    PTEA_MAX                =2,
};
enum EParticleStartLocationShape
{
    PTLS_Box                =0,
    PTLS_Sphere             =1,
    PTLS_MAX                =2,
};
enum EParticleVelocityDirection
{
    PTVD_None               =0,
    PTVD_StartPositionAndOwner=1,
    PTVD_OwnerAndStartPosition=2,
    PTVD_MAX                =3,
};
enum EParticleRotationSource
{
    PTRS_None               =0,
    PTRS_Actor              =1,
    PTRS_Offset             =2,
    PTRS_Normal             =3,
    PTRS_MAX                =4,
};
enum EParticleCoordinateSystem
{
    PTCS_Independent        =0,
    PTCS_Relative           =1,
    PTCS_Absolute           =2,
    PTCS_MAX                =3,
};
enum EParticleDrawStyle
{
    PTDS_Regular            =0,
    PTDS_AlphaBlend         =1,
    PTDS_Modulated          =2,
    PTDS_Translucent        =3,
    PTDS_AlphaModulate_MightNotFogCorrectly=4,
    PTDS_Darken             =5,
    PTDS_Brighten           =6,
    PTDS_Masked             =7,
    PTDS_MAX                =8,
};
enum EBlendMode
{
    BM_MODULATE             =0,
    BM_MODULATE2X           =1,
    BM_MODULATE4X           =2,
    BM_ADD                  =3,
    BM_ADDSIGNED            =4,
    BM_ADDSIGNED2X          =5,
    BM_SUBTRACT             =6,
    BM_ADDSMOOTH            =7,
    BM_BLENDDIFFUSEALPHA    =8,
    BM_BLENDTEXTUREALPHA    =9,
    BM_BLENDFACTORALPHA     =10,
    BM_BLENDTEXTUREALPHAPM  =11,
    BM_BLENDCURRENTALPHA    =12,
    BM_PREMODULATE          =13,
    BM_MODULATEALPHA_ADDCOLOR=14,
    BM_MODULATEINVALPHA_ADDCOLOR=15,
    BM_MODULATEINVCOLOR_ADDALPHA=16,
    BM_HACK                 =17,
    BM_MAX                  =18,
};

class ENGINE_API UParticleEmitter : public UObject
{
public:
    FVector Acceleration;
    BITFIELD UseCollision:1 GCC_PACK(4);
    BITFIELD UseCollisionPlanes:1;
    BITFIELD UseMaxCollisions:1;
    BITFIELD UseSpawnedVelocityScale:1;
    BITFIELD UseColorScale:1;
    BITFIELD FadeOut:1;
    BITFIELD FadeIn:1;
    BITFIELD ResetAfterChange:1;
    BITFIELD RespawnDeadParticles:1;
    BITFIELD AutoDestroy:1;
    BITFIELD AutoReset:1;
    BITFIELD Disabled:1;
    BITFIELD DisableFogging:1;
    BITFIELD SpinParticles:1;
    BITFIELD DampRotation:1;
    BITFIELD UseSizeScale:1;
    BITFIELD UseRegularSizeScale:1;
    BITFIELD UniformSize:1;
    BITFIELD AutomaticInitialSpawning:1;
    BITFIELD BlendBetweenSubdivisions:1;
    BITFIELD UseSubdivisionScale:1;
    BITFIELD UseRandomSubdivision:1;
    BITFIELD NoSynchroAnim:1;
    BITFIELD OnceTextureAnim:1;
    BITFIELD SymmetryU:1;
    BITFIELD SymmetryV:1;
    BITFIELD RandomSymmetryU:1;
    BITFIELD RandomSymmetryV:1;
    BITFIELD Initialized:1;
    BITFIELD Inactive:1;
    BITFIELD RealDisableFogging:1;
    BITFIELD AllParticlesDead:1;
    BITFIELD WarmedUp:1;
    FVector ExtentMultiplier GCC_PACK(4);
    FRangeVector DampingFactorRange;
    TArrayNoInit<FPlane> CollisionPlanes;
    FRange MaxCollisions;
    INT SpawnFromOtherEmitter;
    INT SpawnAmount;
    FRangeVector SpawnedVelocityScaleRange;
    TArrayNoInit<FParticleColorScale> ColorScale;
    FLOAT ColorScaleRepeats;
    FPlane FadeOutFactor;
    FLOAT FadeOutStartTime;
    FPlane FadeInFactor;
    FLOAT FadeInEndTime;
    BYTE CoordinateSystem;
    INT MaxParticles;
    BYTE EffectAxis;
    FRange AutoResetTimeRange;
    FStringNoInit Name;
    FVector StartLocationOffset;
    FRangeVector StartLocationRange;
    INT AddLocationFromOtherEmitter;
    BYTE StartLocationShape;
    FRange SphereRadiusRange;
    FRange StartMassRange;
    BYTE UseRotationFrom;
    FRotator RotationOffset;
    FVector SpinCCWorCW;
    FRangeVector SpinsPerSecondRange;
    FRangeVector StartSpinRange;
    FRangeVector RotationDampingFactorRange;
    FVector RotationNormal;
    TArrayNoInit<FParticleTimeScale> SizeScale;
    FLOAT SizeScaleRepeats;
    FRangeVector StartSizeRange;
    FLOAT CenterU;
    FLOAT CenterV;
    FLOAT ParticlesPerSecond;
    FLOAT InitialParticlesPerSecond;
    BYTE DrawStyle;
    class UTexture* Texture;
    INT TextureUSubdivisions;
    INT TextureVSubdivisions;
    TArrayNoInit<FLOAT> SubdivisionScale;
    INT SubdivisionStart;
    INT SubdivisionEnd;
    FLOAT SecondsBeforeInactive;
    FLOAT MinSquaredVelocity;
    FRange InitialTimeRange;
    FRange LifetimeRange;
    FRange InitialDelayRange;
    FRangeVector StartVelocityRange;
    FVector MaxAbsVelocity;
    FRangeVector VelocityLossRange;
    INT AddVelocityFromOtherEmitter;
    BYTE GetVelocityDirectionFrom;
    FLOAT WarmupTicksPerSecond;
    FLOAT RelativeWarmupTime;
    class AEmitter* Owner;
    FLOAT InactiveTime;
    TArrayNoInit<FParticle> Particles;
    INT ParticleIndex;
    INT ActiveParticles;
    FLOAT PPSFraction;
    FVector RealExtentMultiplier;
    INT OtherIndex;
    FLOAT InitialDelay;
    FVector GlobalOffset;
    FLOAT TimeTillReset;
    INT PS2Data;
    class UTexture* CurAnimTexture;
    FLOAT CurAnimTime;
    INT CurLastUpdateTime[2];
    DECLARE_FUNCTION(execSetMaxParticles);
    DECLARE_FUNCTION(execSpawnParticle);
    DECLARE_CLASS(UParticleEmitter,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UParticleEmitter)
};

enum EParticleDirectionUsage
{
    PTDU_View               =0,
    PTDU_MoveAndViewUp      =1,
    PTDU_MoveAndViewRight   =2,
    PTDU_MoveAndViewForward =3,
    PTDU_Normal             =4,
    PTDU_ViewAndNormalUp    =5,
    PTDU_ViewAndNormalRight =6,
    PTDU_MoveAndNormalUp    =7,
    PTDU_MoveAndNormalRight =8,
    PTDU_MAX                =9,
};

class ENGINE_API USpriteEmitter : public UParticleEmitter
{
public:
    BYTE UseDirectionAs;
    FVector ProjectionNormal;
    FVector RealProjectionNormal;
    DECLARE_CLASS(USpriteEmitter,UParticleEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USpriteEmitter)
};


class ENGINE_API USparkEmitter : public UParticleEmitter
{
public:
    FRange LineSegmentsRange;
    FRange TimeBeforeVisibleRange;
    FRange TimeBetweenSegmentsRange;
    TArrayNoInit<FParticleSparkData> SparkData;
    class UVertexBuffer* VertexBuffer;
    class UIndexBuffer* IndexBuffer;
    INT NumSegments;
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
    DECLARE_CLASS(USparkEmitter,UParticleEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(USparkEmitter)
};

enum EScaleAxis
{
    ScaleAxisNone           =0,
    ScaleAxisX              =1,
    ScaleAxisY              =2,
    ScaleAxisXY             =3,
    ScaleAxisZ              =4,
    ScaleAxisXZ             =5,
    ScaleAxisYZ             =6,
    ScaleAxisXYZ            =7,
};

class ENGINE_API UMeshEmitter : public UParticleEmitter
{
public:
    class UStaticMesh* StaticMesh;
    BITFIELD UseMeshBlendMode:1 GCC_PACK(4);
    BITFIELD RenderTwoSided:1;
    BYTE ScaleAxis GCC_PACK(4);
    FVector MeshExtent;
    DECLARE_CLASS(UMeshEmitter,UParticleEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UMeshEmitter)
};

enum EBeamEndPointType
{
    PTEP_Velocity           =0,
    PTEP_Distance           =1,
    PTEP_Offset             =2,
    PTEP_Actor              =3,
    PTEP_TraceOffset        =4,
    PTEP_MAX                =5,
};

class ENGINE_API UBeamEmitter : public UParticleEmitter
{
public:
    FRange BeamDistanceRange;
    TArrayNoInit<FParticleBeamEndPoint> BeamEndPoints;
    BYTE DetermineEndPointBy;
    FLOAT BeamTextureUScale;
    FLOAT BeamTextureVScale;
    INT RotatingSheets;
    FRangeVector LowFrequencyNoiseRange;
    INT LowFrequencyPoints;
    FRangeVector HighFrequencyNoiseRange;
    INT HighFrequencyPoints;
    TArrayNoInit<FParticleBeamScale> LFScaleFactors;
    TArrayNoInit<FParticleBeamScale> HFScaleFactors;
    FLOAT LFScaleRepeats;
    FLOAT HFScaleRepeats;
    BITFIELD UseHighFrequencyScale:1 GCC_PACK(4);
    BITFIELD UseLowFrequencyScale:1;
    BITFIELD NoiseDeterminesEndPoint:1;
    BITFIELD UseBranching:1;
    FRange BranchProbability GCC_PACK(4);
    INT BranchEmitter;
    FRange BranchSpawnAmountRange;
    BITFIELD LinkupLifetime:1 GCC_PACK(4);
    INT SheetsUsed GCC_PACK(4);
    INT VerticesPerParticle;
    INT IndicesPerParticle;
    INT PrimitivesPerParticle;
    FLOAT BeamValueSum;
    TArrayNoInit<FParticleBeamData> HFPoints;
    TArrayNoInit<FVector> LFPoints;
    TArrayNoInit<class AActor*> HitActors;
    DECLARE_CLASS(UBeamEmitter,UParticleEmitter,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UBeamEmitter)
};

enum EInputKey
{
    IK_None                 =0,
    IK_LeftMouse            =1,
    IK_RightMouse           =2,
    IK_Cancel               =3,
    IK_MiddleMouse          =4,
    IK_Unknown05            =5,
    IK_Unknown06            =6,
    IK_Unknown07            =7,
    IK_Backspace            =8,
    IK_Tab                  =9,
    IK_Unknown0A            =10,
    IK_Unknown0B            =11,
    IK_Unknown0C            =12,
    IK_Enter                =13,
    IK_Unknown0E            =14,
    IK_Unknown0F            =15,
    IK_Shift                =16,
    IK_Ctrl                 =17,
    IK_Alt                  =18,
    IK_Pause                =19,
    IK_CapsLock             =20,
    IK_Unknown15            =21,
    IK_Unknown16            =22,
    IK_Unknown17            =23,
    IK_Unknown18            =24,
    IK_Unknown19            =25,
    IK_Unknown1A            =26,
    IK_Escape               =27,
    IK_Unknown1C            =28,
    IK_Unknown1D            =29,
    IK_Unknown1E            =30,
    IK_Unknown1F            =31,
    IK_Space                =32,
    IK_PageUp               =33,
    IK_PageDown             =34,
    IK_End                  =35,
    IK_Home                 =36,
    IK_Left                 =37,
    IK_Up                   =38,
    IK_Right                =39,
    IK_Down                 =40,
    IK_Select               =41,
    IK_Print                =42,
    IK_Execute              =43,
    IK_PrintScrn            =44,
    IK_Insert               =45,
    IK_Delete               =46,
    IK_Help                 =47,
    IK_0                    =48,
    IK_1                    =49,
    IK_2                    =50,
    IK_3                    =51,
    IK_4                    =52,
    IK_5                    =53,
    IK_6                    =54,
    IK_7                    =55,
    IK_8                    =56,
    IK_9                    =57,
    IK_Unknown3A            =58,
    IK_Unknown3B            =59,
    IK_LesserThan           =60,
    IK_Unknown3D            =61,
    IK_Unknown3E            =62,
    IK_Unknown3F            =63,
    IK_Unknown40            =64,
    IK_A                    =65,
    IK_B                    =66,
    IK_C                    =67,
    IK_D                    =68,
    IK_E                    =69,
    IK_F                    =70,
    IK_G                    =71,
    IK_H                    =72,
    IK_I                    =73,
    IK_J                    =74,
    IK_K                    =75,
    IK_L                    =76,
    IK_M                    =77,
    IK_N                    =78,
    IK_O                    =79,
    IK_P                    =80,
    IK_Q                    =81,
    IK_R                    =82,
    IK_S                    =83,
    IK_T                    =84,
    IK_U                    =85,
    IK_V                    =86,
    IK_W                    =87,
    IK_X                    =88,
    IK_Y                    =89,
    IK_Z                    =90,
    IK_Unknown5B            =91,
    IK_Unknown5C            =92,
    IK_Unknown5D            =93,
    IK_Unknown5E            =94,
    IK_Unknown5F            =95,
    IK_NumPad0              =96,
    IK_NumPad1              =97,
    IK_NumPad2              =98,
    IK_NumPad3              =99,
    IK_NumPad4              =100,
    IK_NumPad5              =101,
    IK_NumPad6              =102,
    IK_NumPad7              =103,
    IK_NumPad8              =104,
    IK_NumPad9              =105,
    IK_GreyStar             =106,
    IK_GreyPlus             =107,
    IK_Separator            =108,
    IK_GreyMinus            =109,
    IK_NumPadPeriod         =110,
    IK_GreySlash            =111,
    IK_F1                   =112,
    IK_F2                   =113,
    IK_F3                   =114,
    IK_F4                   =115,
    IK_F5                   =116,
    IK_F6                   =117,
    IK_F7                   =118,
    IK_F8                   =119,
    IK_F9                   =120,
    IK_F10                  =121,
    IK_F11                  =122,
    IK_F12                  =123,
    IK_F13                  =124,
    IK_F14                  =125,
    IK_F15                  =126,
    IK_F16                  =127,
    IK_F17                  =128,
    IK_F18                  =129,
    IK_F19                  =130,
    IK_F20                  =131,
    IK_F21                  =132,
    IK_F22                  =133,
    IK_F23                  =134,
    IK_F24                  =135,
    IK_Unknown88            =136,
    IK_Unknown89            =137,
    IK_Unknown8A            =138,
    IK_Unknown8B            =139,
    IK_Unknown8C            =140,
    IK_Unknown8D            =141,
    IK_Unknown8E            =142,
    IK_Unknown8F            =143,
    IK_NumLock              =144,
    IK_ScrollLock           =145,
    IK_Unknown92            =146,
    IK_Unknown93            =147,
    IK_Unknown94            =148,
    IK_Unknown95            =149,
    IK_Unknown96            =150,
    IK_Unknown97            =151,
    IK_Unknown98            =152,
    IK_Unknown99            =153,
    IK_Unknown9A            =154,
    IK_Unknown9B            =155,
    IK_Unknown9C            =156,
    IK_Unknown9D            =157,
    IK_Unknown9E            =158,
    IK_Unknown9F            =159,
    IK_LShift               =160,
    IK_RShift               =161,
    IK_LControl             =162,
    IK_RControl             =163,
    IK_LAlt                 =164,
    IK_RAlt                 =165,
    IK_UnknownA6            =166,
    IK_UnknownA7            =167,
    IK_UnknownA8            =168,
    IK_UnknownA9            =169,
    IK_UnknownAA            =170,
    IK_UnknownAB            =171,
    IK_UnknownAC            =172,
    IK_UnknownAD            =173,
    IK_UnknownAE            =174,
    IK_UnknownAF            =175,
    IK_UnknownB0            =176,
    IK_UnknownB1            =177,
    IK_UnknownB2            =178,
    IK_UnknownB3            =179,
    IK_UnknownB4            =180,
    IK_UnknownB5            =181,
    IK_UnknownB6            =182,
    IK_UnknownB7            =183,
    IK_UnknownB8            =184,
    IK_UnknownB9            =185,
    IK_Semicolon            =186,
    IK_Equals               =187,
    IK_Comma                =188,
    IK_Minus                =189,
    IK_Period               =190,
    IK_Slash                =191,
    IK_Tilde                =192,
    IK_UnknownC1            =193,
    IK_UnknownC2            =194,
    IK_UnknownC3            =195,
    IK_UnknownC4            =196,
    IK_UnknownC5            =197,
    IK_UnknownC6            =198,
    IK_UnknownC7            =199,
    IK_Joy1                 =200,
    IK_Joy2                 =201,
    IK_Joy3                 =202,
    IK_Joy4                 =203,
    IK_Joy5                 =204,
    IK_Joy6                 =205,
    IK_Joy7                 =206,
    IK_Joy8                 =207,
    IK_Joy9                 =208,
    IK_Joy10                =209,
    IK_Joy11                =210,
    IK_Joy12                =211,
    IK_Joy13                =212,
    IK_Joy14                =213,
    IK_Joy15                =214,
    IK_Joy16                =215,
    IK_UnknownD8            =216,
    IK_UnknownD9            =217,
    IK_UnknownDA            =218,
    IK_LeftBracket          =219,
    IK_Backslash            =220,
    IK_RightBracket         =221,
    IK_SingleQuote          =222,
    IK_UnknownDF            =223,
    IK_JoyX                 =224,
    IK_JoyY                 =225,
    IK_UnknownE2            =226,
    IK_JoyR                 =227,
    IK_MouseX               =228,
    IK_MouseY               =229,
    IK_MouseZ               =230,
    IK_MouseW               =231,
    IK_JoyU                 =232,
    IK_JoyV                 =233,
    IK_JoyZ                 =234,
    IK_UnknownEB            =235,
    IK_MouseWheelUp         =236,
    IK_MouseWheelDown       =237,
    IK_Unknown10E           =238,
    UK_Unknown10F           =239,
    IK_UnknownF0            =240,
    IK_UnknownF1            =241,
    IK_UnknownF2            =242,
    IK_UnknownF3            =243,
    IK_UnknownF4            =244,
    IK_UnknownF5            =245,
    IK_Attn                 =246,
    IK_CrSel                =247,
    IK_ExSel                =248,
    IK_ErEof                =249,
    IK_Play                 =250,
    IK_Zoom                 =251,
    IK_NoName               =252,
    IK_PA1                  =253,
    IK_OEMClear             =254,
    IK_MAX                  =255,
};
enum EInputAction
{
    IST_None                =0,
    IST_Press               =1,
    IST_Hold                =2,
    IST_Release             =3,
    IST_Axis                =4,
    IST_MAX                 =5,
};

class ENGINE_API UInteractions : public UObject
{
public:
    DECLARE_CLASS(UInteractions,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UInteractions)
};


struct UInteractionMaster_eventInputTimeOut_Parms
{
};
struct UInteractionMaster_eventSetFocusTo_Parms
{
    class UInteraction* Inter;
    class UPlayer* ViewportOwner;
};
struct UInteractionMaster_eventRemoveInteraction_Parms
{
    class UInteraction* RemoveMe;
};
struct UInteractionMaster_eventAddInteraction_Parms
{
    FString InteractionName;
    class UPlayer* AttachTo;
    class UInteraction* ReturnValue;
};
class ENGINE_API UInteractionMaster : public UInteractions
{
public:
    class UClient* Client;
    class UInteraction* BaseMenu;
    class UInteraction* Console;
    TArrayNoInit<class UInteraction*> GlobalInteractions;
    BITFIELD GlobalTimeOutArmed:1 GCC_PACK(4);
    FLOAT DelayOfGlobalInputInactivityBeforeTimeOut GCC_PACK(4);
    FLOAT TimeOfLastInput;
    DECLARE_FUNCTION(execTravel);
    void eventInputTimeOut()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_InputTimeOut),NULL);
    }
    void eventSetFocusTo(class UInteraction* Inter, class UPlayer* ViewportOwner)
    {
        UInteractionMaster_eventSetFocusTo_Parms Parms;
        Parms.Inter=Inter;
        Parms.ViewportOwner=ViewportOwner;
        ProcessEvent(FindFunctionChecked(ENGINE_SetFocusTo),&Parms);
    }
    void eventRemoveInteraction(class UInteraction* RemoveMe)
    {
        UInteractionMaster_eventRemoveInteraction_Parms Parms;
        Parms.RemoveMe=RemoveMe;
        ProcessEvent(FindFunctionChecked(ENGINE_RemoveInteraction),&Parms);
    }
    class UInteraction* eventAddInteraction(const FString& InteractionName, class UPlayer* AttachTo)
    {
        UInteractionMaster_eventAddInteraction_Parms Parms;
        Parms.ReturnValue=0;
        Parms.InteractionName=InteractionName;
        Parms.AttachTo=AttachTo;
        ProcessEvent(FindFunctionChecked(ENGINE_AddInteraction),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UInteractionMaster,UInteractions,0|CLASS_Transient,Engine)
    NO_DEFAULT_CONSTRUCTOR(UInteractionMaster)
};


struct UInteraction_eventTick_Parms
{
    FLOAT DeltaTime;
};
struct UInteraction_eventPostRender_Parms
{
    class UCanvas* Canvas;
};
struct UInteraction_eventPreRender_Parms
{
    class UCanvas* Canvas;
};
struct UInteraction_eventKeyEvent_Parms
{
    BYTE Key;
    BYTE Action;
    FLOAT Delta;
    BITFIELD ReturnValue;
};
struct UInteraction_eventKeyType_Parms
{
    BYTE Key;
    BITFIELD ReturnValue;
};
struct UInteraction_eventEndMap_Parms
{
};
struct UInteraction_eventMessage_Parms
{
    FString msg;
    FLOAT MsgLife;
};
struct UInteraction_eventInitialized_Parms
{
};
class ENGINE_API UInteraction : public UInteractions
{
public:
    BITFIELD bActive:1 GCC_PACK(4);
    BITFIELD bVisible:1;
    BITFIELD bRequiresTick:1;
    BITFIELD bNativeEvents:1;
    class UPlayer* ViewportOwner GCC_PACK(4);
    class UInteractionMaster* Master;
    DECLARE_FUNCTION(execScreenToWorld);
    DECLARE_FUNCTION(execWorldToScreen);
    DECLARE_FUNCTION(execConsoleCommand);
    DECLARE_FUNCTION(execInitialize);
    void eventTick(FLOAT DeltaTime)
    {
        UInteraction_eventTick_Parms Parms;
        if(IsProbing(NAME_Tick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(ENGINE_Tick),&Parms);
        }
    }
    void eventPostRender(class UCanvas* Canvas)
    {
        UInteraction_eventPostRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PostRender),&Parms);
    }
    void eventPreRender(class UCanvas* Canvas)
    {
        UInteraction_eventPreRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessEvent(FindFunctionChecked(ENGINE_PreRender),&Parms);
    }
    BITFIELD eventKeyEvent(BYTE& Key, BYTE& Action, FLOAT Delta)
    {
        UInteraction_eventKeyEvent_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Key=Key;
        Parms.Action=Action;
        Parms.Delta=Delta;
        ProcessEvent(FindFunctionChecked(ENGINE_KeyEvent),&Parms);
        Key=Parms.Key;
        Action=Parms.Action;
        return Parms.ReturnValue;
    }
    BITFIELD eventKeyType(BYTE& Key)
    {
        UInteraction_eventKeyType_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Key=Key;
        ProcessEvent(FindFunctionChecked(ENGINE_KeyType),&Parms);
        Key=Parms.Key;
        return Parms.ReturnValue;
    }
    void eventEndMap()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_EndMap),NULL);
    }
    void eventMessage(const FString& msg, FLOAT MsgLife)
    {
        UInteraction_eventMessage_Parms Parms;
        Parms.msg=msg;
        Parms.MsgLife=MsgLife;
        ProcessEvent(FindFunctionChecked(ENGINE_Message),&Parms);
    }
    void eventInitialized()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_Initialized),NULL);
    }
    DECLARE_CLASS(UInteraction,UInteractions,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UInteraction)
};


struct UBaseGUIController_eventGetMenuStackBackup_Parms
{
    FString ReturnValue;
};
struct UBaseGUIController_eventSetMenuStackBackup_Parms
{
    FString MenuStackAsText;
};
struct UBaseGUIController_eventSetRequiredGameResolution_Parms
{
    FString GameRes;
};
struct UBaseGUIController_eventNeedsMenuResolution_Parms
{
    BITFIELD ReturnValue;
};
struct UBaseGUIController_eventInitializeController_Parms
{
};
struct UBaseGUIController_eventCloseAll_Parms
{
    BITFIELD bCancel;
};
struct UBaseGUIController_eventCloseMenu_Parms
{
    BITFIELD bCanceled;
    FString Param1;
    FString Param2;
    BITFIELD ReturnValue;
};
struct UBaseGUIController_eventOnAdminReply_Parms
{
    FString Reply;
};
class ENGINE_API UBaseGUIController : public UInteraction
{
public:
    FScriptDelegate __OnAdminReply__Delegate;
    FString eventGetMenuStackBackup()
    {
        UBaseGUIController_eventGetMenuStackBackup_Parms Parms;
        ProcessEvent(FindFunctionChecked(ENGINE_GetMenuStackBackup),&Parms);
        return Parms.ReturnValue;
    }
    void eventSetMenuStackBackup(const FString& MenuStackAsText)
    {
        UBaseGUIController_eventSetMenuStackBackup_Parms Parms;
        Parms.MenuStackAsText=MenuStackAsText;
        ProcessEvent(FindFunctionChecked(ENGINE_SetMenuStackBackup),&Parms);
    }
    void eventSetRequiredGameResolution(const FString& GameRes)
    {
        UBaseGUIController_eventSetRequiredGameResolution_Parms Parms;
        Parms.GameRes=GameRes;
        ProcessEvent(FindFunctionChecked(ENGINE_SetRequiredGameResolution),&Parms);
    }
    BITFIELD eventNeedsMenuResolution()
    {
        UBaseGUIController_eventNeedsMenuResolution_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(ENGINE_NeedsMenuResolution),&Parms);
        return Parms.ReturnValue;
    }
    void eventInitializeController()
    {
        ProcessEvent(FindFunctionChecked(ENGINE_InitializeController),NULL);
    }
    void eventCloseAll(BITFIELD bCancel)
    {
        UBaseGUIController_eventCloseAll_Parms Parms;
        Parms.bCancel=bCancel;
        ProcessEvent(FindFunctionChecked(ENGINE_CloseAll),&Parms);
    }
    BITFIELD eventCloseMenu(BITFIELD bCanceled, const FString& Param1, const FString& Param2)
    {
        UBaseGUIController_eventCloseMenu_Parms Parms;
        Parms.ReturnValue=0;
        Parms.bCanceled=bCanceled;
        Parms.Param1=Param1;
        Parms.Param2=Param2;
        ProcessEvent(FindFunctionChecked(ENGINE_CloseMenu),&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnAdminReply(const FString& Reply)
    {
        UBaseGUIController_eventOnAdminReply_Parms Parms;
        Parms.Reply=Reply;
        ProcessDelegate(ENGINE_OnAdminReply,&__OnAdminReply__Delegate,&Parms);
    }
    DECLARE_CLASS(UBaseGUIController,UInteraction,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UBaseGUIController)
};

#define UCONST_MaxHistory 16

class ENGINE_API UConsole : public UInteraction
{
public:
    BYTE ConsoleKey;
    INT HistoryTop;
    INT HistoryBot;
    INT HistoryCur;
    FStringNoInit TypedStr;
    FStringNoInit History[16];
    BITFIELD bTyping:1 GCC_PACK(4);
    BITFIELD bSkipNextKey:1;
    DECLARE_CLASS(UConsole,UInteraction,0|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UConsole)
};


class ENGINE_API UForceFeedbackController : public UObject
{
public:
    DECLARE_FUNCTION(execStartEffect);
    DECLARE_FUNCTION(execEnableForceFeedback);
    DECLARE_FUNCTION(execIsForceFeedbackEnable);
    DECLARE_CLASS(UForceFeedbackController,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UForceFeedbackController)
};

#define UCONST_MAXBOOSTSPEED 1.0
#define UCONST_VIEWTURNBOOSTSPEED 1.0
#define UCONST_VIEWUPACCSPEED 3
#define UCONST_VIEWTURNACCSPEED 3

class ENGINE_API UPlayerInput : public UObject
{
public:
    BITFIELD bMaxMouseSmoothing:1 GCC_PACK(4);
    BITFIELD bInvertMouse:1;
    BITFIELD bWasForward:1;
    BITFIELD bWasBack:1;
    BITFIELD bWasLeft:1;
    BITFIELD bWasRight:1;
    BITFIELD bEdgeForward:1;
    BITFIELD bEdgeBack:1;
    BITFIELD bEdgeLeft:1;
    BITFIELD bEdgeRight:1;
    BITFIELD bForceCrouch:1;
    FLOAT MouseSensitivity GCC_PACK(4);
    FLOAT SmoothMouseX;
    FLOAT SmoothMouseY;
    FLOAT BorrowedMouseX;
    FLOAT BorrowedMouseY;
    FLOAT MouseSmoothThreshold;
    FLOAT MouseZeroTime;
    FLOAT DoubleClickTimer;
    FLOAT DoubleClickTime;
    BITFIELD bUseSnapTimer:1 GCC_PACK(4);
    BITFIELD bDuckCheck:1;
    INT iDuckMem GCC_PACK(4);
    FLOAT fSnaptimer;
    FLOAT fInputRange;
    FLOAT fPctWalkRun;
    FLOAT ViewTurnAcc;
    FLOAT ViewTurnBoost;
    FLOAT ViewUpAcc;
    FLOAT WeaponViewTurnAcc;
    INT iMemaTurnSign;
    INT iMemaLookUpSign;
    TArrayNoInit<FLOAT> MoveRange;
    TArrayNoInit<FLOAT> TurnRange;
    FLOAT CurrentInput;
    INT CurrentInputAngle;
    FLOAT CurrentTurnInput;
    INT CurrentTurnInputAngle;
    BITFIELD bCheckInputRanges:1 GCC_PACK(4);
    DECLARE_CLASS(UPlayerInput,UObject,0|CLASS_Transient|CLASS_Config,Engine)
    NO_DEFAULT_CONSTRUCTOR(UPlayerInput)
};


class ENGINE_API UCheatManager : public UObject
{
public:
    DECLARE_CLASS(UCheatManager,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UCheatManager)
};


class ENGINE_API ULevelSummary : public UObject
{
public:
    FStringNoInit Title;
    FStringNoInit Author;
    INT IdealPlayerCount;
    FStringNoInit LevelEnterText;
    DECLARE_CLASS(ULevelSummary,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(ULevelSummary)
};


class ENGINE_API UReachSpec : public UObject
{
public:
    INT Distance;
    class ANavigationPoint* Start;
    class ANavigationPoint* End;
    INT CollisionRadius;
    INT CollisionHeight;
    INT reachFlags;
    INT MaxLandingVelocity;
    BYTE bPruned;
    DECLARE_CLASS(UReachSpec,UObject,0,Engine)
    NO_DEFAULT_CONSTRUCTOR(UReachSpec)
};

#endif

AUTOGENERATE_FUNCTION(AActor,-1,execSaveAtCheckpoint);
AUTOGENERATE_FUNCTION(AActor,552,execMultiply_ColorFloat);
AUTOGENERATE_FUNCTION(AActor,551,execAdd_ColorColor);
AUTOGENERATE_FUNCTION(AActor,550,execMultiply_FloatColor);
AUTOGENERATE_FUNCTION(AActor,549,execSubtract_ColorColor);
AUTOGENERATE_FUNCTION(AActor,333,execActorInIterationCategory);
AUTOGENERATE_FUNCTION(AActor,321,execCollidingActors);
AUTOGENERATE_FUNCTION(AActor,-1,execVisibleDamageableActors);
AUTOGENERATE_FUNCTION(AActor,312,execVisibleCollidingActors);
AUTOGENERATE_FUNCTION(AActor,311,execVisibleActors);
AUTOGENERATE_FUNCTION(AActor,310,execRadiusActors);
AUTOGENERATE_FUNCTION(AActor,309,execTraceActors);
AUTOGENERATE_FUNCTION(AActor,307,execTouchingActors);
AUTOGENERATE_FUNCTION(AActor,306,execBasedActors);
AUTOGENERATE_FUNCTION(AActor,305,execChildActors);
AUTOGENERATE_FUNCTION(AActor,313,execDynamicActors);
AUTOGENERATE_FUNCTION(AActor,304,execAllActors);
AUTOGENERATE_FUNCTION(AActor,334,execMoveCacheEntry);
AUTOGENERATE_FUNCTION(AActor,335,execGetCacheEntry);
AUTOGENERATE_FUNCTION(AActor,336,execGetNextIntDesc);
AUTOGENERATE_FUNCTION(AActor,337,execGetNextInt);
AUTOGENERATE_FUNCTION(AActor,547,execGetURLMap);
AUTOGENERATE_FUNCTION(AActor,545,execGetNextSkin);
AUTOGENERATE_FUNCTION(AActor,539,execGetMapName);
AUTOGENERATE_FUNCTION(AActor,532,execPlayerCanSeeMe);
AUTOGENERATE_FUNCTION(AActor,512,execMakeNoise);
AUTOGENERATE_FUNCTION(AActor,338,execResumeAllSounds);
AUTOGENERATE_FUNCTION(AActor,339,execResumeMusic);
AUTOGENERATE_FUNCTION(AActor,-1,execKillAllSounds);
AUTOGENERATE_FUNCTION(AActor,340,execPauseAllSounds);
AUTOGENERATE_FUNCTION(AActor,341,execPauseMusic);
AUTOGENERATE_FUNCTION(AActor,342,execStopAllSounds);
AUTOGENERATE_FUNCTION(AActor,343,execStopActorSounds);
AUTOGENERATE_FUNCTION(AActor,344,execStopVoice);
AUTOGENERATE_FUNCTION(AActor,345,execStopMusic);
AUTOGENERATE_FUNCTION(AActor,265,execStopSound);
AUTOGENERATE_FUNCTION(AActor,346,execPlaySndDeathOno);
AUTOGENERATE_FUNCTION(AActor,347,execPlaySndPNJOno);
AUTOGENERATE_FUNCTION(AActor,348,execPlaySndXIIIStep);
AUTOGENERATE_FUNCTION(AActor,349,execPlaySndPNJStep);
AUTOGENERATE_FUNCTION(AActor,350,execPlayRolloffSound);
AUTOGENERATE_FUNCTION(AActor,351,execPlayMenu);
AUTOGENERATE_FUNCTION(AActor,352,execPlayStrAmb);
AUTOGENERATE_FUNCTION(AActor,353,execPlayVoice);
AUTOGENERATE_FUNCTION(AActor,354,execPlayStrVoice);
AUTOGENERATE_FUNCTION(AActor,356,execWaveHasPosition);
AUTOGENERATE_FUNCTION(AActor,357,execGetWaveDuration);
AUTOGENERATE_FUNCTION(AActor,358,execPlayMusic);
AUTOGENERATE_FUNCTION(AActor,264,execPlaySound);
AUTOGENERATE_FUNCTION(AActor,361,execSetVolume);
AUTOGENERATE_FUNCTION(AActor,362,execSetMusicSliderPos);
AUTOGENERATE_FUNCTION(AActor,-1,execSetSoundMode);
AUTOGENERATE_FUNCTION(AActor,363,execSetTimer2);
AUTOGENERATE_FUNCTION(AActor,280,execSetTimer);
AUTOGENERATE_FUNCTION(AActor,279,execDestroy);
AUTOGENERATE_FUNCTION(AActor,278,execSpawn);
AUTOGENERATE_FUNCTION(AActor,548,execFastTrace);
AUTOGENERATE_FUNCTION(AActor,364,execGetLastTraceBone);
AUTOGENERATE_FUNCTION(AActor,277,execTrace);
AUTOGENERATE_FUNCTION(AActor,-1,execPSX2BootstrapDemoGetGamePlayTimeout);
AUTOGENERATE_FUNCTION(AActor,3970,execSetPhysics);
AUTOGENERATE_FUNCTION(AActor,301,execFinishInterpolation);
AUTOGENERATE_FUNCTION(AActor,-1,execReplaceATextureByAnOther);
AUTOGENERATE_FUNCTION(AActor,389,execRefreshLighting);
AUTOGENERATE_FUNCTION(AActor,-1,execRefreshDisplaying);
AUTOGENERATE_FUNCTION(AActor,391,execRecomputeBoundingVolume);
AUTOGENERATE_FUNCTION(AActor,392,execCheckWasVisible);
AUTOGENERATE_FUNCTION(AActor,393,execGetCartoonLightDir);
AUTOGENERATE_FUNCTION(AActor,394,execGetRenderBoundingSphere);
AUTOGENERATE_FUNCTION(AActor,395,execAnimIsInGroup);
AUTOGENERATE_FUNCTION(AActor,396,execGetAnimParams);
AUTOGENERATE_FUNCTION(AActor,397,execSetBoneRotation);
AUTOGENERATE_FUNCTION(AActor,398,execSetBoneLocation);
AUTOGENERATE_FUNCTION(AActor,399,execSetBoneDirection);
AUTOGENERATE_FUNCTION(AActor,400,execSetBoneScalePerAxis);
AUTOGENERATE_FUNCTION(AActor,401,execSetBoneScale);
AUTOGENERATE_FUNCTION(AActor,402,execLockRootMotion);
AUTOGENERATE_FUNCTION(AActor,403,execDetachFromBone);
AUTOGENERATE_FUNCTION(AActor,404,execAttachToBone);
AUTOGENERATE_FUNCTION(AActor,405,execGetRootRotationDelta);
AUTOGENERATE_FUNCTION(AActor,406,execGetRootLocationDelta);
AUTOGENERATE_FUNCTION(AActor,407,execGetRootRotation);
AUTOGENERATE_FUNCTION(AActor,408,execGetRootLocation);
AUTOGENERATE_FUNCTION(AActor,409,execGetBoneRotation);
AUTOGENERATE_FUNCTION(AActor,410,execGetBoneCoords);
AUTOGENERATE_FUNCTION(AActor,411,execAnimBlendToAlpha);
AUTOGENERATE_FUNCTION(AActor,412,execAnimBlendParams);
AUTOGENERATE_FUNCTION(AActor,413,execLinkSkelAnim);
AUTOGENERATE_FUNCTION(AActor,414,execGetNotifyChannel);
AUTOGENERATE_FUNCTION(AActor,415,execEnableChannelNotify);
AUTOGENERATE_FUNCTION(AActor,416,execIsTweening);
AUTOGENERATE_FUNCTION(AActor,417,execStopAnimating);
AUTOGENERATE_FUNCTION(AActor,263,execHasAnim);
AUTOGENERATE_FUNCTION(AActor,261,execFinishAnim);
AUTOGENERATE_FUNCTION(AActor,282,execIsAnimating);
AUTOGENERATE_FUNCTION(AActor,294,execTweenAnim);
AUTOGENERATE_FUNCTION(AActor,260,execLoopAnim);
AUTOGENERATE_FUNCTION(AActor,259,execPlayAnim);
AUTOGENERATE_FUNCTION(AActor,-1,execResetInputs);
AUTOGENERATE_FUNCTION(AActor,-1,execIntersectWaterPlane);
AUTOGENERATE_FUNCTION(AActor,418,execGetMaterial);
AUTOGENERATE_FUNCTION(AActor,419,execGetBoundingBox);
AUTOGENERATE_FUNCTION(AActor,272,execSetOwner);
AUTOGENERATE_FUNCTION(AActor,298,execSetBase);
AUTOGENERATE_FUNCTION(AActor,3971,execAutonomousPhysics);
AUTOGENERATE_FUNCTION(AActor,3969,execMoveSmooth);
AUTOGENERATE_FUNCTION(AActor,420,execSetRelativeLocation);
AUTOGENERATE_FUNCTION(AActor,421,execSetRelativeRotation);
AUTOGENERATE_FUNCTION(AActor,299,execSetRotation);
AUTOGENERATE_FUNCTION(AActor,267,execSetLocation);
AUTOGENERATE_FUNCTION(AActor,266,execMove);
AUTOGENERATE_FUNCTION(AActor,422,execSetDrawType);
AUTOGENERATE_FUNCTION(AActor,423,execSetDrawScale3D);
AUTOGENERATE_FUNCTION(AActor,424,execSetDrawScale);
AUTOGENERATE_FUNCTION(AActor,283,execSetCollisionSize);
AUTOGENERATE_FUNCTION(AActor,262,execSetCollision);
AUTOGENERATE_FUNCTION(AActor,256,execSleep);
AUTOGENERATE_FUNCTION(AActor,233,execError);
AUTOGENERATE_FUNCTION(AActor,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(APawn,-1,execEyePosition);
AUTOGENERATE_FUNCTION(APawn,-1,execFindInventoryKind);
AUTOGENERATE_FUNCTION(APawn,-1,execFindInventoryType);
AUTOGENERATE_FUNCTION(APawn,-1,execFaceRotation);
AUTOGENERATE_FUNCTION(APawn,-1,execHeadYawControl);
AUTOGENERATE_FUNCTION(APawn,-1,execSpineYawControl);
AUTOGENERATE_FUNCTION(APawn,-1,execPressingFire);
AUTOGENERATE_FUNCTION(APawn,-1,execGetViewRotation);
AUTOGENERATE_FUNCTION(APawn,-1,execIsLocallyControlled);
AUTOGENERATE_FUNCTION(APawn,-1,execIsHumanControlled);
AUTOGENERATE_FUNCTION(APawn,-1,execIsPlayerPawn);
AUTOGENERATE_FUNCTION(APawn,-1,execCalcDrawOffset);
AUTOGENERATE_FUNCTION(APawn,-1,execSetWalking);
AUTOGENERATE_FUNCTION(APawn,-1,execRemovePawnFromList);
AUTOGENERATE_FUNCTION(APawn,-1,execAddPawnToList);
AUTOGENERATE_FUNCTION(AProjector,-1,execAbandonProjector);
AUTOGENERATE_FUNCTION(AProjector,-1,execDetachProjector);
AUTOGENERATE_FUNCTION(AProjector,-1,execAttachProjector);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execUpdateServerListeners);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetSetting);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetSetting);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execEnumerateFriends);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetListeners);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsUserMuted);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execResetVoiceNet);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execBootToDownloadManager);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execBootToUpdateXBE);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execHasFriendRequest);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execHasInvite);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execShouldRenderInvite);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsPlayerNameInGame);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetLevelInfo);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetPlayerVoiceStatus);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execInternalKick);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsHost);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsPlayerListUpdated);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsFriend);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetActivePlayer);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetActivePlayer);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSendFeedback);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsInSameSession);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsUpdatingFriends);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execRevokeGameInvite);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execDeclineGameInvite);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execAcceptGameInvite);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSendGameInvite);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSendFriendRequest);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execBlockFriendRequest);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execCancelFriendRequest);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execDeclineFriendRequest);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execAcceptFriendRequest);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetFriendGameName);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execRemoveFriend);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetActiveFriendTitle);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetActiveFriendName);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetActiveFriend);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetActiveFriend);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsFriendsListChanged);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execUpdateFriends);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetNumberOfFriends);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetFriend);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetFriendTitleAtIndex);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetFriendNameAtIndex);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetFriendAtIndex);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionSetMaxSkill);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionSetMinSkill);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionSetCycleLevels);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionSetFriendlyFire);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionSetReserved);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionSetPrivateSlots);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionSetPublicSlots);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionSetTimeLimit);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionSetFragLimit);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionSetLanguage);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionSetMapName);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionSetGameType);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionListen);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionReset);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionDelete);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionProcess);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionUpdate);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionIsSubnetStarted);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionStartSubnet);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionIsCreateFinished);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSessionCreate);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execFriendJoinGetURL);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execFriendJoinIsFinished);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execFriendJoinSession);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execFriendFindIsFinished);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execFriendFindSession);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execFriendIsInSameSession);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execFriendIsInSameGame);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execJoinGetURL);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execJoinIsFinished);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execJoinSession);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execUnconvertString);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execConvertString);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchIsProbing);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchProbe);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetQoS);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetURL);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchJoinIsFinished);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchJoinSession);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetOpenPrivateSlots);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetTotalPrivateSlots);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetOpenPublicSlots);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetTotalPublicSlots);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetCycleLevels);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetFriendlyFire);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetPlayerCount);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetMaxSkill);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetMinSkill);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetLanguage);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetTimeLimit);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetFragLimit);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetOwner);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetMapName);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetGameType);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchGetResultCount);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchCancelQuery);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchProcessQuery);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execOptimatchStartQuery);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchIsProbing);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchProbe);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetQoS);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetURL);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchJoinIsFinished);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchJoinSession);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetOpenPrivateSlots);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetTotalPrivateSlots);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetOpenPublicSlots);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetTotalPublicSlots);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetCycleLevels);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetFriendlyFire);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetPlayerCount);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetMaxSkill);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetMinSkill);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetLanguage);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetTimeLimit);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetFragLimit);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetOwner);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetMapName);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetGameType);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchGetResultCount);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchCancelQuery);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchProcessQuery);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execQuickmatchStartQuery);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetShouldUpdateStats);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetMyLadderRank);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetLadderSize);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsGetMyLadderStatsDone);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetMyLadderStats);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetFriendsResultFlagsCap);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetFriendsResultFlagsRet);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetFriendsResultSuicides);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetFriendsResultGamesWon);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetFriendsResultGames);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetFriendsResultMinutes);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetFriendsResultDeaths);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetFriendsResultKills);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetFriendsResultName);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetFriendsResultPosition);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetFriendsResultCount);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetResultFlagsCap);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetResultFlagsRet);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetResultSuicides);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetResultGamesWon);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetResultGames);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetResultMinutes);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetResultDeaths);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetResultKills);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetResultName);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetResultPosition);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetResultCount);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execWasMyStatsUpdateSuccessful);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsMyStatsUpdateDone);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsUpdateMyStats);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsCancelRequestUser);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsPumpRequestUser);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsRequestUser);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsCancelRequestFriends);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsPumpRequestFriends);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsRequestFriends);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsCancelRequestOverall);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsPumpRequestOverall);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsRequestOverall);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsCancelReset);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsPumpReset);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsReset);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetStatisticsType);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsStopCachingLeaderboard);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsSetRequestedRank);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetActiveUserRank);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsIsRankReady);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStatsGetLeaderboardSize);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetStatisticsType);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsKicked);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsServerDown);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetVoiceMaskEnabled);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetVoiceMaskEnabled);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetVoiceMaskRoboticValue);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetVoiceMaskWhisperValue);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetVoiceMaskPitchScale);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetVoiceMaskSpecEnergyWeight);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetVoiceMaskRoboticValue);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetVoiceMaskWhisperValue);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetVoiceMaskPitchScale);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetVoiceMaskSpecEnergyWeight);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetVoiceMask);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetVoiceMask);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetVoiceStatus);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetVoiceStatus);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetOnlineStatus);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetOnlineStatus);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetVoiceThroughSpeakers);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetVoiceThroughSpeakers);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsPlayerOnMuteListByName);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execRemovePlayerFromMuteListByName);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execAddPlayerToMuteListByName);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsPlayerOnMuteList);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execRemovePlayerFromMuteList);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execAddPlayerToMuteList);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsPlayerInGame);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execHasPlayerVoice);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsPlayerMuted);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsPlayerTalking);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetPlayerName);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetNumberOfPlayers);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execUpdatePlayersTalking);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execCachePlayerList);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetRecommendedPlayers);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetNiceName);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetRandomMap);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetNextMap);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetFirstMap);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetGamerTag);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execVerifyIPLoggedIn);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execHasUserVoice);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetSearchLanguage);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetSearchFriendlyFire);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetSearchMap);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetSearchGameType);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetSearchParams);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetLadderGame);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsLadderGame);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetUserInvitedAfterBoot);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetFriendInviterAfterBoot);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execResetJoiningAfterBoot);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsJoiningAfterBoot);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetLastError);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetUserState);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execShutdownAndCleanup);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetCurrentUser);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execSetCurrentUser);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsIngame);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsPlaying);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execErrorLoggingIn);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsLoggedIn);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execStartLogin);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsPasscodeCorrect);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execHasPasscode);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execRebootToDashboard);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsAccountListUpdated);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetAccountName);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execGetNumberOfAccounts);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsLoggedInTwice);
AUTOGENERATE_FUNCTION(UXboxLiveManager,-1,execIsNetCableIn);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2McCheckPort);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2DNASProgress);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2DNASAuthenticate);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2DNASExit);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2DNASInit);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2NetCtlGetStatus);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2NetCtlDown);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2NetCtlUp);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2NetCtlBind);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2NetCtlExit);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2NetCtlInit);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2NetCnfSelectCombination);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2NetCnfGetDefault);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2NetCnfGetCombination);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2NetCnfGetCombinationList);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2NetCnfExit);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2NetCnfInit);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2NetCnfGetResult);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2NetCnfGetState);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2SwitchToOfflineMode);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execPSX2SwitchToOnlineMode);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execIsMyGameServerStillRegistered);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execUnregisterMyGameServer);
AUTOGENERATE_FUNCTION(UMatchMakingManager,441,execIsMatchFinishedAcknowledged);
AUTOGENERATE_FUNCTION(UMatchMakingManager,442,execMatchFinished);
AUTOGENERATE_FUNCTION(UMatchMakingManager,443,execIsStartMatchAcknowledged);
AUTOGENERATE_FUNCTION(UMatchMakingManager,444,execStartMatch);
AUTOGENERATE_FUNCTION(UMatchMakingManager,445,execIsMyGameServerUpdated);
AUTOGENERATE_FUNCTION(UMatchMakingManager,446,execUpdateMyGameServer);
AUTOGENERATE_FUNCTION(UMatchMakingManager,447,execAllPlayerConnectedToMyGameServer);
AUTOGENERATE_FUNCTION(UMatchMakingManager,448,execIsMyGameServerRegistered);
AUTOGENERATE_FUNCTION(UMatchMakingManager,449,execRegisterMyGameServer);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execIsConnectionLostWithGS);
AUTOGENERATE_FUNCTION(UMatchMakingManager,450,execLeaveGameServer);
AUTOGENERATE_FUNCTION(UMatchMakingManager,451,execIFinishMatch);
AUTOGENERATE_FUNCTION(UMatchMakingManager,452,execIStartMatch);
AUTOGENERATE_FUNCTION(UMatchMakingManager,453,execIsMatchStartedByGameServer);
AUTOGENERATE_FUNCTION(UMatchMakingManager,454,execIsJoinGameServerAcknowledged);
AUTOGENERATE_FUNCTION(UMatchMakingManager,455,execJoinGameServer);
AUTOGENERATE_FUNCTION(UMatchMakingManager,456,execIsGameServerAdditionalInfoArrived);
AUTOGENERATE_FUNCTION(UMatchMakingManager,457,execRequestGameServerAdditionalInfo);
AUTOGENERATE_FUNCTION(UMatchMakingManager,458,execIsGameServerRefreshed);
AUTOGENERATE_FUNCTION(UMatchMakingManager,459,execRefreshGameServer);
AUTOGENERATE_FUNCTION(UMatchMakingManager,460,execAllGameServer);
AUTOGENERATE_FUNCTION(UMatchMakingManager,461,execIsPlayerAccountModified);
AUTOGENERATE_FUNCTION(UMatchMakingManager,462,execModifyPlayerAccount);
AUTOGENERATE_FUNCTION(UMatchMakingManager,463,execIsGameServerListComplete);
AUTOGENERATE_FUNCTION(UMatchMakingManager,471,execRequestGameServerList);
AUTOGENERATE_FUNCTION(UMatchMakingManager,472,execLogout);
AUTOGENERATE_FUNCTION(UMatchMakingManager,473,execLogin);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execIsAccountValidityChecked);
AUTOGENERATE_FUNCTION(UMatchMakingManager,-1,execCheckAccountValidity);
AUTOGENERATE_FUNCTION(UMatchMakingManager,474,execIsPlayerAccountCreated);
AUTOGENERATE_FUNCTION(UMatchMakingManager,475,execCreatePlayerAccount);
AUTOGENERATE_FUNCTION(UVideoPlayer,476,execGetStatus);
AUTOGENERATE_FUNCTION(UVideoPlayer,477,execSetSoundTrack);
AUTOGENERATE_FUNCTION(UVideoPlayer,478,execSetSoundVolume);
AUTOGENERATE_FUNCTION(UVideoPlayer,479,execResume);
AUTOGENERATE_FUNCTION(UVideoPlayer,481,execPause);
AUTOGENERATE_FUNCTION(UVideoPlayer,482,execStop);
AUTOGENERATE_FUNCTION(UVideoPlayer,483,execPlay);
AUTOGENERATE_FUNCTION(UVideoPlayer,484,execOpen);
AUTOGENERATE_FUNCTION(UParticleEmitter,-1,execSetMaxParticles);
AUTOGENERATE_FUNCTION(UParticleEmitter,-1,execSpawnParticle);
AUTOGENERATE_FUNCTION(UInteractionMaster,-1,execTravel);
AUTOGENERATE_FUNCTION(UInteraction,-1,execScreenToWorld);
AUTOGENERATE_FUNCTION(UInteraction,-1,execWorldToScreen);
AUTOGENERATE_FUNCTION(UInteraction,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(UInteraction,-1,execInitialize);
AUTOGENERATE_FUNCTION(UForceFeedbackController,-1,execStartEffect);
AUTOGENERATE_FUNCTION(UForceFeedbackController,-1,execEnableForceFeedback);
AUTOGENERATE_FUNCTION(UForceFeedbackController,-1,execIsForceFeedbackEnable);
AUTOGENERATE_FUNCTION(AVolume,-1,execEncompasses);
AUTOGENERATE_FUNCTION(APlayerController,496,execViewShake);
AUTOGENERATE_FUNCTION(APlayerController,497,execCalcFirstPersonView);
AUTOGENERATE_FUNCTION(APlayerController,498,execAdjustAimForDisplay);
AUTOGENERATE_FUNCTION(APlayerController,499,execHandleWalking);
AUTOGENERATE_FUNCTION(APlayerController,504,execCheckBob);
AUTOGENERATE_FUNCTION(APlayerController,505,execViewFlash);
AUTOGENERATE_FUNCTION(APlayerController,524,execFindStairRotation);
AUTOGENERATE_FUNCTION(APlayerController,506,execPasteFromClipboard);
AUTOGENERATE_FUNCTION(APlayerController,507,execCopyToClipboard);
AUTOGENERATE_FUNCTION(APlayerController,510,execGetDefaultURL);
AUTOGENERATE_FUNCTION(APlayerController,546,execUpdateURL);
AUTOGENERATE_FUNCTION(APlayerController,-1,execClientTravel);
AUTOGENERATE_FUNCTION(APlayerController,513,execSetViewTarget);
AUTOGENERATE_FUNCTION(APlayerController,544,execResetKeyboard);
AUTOGENERATE_FUNCTION(APlayerController,515,execGetEntryLevel);
AUTOGENERATE_FUNCTION(APlayerController,-1,execConsoleCommand);
AUTOGENERATE_FUNCTION(APlayerController,519,execGetPlayerNetworkAddress);
AUTOGENERATE_FUNCTION(APlayerController,535,execOptimizeInputBindings);
AUTOGENERATE_FUNCTION(APlayerController,537,execAttribPadToViewport);
AUTOGENERATE_FUNCTION(APlayerController,538,execGetPadNumber);
AUTOGENERATE_FUNCTION(AAmmunition,-1,execHasAmmo);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execFileLog);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execFileFlush);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execGetChecksum);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execWatermark);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execCloseLog);
AUTOGENERATE_FUNCTION(AStatLogFile,-1,execOpenLog);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetMapFileName);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetGMTRef);
AUTOGENERATE_FUNCTION(AStatLog,-1,execGetPlayerChecksum);
AUTOGENERATE_FUNCTION(AStatLog,-1,execLogMutator);
AUTOGENERATE_FUNCTION(AStatLog,-1,execInitialCheck);
AUTOGENERATE_FUNCTION(AStatLog,-1,execBrowseRelativeLocalURL);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteWorldLogBatcher);
AUTOGENERATE_FUNCTION(AStatLog,-1,execBatchLocal);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteSilentLogBatcher);
AUTOGENERATE_FUNCTION(AStatLog,-1,execExecuteLocalLogBatcher);
AUTOGENERATE_FUNCTION(AHUD,-1,execDrawWeaponsList);
AUTOGENERATE_FUNCTION(AHUD,-1,execDrawAmmo);
AUTOGENERATE_FUNCTION(AHUD,-1,execDrawPlayerInfo);
AUTOGENERATE_FUNCTION(AHUD,-1,execDrawStdBackground);
AUTOGENERATE_FUNCTION(AHUD,-1,execDraw3DLine);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,315,execUnWarp);
AUTOGENERATE_FUNCTION(AWarpZoneInfo,314,execWarp);
AUTOGENERATE_FUNCTION(AZoneInfo,308,execZoneActors);
AUTOGENERATE_FUNCTION(AGameInfo,572,execParseKillMessage);
AUTOGENERATE_FUNCTION(AGameInfo,573,execGetNetworkNumber);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetPlateForme);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execDecalScreen);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetAvailableRes);
AUTOGENERATE_FUNCTION(ALevelInfo,574,execSetOnlyPostRender);
AUTOGENERATE_FUNCTION(ALevelInfo,575,execSetViewport);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execSetInjuredEffect);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execSetSharpEffect);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execSetBlurEffect);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execSetPoisonEffect);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execSetRndCubeSprSize);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execAddRndCubeSprExclude);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execChangeRndCubeSprProp);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execSetRndCubeSprSpeed);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execSetRndCubeSprState);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execInitRndCubeSpr);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetAddressURL);
AUTOGENERATE_FUNCTION(ALevelInfo,-1,execGetLocalURL);
AUTOGENERATE_FUNCTION(ALevelInfo,588,execDecAttaque);
AUTOGENERATE_FUNCTION(ALevelInfo,589,execIncAttaque);
AUTOGENERATE_FUNCTION(ALevelInfo,590,execDecAlerte);
AUTOGENERATE_FUNCTION(ALevelInfo,591,execIncAlerte);
AUTOGENERATE_FUNCTION(ALevelInfo,592,execDecAttente);
AUTOGENERATE_FUNCTION(ALevelInfo,593,execIncAttente);
AUTOGENERATE_FUNCTION(AWeapon,-1,execPlayFiringSound);
AUTOGENERATE_FUNCTION(AWeapon,-1,execGetFireStart);
AUTOGENERATE_FUNCTION(AWeapon,-1,execHasAmmo);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif

#if __STATIC_LINK
#ifndef ENGINE_NATIVE_DEFS
#define ENGINE_NATIVE_DEFS

DECLARE_NATIVE_TYPE(Engine,AActor);
DECLARE_NATIVE_TYPE(Engine,AAIController);
DECLARE_NATIVE_TYPE(Engine,AController);
DECLARE_NATIVE_TYPE(Engine,AKeypoint);
DECLARE_NATIVE_TYPE(Engine,APawn);
DECLARE_NATIVE_TYPE(Engine,ATriggers);
DECLARE_NATIVE_TYPE(Engine,AInfo);
DECLARE_NATIVE_TYPE(Engine,AProjector);
DECLARE_NATIVE_TYPE(Engine,UXboxLiveManager);
DECLARE_NATIVE_TYPE(Engine,UMatchMakingManager);
DECLARE_NATIVE_TYPE(Engine,UVideoPlayer);
DECLARE_NATIVE_TYPE(Engine,ATrail);
DECLARE_NATIVE_TYPE(Engine,UTexture);
DECLARE_NATIVE_TYPE(Engine,UShader);
DECLARE_NATIVE_TYPE(Engine,AStaticMeshActor);
DECLARE_NATIVE_TYPE(Engine,USpriteEmitter);
DECLARE_NATIVE_TYPE(Engine,UParticleEmitter);
DECLARE_NATIVE_TYPE(Engine,USparkEmitter);
DECLARE_NATIVE_TYPE(Engine,AShadowProjector);
DECLARE_NATIVE_TYPE(Engine,UParticleMaterial);
DECLARE_NATIVE_TYPE(Engine,AEmitter);
DECLARE_NATIVE_TYPE(Engine,AMover);
DECLARE_NATIVE_TYPE(Engine,UMeshEmitter);
DECLARE_NATIVE_TYPE(Engine,USinusModifier);
DECLARE_NATIVE_TYPE(Engine,UModifier);
DECLARE_NATIVE_TYPE(Engine,UFinalBlend);
DECLARE_NATIVE_TYPE(Engine,UTexMatrix);
DECLARE_NATIVE_TYPE(Engine,UTexModifier);
DECLARE_NATIVE_TYPE(Engine,UTexEnvMap);
DECLARE_NATIVE_TYPE(Engine,UTexOscillator);
DECLARE_NATIVE_TYPE(Engine,UTexRotator);
DECLARE_NATIVE_TYPE(Engine,UTexScaler);
DECLARE_NATIVE_TYPE(Engine,UTexPanner);
DECLARE_NATIVE_TYPE(Engine,UFadeColor);
DECLARE_NATIVE_TYPE(Engine,UConstantMaterial);
DECLARE_NATIVE_TYPE(Engine,UConstantColor);
DECLARE_NATIVE_TYPE(Engine,UCombiner);
DECLARE_NATIVE_TYPE(Engine,UColorModifier);
DECLARE_NATIVE_TYPE(Engine,UInteractionMaster);
DECLARE_NATIVE_TYPE(Engine,UInteractions);
DECLARE_NATIVE_TYPE(Engine,UBaseGUIController);
DECLARE_NATIVE_TYPE(Engine,UInteraction);
DECLARE_NATIVE_TYPE(Engine,UConsole);
DECLARE_NATIVE_TYPE(Engine,UForceFeedbackController);
DECLARE_NATIVE_TYPE(Engine,UPlayerInput);
DECLARE_NATIVE_TYPE(Engine,APlayerStats);
DECLARE_NATIVE_TYPE(Engine,UCheatManager);
DECLARE_NATIVE_TYPE(Engine,UCanvas);
DECLARE_NATIVE_TYPE(Engine,UBeamEmitter);
DECLARE_NATIVE_TYPE(Engine,AMapList);
DECLARE_NATIVE_TYPE(Engine,AWeaponAttachment);
DECLARE_NATIVE_TYPE(Engine,AInventoryAttachment);
DECLARE_NATIVE_TYPE(Engine,ATeamInfo);
DECLARE_NATIVE_TYPE(Engine,AReplicationInfo);
DECLARE_NATIVE_TYPE(Engine,AAutoLadder);
DECLARE_NATIVE_TYPE(Engine,ALadder);
DECLARE_NATIVE_TYPE(Engine,APotentialClimbWatcher);
DECLARE_NATIVE_TYPE(Engine,ALadderVolume);
DECLARE_NATIVE_TYPE(Engine,APhysicsVolume);
DECLARE_NATIVE_TYPE(Engine,AVolume);
DECLARE_NATIVE_TYPE(Engine,ABrush);
DECLARE_NATIVE_TYPE(Engine,ADefaultPhysicsVolume);
DECLARE_NATIVE_TYPE(Engine,ALineOfSightTrigger);
DECLARE_NATIVE_TYPE(Engine,AAIScript);
DECLARE_NATIVE_TYPE(Engine,ADamageType);
DECLARE_NATIVE_TYPE(Engine,ADoor);
DECLARE_NATIVE_TYPE(Engine,AVehiclePart);
DECLARE_NATIVE_TYPE(Engine,AVehicle);
DECLARE_NATIVE_TYPE(Engine,APlayerController);
DECLARE_NATIVE_TYPE(Engine,AAmmunition);
DECLARE_NATIVE_TYPE(Engine,AInventory);
DECLARE_NATIVE_TYPE(Engine,APowerups);
DECLARE_NATIVE_TYPE(Engine,AArmor);
DECLARE_NATIVE_TYPE(Engine,APickup);
DECLARE_NATIVE_TYPE(Engine,AAmmo);
DECLARE_NATIVE_TYPE(Engine,ULevelSummary);
DECLARE_NATIVE_TYPE(Engine,AGameReplicationInfo);
DECLARE_NATIVE_TYPE(Engine,AStatLogFile);
DECLARE_NATIVE_TYPE(Engine,AStatLog);
DECLARE_NATIVE_TYPE(Engine,AInternetInfo);
DECLARE_NATIVE_TYPE(Engine,APlayerReplicationInfo);
DECLARE_NATIVE_TYPE(Engine,ALiftExit);
DECLARE_NATIVE_TYPE(Engine,ALiftCenter);
DECLARE_NATIVE_TYPE(Engine,ASavedMove);
DECLARE_NATIVE_TYPE(Engine,AHUD);
DECLARE_NATIVE_TYPE(Engine,AWarpZoneMarker);
DECLARE_NATIVE_TYPE(Engine,ATrigger);
DECLARE_NATIVE_TYPE(Engine,AInventorySpot);
DECLARE_NATIVE_TYPE(Engine,APlayerStart);
DECLARE_NATIVE_TYPE(Engine,ATeleporter);
DECLARE_NATIVE_TYPE(Engine,AWarpZoneInfo);
DECLARE_NATIVE_TYPE(Engine,AZoneInfo);
DECLARE_NATIVE_TYPE(Engine,AProjectile);
DECLARE_NATIVE_TYPE(Engine,ADecoration);
DECLARE_NATIVE_TYPE(Engine,AInterpolationPoint);
DECLARE_NATIVE_TYPE(Engine,AScout);
DECLARE_NATIVE_TYPE(Engine,APathNode);
DECLARE_NATIVE_TYPE(Engine,UReachSpec);
DECLARE_NATIVE_TYPE(Engine,ASkyZoneInfo);
DECLARE_NATIVE_TYPE(Engine,ACamera);
DECLARE_NATIVE_TYPE(Engine,AGameInfo);
DECLARE_NATIVE_TYPE(Engine,ALevelInfo);
DECLARE_NATIVE_TYPE(Engine,ANote);
DECLARE_NATIVE_TYPE(Engine,AWeapon);
DECLARE_NATIVE_TYPE(Engine,APolyMarker);
DECLARE_NATIVE_TYPE(Engine,AClipMarker);
DECLARE_NATIVE_TYPE(Engine,ALight);
DECLARE_NATIVE_TYPE(Engine,URenderTargetMaterial);
DECLARE_NATIVE_TYPE(Engine,AMutator);

#define AUTO_INITIALIZE_REGISTRANTS_ENGINE \
	UEngine::StaticClass(); \
	ANavigationPoint::StaticClass(); \
	AActor::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAActorNative; \
	AAIController::StaticClass(); \
	AController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAControllerNative; \
	AKeypoint::StaticClass(); \
	APawn::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAPawnNative; \
	ATriggers::StaticClass(); \
	AInfo::StaticClass(); \
	AProjector::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAProjectorNative; \
	UXboxLive::StaticClass(); \
	UXboxLiveManager::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUXboxLiveManagerNative; \
	UMatchMakingManager::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUMatchMakingManagerNative; \
	UMatchMakingSubsystem::StaticClass(); \
	UNetPendingLevel::StaticClass(); \
	UPendingLevel::StaticClass(); \
	UNetDriver::StaticClass(); \
	UPackageMapLevel::StaticClass(); \
	UChannelDownload::StaticClass(); \
	UDownload::StaticClass(); \
	UDemoRecDriver::StaticClass(); \
	UDemoRecConnection::StaticClass(); \
	UNetConnection::StaticClass(); \
	UPlayer::StaticClass(); \
	UDemoPlayPendingLevel::StaticClass(); \
	UFileChannel::StaticClass(); \
	UChannel::StaticClass(); \
	UActorChannel::StaticClass(); \
	UControlChannel::StaticClass(); \
	UVideoPlayerDevice::StaticClass(); \
	UVideoPlayer::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUVideoPlayerNative; \
	UVertMeshInstance::StaticClass(); \
	ULodMeshInstance::StaticClass(); \
	UMeshInstance::StaticClass(); \
	UPrimitive::StaticClass(); \
	UVertMesh::StaticClass(); \
	ULodMesh::StaticClass(); \
	UMesh::StaticClass(); \
	ATrail::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineATrailNative; \
	UCubemap::StaticClass(); \
	UTexture::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUTextureNative; \
	UBitmapMaterial::StaticClass(); \
	URenderedMaterial::StaticClass(); \
	UMaterial::StaticClass(); \
	UPalette::StaticClass(); \
	ATerrainInfo::StaticClass(); \
	UTerrainRenderMaterial::StaticClass(); \
	UShader::StaticClass(); \
	UTerrainPrimitive::StaticClass(); \
	UTerrainSector::StaticClass(); \
	AStaticMeshActor::StaticClass(); \
	UStaticMeshInstance::StaticClass(); \
	UStaticMesh::StaticClass(); \
	USpriteEmitter::StaticClass(); \
	UParticleEmitter::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUParticleEmitterNative; \
	USparkEmitter::StaticClass(); \
	USequEditProps::StaticClass(); \
	UAnimEditProps::StaticClass(); \
	UMeshEditProps::StaticClass(); \
	USkeletalMeshInstance::StaticClass(); \
	USkeletalMesh::StaticClass(); \
	UAnimation::StaticClass(); \
	UMeshAnimation::StaticClass(); \
	AShadowProjector::StaticClass(); \
	UShadowBitmapMaterial::StaticClass(); \
	USaveGameDevice::StaticClass(); \
	USkinVertexBuffer::StaticClass(); \
	URenderResource::StaticClass(); \
	UIndexBuffer::StaticClass(); \
	UVertexBuffer::StaticClass(); \
	UVertexStreamBase::StaticClass(); \
	UVertexStreamPosNormTex::StaticClass(); \
	UVertexStreamUV::StaticClass(); \
	UVertexStreamCOLOR::StaticClass(); \
	UVertexStreamVECTOR::StaticClass(); \
	UProjectorPrimitive::StaticClass(); \
	UPrimitiveNS::StaticClass(); \
	UParticleMaterial::StaticClass(); \
	AEmitter::StaticClass(); \
	AMover::StaticClass(); \
	UModel::StaticClass(); \
	UMeshEmitter::StaticClass(); \
	USinusModifier::StaticClass(); \
	UModifier::StaticClass(); \
	UFinalBlend::StaticClass(); \
	UTexMatrix::StaticClass(); \
	UTexModifier::StaticClass(); \
	UTexEnvMap::StaticClass(); \
	UTexOscillator::StaticClass(); \
	UTexRotator::StaticClass(); \
	UTexScaler::StaticClass(); \
	UTexPanner::StaticClass(); \
	UFadeColor::StaticClass(); \
	UConstantMaterial::StaticClass(); \
	UConstantColor::StaticClass(); \
	UCombiner::StaticClass(); \
	UColorModifier::StaticClass(); \
	UTexCoordMaterial::StaticClass(); \
	UProxyBitmapMaterial::StaticClass(); \
	ULevel::StaticClass(); \
	ULevelBase::StaticClass(); \
	UInteractionMaster::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUInteractionMasterNative; \
	UInteractions::StaticClass(); \
	UBaseGUIController::StaticClass(); \
	UInteraction::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUInteractionNative; \
	UConsole::StaticClass(); \
	UInput::StaticClass(); \
	UGameEngine::StaticClass(); \
	UForceFeedbackManager::StaticClass(); \
	UForceFeedbackController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUForceFeedbackControllerNative; \
	UFont::StaticClass(); \
	UPolys::StaticClass(); \
	UGlobalTempObjects::StaticClass(); \
	UServerCommandlet::StaticClass(); \
	URenderDevice::StaticClass(); \
	UConvexVolume::StaticClass(); \
	UPlayerInput::StaticClass(); \
	APlayerStats::StaticClass(); \
	UCheatManager::StaticClass(); \
	UCanvas::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineUCanvasNative; \
	UViewport::StaticClass(); \
	UClient::StaticClass(); \
	UBeamEmitter::StaticClass(); \
	UAudioSubsystem::StaticClass(); \
	UDeathOno::StaticClass(); \
	USndOno::StaticClass(); \
	UPNJOno::StaticClass(); \
	USndXIIIStep::StaticClass(); \
	USndStep::StaticClass(); \
	USndPNJStep::StaticClass(); \
	USound::StaticClass(); \
	AMapList::StaticClass(); \
	AWeaponAttachment::StaticClass(); \
	AInventoryAttachment::StaticClass(); \
	ATeamInfo::StaticClass(); \
	AReplicationInfo::StaticClass(); \
	AAutoLadder::StaticClass(); \
	ALadder::StaticClass(); \
	APotentialClimbWatcher::StaticClass(); \
	ALadderVolume::StaticClass(); \
	APhysicsVolume::StaticClass(); \
	AVolume::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAVolumeNative; \
	ABrush::StaticClass(); \
	ADefaultPhysicsVolume::StaticClass(); \
	ALineOfSightTrigger::StaticClass(); \
	AAIScript::StaticClass(); \
	ADamageType::StaticClass(); \
	ADoor::StaticClass(); \
	AVehiclePart::StaticClass(); \
	AVehicle::StaticClass(); \
	APlayerController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAPlayerControllerNative; \
	AAmmunition::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAAmmunitionNative; \
	AInventory::StaticClass(); \
	APowerups::StaticClass(); \
	AArmor::StaticClass(); \
	APickup::StaticClass(); \
	AAmmo::StaticClass(); \
	ULevelSummary::StaticClass(); \
	AGameReplicationInfo::StaticClass(); \
	AStatLogFile::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAStatLogFileNative; \
	AStatLog::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAStatLogNative; \
	AInternetInfo::StaticClass(); \
	APlayerReplicationInfo::StaticClass(); \
	ALiftExit::StaticClass(); \
	ALiftCenter::StaticClass(); \
	ASavedMove::StaticClass(); \
	AHUD::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAHUDNative; \
	AWarpZoneMarker::StaticClass(); \
	ATrigger::StaticClass(); \
	AInventorySpot::StaticClass(); \
	APlayerStart::StaticClass(); \
	ATeleporter::StaticClass(); \
	AWarpZoneInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAWarpZoneInfoNative; \
	AZoneInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAZoneInfoNative; \
	AProjectile::StaticClass(); \
	ADecoration::StaticClass(); \
	AInterpolationPoint::StaticClass(); \
	AScout::StaticClass(); \
	APathNode::StaticClass(); \
	UReachSpec::StaticClass(); \
	ASkyZoneInfo::StaticClass(); \
	ACamera::StaticClass(); \
	AGameInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAGameInfoNative; \
	ALevelInfo::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineALevelInfoNative; \
	ANote::StaticClass(); \
	AWeapon::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineAWeaponNative; \
	APolyMarker::StaticClass(); \
	AClipMarker::StaticClass(); \
	ALight::StaticClass(); \
	URenderTargetMaterial::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindEngineURenderTargetMaterialNative; \
	AMutator::StaticClass(); \

#endif // Engine_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(AActor) GEngineAActorNatives[] = 
{ 
	MAP_NATIVE(AActor,execSaveAtCheckpoint)
	MAP_NATIVE(AActor,execMultiply_ColorFloat)
	MAP_NATIVE(AActor,execAdd_ColorColor)
	MAP_NATIVE(AActor,execMultiply_FloatColor)
	MAP_NATIVE(AActor,execSubtract_ColorColor)
	MAP_NATIVE(AActor,execActorInIterationCategory)
	MAP_NATIVE(AActor,execCollidingActors)
	MAP_NATIVE(AActor,execVisibleDamageableActors)
	MAP_NATIVE(AActor,execVisibleCollidingActors)
	MAP_NATIVE(AActor,execVisibleActors)
	MAP_NATIVE(AActor,execRadiusActors)
	MAP_NATIVE(AActor,execTraceActors)
	MAP_NATIVE(AActor,execTouchingActors)
	MAP_NATIVE(AActor,execBasedActors)
	MAP_NATIVE(AActor,execChildActors)
	MAP_NATIVE(AActor,execDynamicActors)
	MAP_NATIVE(AActor,execAllActors)
	MAP_NATIVE(AActor,execMoveCacheEntry)
	MAP_NATIVE(AActor,execGetCacheEntry)
	MAP_NATIVE(AActor,execGetNextIntDesc)
	MAP_NATIVE(AActor,execGetNextInt)
	MAP_NATIVE(AActor,execGetURLMap)
	MAP_NATIVE(AActor,execGetNextSkin)
	MAP_NATIVE(AActor,execGetMapName)
	MAP_NATIVE(AActor,execPlayerCanSeeMe)
	MAP_NATIVE(AActor,execMakeNoise)
	MAP_NATIVE(AActor,execResumeAllSounds)
	MAP_NATIVE(AActor,execResumeMusic)
	MAP_NATIVE(AActor,execKillAllSounds)
	MAP_NATIVE(AActor,execPauseAllSounds)
	MAP_NATIVE(AActor,execPauseMusic)
	MAP_NATIVE(AActor,execStopAllSounds)
	MAP_NATIVE(AActor,execStopActorSounds)
	MAP_NATIVE(AActor,execStopVoice)
	MAP_NATIVE(AActor,execStopMusic)
	MAP_NATIVE(AActor,execStopSound)
	MAP_NATIVE(AActor,execPlaySndDeathOno)
	MAP_NATIVE(AActor,execPlaySndPNJOno)
	MAP_NATIVE(AActor,execPlaySndXIIIStep)
	MAP_NATIVE(AActor,execPlaySndPNJStep)
	MAP_NATIVE(AActor,execPlayRolloffSound)
	MAP_NATIVE(AActor,execPlayMenu)
	MAP_NATIVE(AActor,execPlayStrAmb)
	MAP_NATIVE(AActor,execPlayVoice)
	MAP_NATIVE(AActor,execPlayStrVoice)
	MAP_NATIVE(AActor,execWaveHasPosition)
	MAP_NATIVE(AActor,execGetWaveDuration)
	MAP_NATIVE(AActor,execPlayMusic)
	MAP_NATIVE(AActor,execPlaySound)
	MAP_NATIVE(AActor,execSetVolume)
	MAP_NATIVE(AActor,execSetMusicSliderPos)
	MAP_NATIVE(AActor,execSetSoundMode)
	MAP_NATIVE(AActor,execSetTimer2)
	MAP_NATIVE(AActor,execSetTimer)
	MAP_NATIVE(AActor,execDestroy)
	MAP_NATIVE(AActor,execSpawn)
	MAP_NATIVE(AActor,execFastTrace)
	MAP_NATIVE(AActor,execGetLastTraceBone)
	MAP_NATIVE(AActor,execTrace)
	MAP_NATIVE(AActor,execPSX2BootstrapDemoGetGamePlayTimeout)
	MAP_NATIVE(AActor,execSetPhysics)
	MAP_NATIVE(AActor,execFinishInterpolation)
	MAP_NATIVE(AActor,execReplaceATextureByAnOther)
	MAP_NATIVE(AActor,execRefreshLighting)
	MAP_NATIVE(AActor,execRefreshDisplaying)
	MAP_NATIVE(AActor,execRecomputeBoundingVolume)
	MAP_NATIVE(AActor,execCheckWasVisible)
	MAP_NATIVE(AActor,execGetCartoonLightDir)
	MAP_NATIVE(AActor,execGetRenderBoundingSphere)
	MAP_NATIVE(AActor,execAnimIsInGroup)
	MAP_NATIVE(AActor,execGetAnimParams)
	MAP_NATIVE(AActor,execSetBoneRotation)
	MAP_NATIVE(AActor,execSetBoneLocation)
	MAP_NATIVE(AActor,execSetBoneDirection)
	MAP_NATIVE(AActor,execSetBoneScalePerAxis)
	MAP_NATIVE(AActor,execSetBoneScale)
	MAP_NATIVE(AActor,execLockRootMotion)
	MAP_NATIVE(AActor,execDetachFromBone)
	MAP_NATIVE(AActor,execAttachToBone)
	MAP_NATIVE(AActor,execGetRootRotationDelta)
	MAP_NATIVE(AActor,execGetRootLocationDelta)
	MAP_NATIVE(AActor,execGetRootRotation)
	MAP_NATIVE(AActor,execGetRootLocation)
	MAP_NATIVE(AActor,execGetBoneRotation)
	MAP_NATIVE(AActor,execGetBoneCoords)
	MAP_NATIVE(AActor,execAnimBlendToAlpha)
	MAP_NATIVE(AActor,execAnimBlendParams)
	MAP_NATIVE(AActor,execLinkSkelAnim)
	MAP_NATIVE(AActor,execGetNotifyChannel)
	MAP_NATIVE(AActor,execEnableChannelNotify)
	MAP_NATIVE(AActor,execIsTweening)
	MAP_NATIVE(AActor,execStopAnimating)
	MAP_NATIVE(AActor,execHasAnim)
	MAP_NATIVE(AActor,execFinishAnim)
	MAP_NATIVE(AActor,execIsAnimating)
	MAP_NATIVE(AActor,execTweenAnim)
	MAP_NATIVE(AActor,execLoopAnim)
	MAP_NATIVE(AActor,execPlayAnim)
	MAP_NATIVE(AActor,execResetInputs)
	MAP_NATIVE(AActor,execIntersectWaterPlane)
	MAP_NATIVE(AActor,execGetMaterial)
	MAP_NATIVE(AActor,execGetBoundingBox)
	MAP_NATIVE(AActor,execSetOwner)
	MAP_NATIVE(AActor,execSetBase)
	MAP_NATIVE(AActor,execAutonomousPhysics)
	MAP_NATIVE(AActor,execMoveSmooth)
	MAP_NATIVE(AActor,execSetRelativeLocation)
	MAP_NATIVE(AActor,execSetRelativeRotation)
	MAP_NATIVE(AActor,execSetRotation)
	MAP_NATIVE(AActor,execSetLocation)
	MAP_NATIVE(AActor,execMove)
	MAP_NATIVE(AActor,execSetDrawType)
	MAP_NATIVE(AActor,execSetDrawScale3D)
	MAP_NATIVE(AActor,execSetDrawScale)
	MAP_NATIVE(AActor,execSetCollisionSize)
	MAP_NATIVE(AActor,execSetCollision)
	MAP_NATIVE(AActor,execSleep)
	MAP_NATIVE(AActor,execError)
	MAP_NATIVE(AActor,execConsoleCommand)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AActor);

NATIVE_INFO(AController) GEngineAControllerNatives[] = 
{ 
	MAP_NATIVE(AController,execWantsSmoothedView)
	MAP_NATIVE(AController,execSetTimer3)
	MAP_NATIVE(AController,execEndClimbLadder)
	MAP_NATIVE(AController,execStopWaiting)
	MAP_NATIVE(AController,execPickAnyTarget)
	MAP_NATIVE(AController,execPickTarget)
	MAP_NATIVE(AController,execRemoveController)
	MAP_NATIVE(AController,execAddController)
	MAP_NATIVE(AController,execFindBestInventoryPath)
	MAP_NATIVE(AController,execWaitForLanding)
	MAP_NATIVE(AController,execPickWallAdjust)
	MAP_NATIVE(AController,execactorReachable)
	MAP_NATIVE(AController,execpointReachable)
	MAP_NATIVE(AController,execEAdjustJump)
	MAP_NATIVE(AController,execClearPaths)
	MAP_NATIVE(AController,execFindRandomDest)
	MAP_NATIVE(AController,execFindPathTowardNearest)
	MAP_NATIVE(AController,execFindPathToward)
	MAP_NATIVE(AController,execFindPathTo)
	MAP_NATIVE(AController,execCanSee)
	MAP_NATIVE(AController,execLineOfSightTo)
	MAP_NATIVE(AController,execFinishRotation)
	MAP_NATIVE(AController,execMoveToward)
	MAP_NATIVE(AController,execMoveTo)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AController);

NATIVE_INFO(APawn) GEngineAPawnNatives[] = 
{ 
	MAP_NATIVE(APawn,execEyePosition)
	MAP_NATIVE(APawn,execFindInventoryKind)
	MAP_NATIVE(APawn,execFindInventoryType)
	MAP_NATIVE(APawn,execFaceRotation)
	MAP_NATIVE(APawn,execHeadYawControl)
	MAP_NATIVE(APawn,execSpineYawControl)
	MAP_NATIVE(APawn,execPressingFire)
	MAP_NATIVE(APawn,execGetViewRotation)
	MAP_NATIVE(APawn,execIsLocallyControlled)
	MAP_NATIVE(APawn,execIsHumanControlled)
	MAP_NATIVE(APawn,execIsPlayerPawn)
	MAP_NATIVE(APawn,execCalcDrawOffset)
	MAP_NATIVE(APawn,execSetWalking)
	MAP_NATIVE(APawn,execRemovePawnFromList)
	MAP_NATIVE(APawn,execAddPawnToList)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,APawn);

NATIVE_INFO(AProjector) GEngineAProjectorNatives[] = 
{ 
	MAP_NATIVE(AProjector,execAbandonProjector)
	MAP_NATIVE(AProjector,execDetachProjector)
	MAP_NATIVE(AProjector,execAttachProjector)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AProjector);

NATIVE_INFO(UXboxLiveManager) GEngineUXboxLiveManagerNatives[] = 
{ 
	MAP_NATIVE(UXboxLiveManager,execUpdateServerListeners)
	MAP_NATIVE(UXboxLiveManager,execGetSetting)
	MAP_NATIVE(UXboxLiveManager,execSetSetting)
	MAP_NATIVE(UXboxLiveManager,execEnumerateFriends)
	MAP_NATIVE(UXboxLiveManager,execSetListeners)
	MAP_NATIVE(UXboxLiveManager,execIsUserMuted)
	MAP_NATIVE(UXboxLiveManager,execResetVoiceNet)
	MAP_NATIVE(UXboxLiveManager,execBootToDownloadManager)
	MAP_NATIVE(UXboxLiveManager,execBootToUpdateXBE)
	MAP_NATIVE(UXboxLiveManager,execHasFriendRequest)
	MAP_NATIVE(UXboxLiveManager,execHasInvite)
	MAP_NATIVE(UXboxLiveManager,execShouldRenderInvite)
	MAP_NATIVE(UXboxLiveManager,execIsPlayerNameInGame)
	MAP_NATIVE(UXboxLiveManager,execGetLevelInfo)
	MAP_NATIVE(UXboxLiveManager,execSetPlayerVoiceStatus)
	MAP_NATIVE(UXboxLiveManager,execInternalKick)
	MAP_NATIVE(UXboxLiveManager,execIsHost)
	MAP_NATIVE(UXboxLiveManager,execIsPlayerListUpdated)
	MAP_NATIVE(UXboxLiveManager,execIsFriend)
	MAP_NATIVE(UXboxLiveManager,execGetActivePlayer)
	MAP_NATIVE(UXboxLiveManager,execSetActivePlayer)
	MAP_NATIVE(UXboxLiveManager,execSendFeedback)
	MAP_NATIVE(UXboxLiveManager,execIsInSameSession)
	MAP_NATIVE(UXboxLiveManager,execIsUpdatingFriends)
	MAP_NATIVE(UXboxLiveManager,execRevokeGameInvite)
	MAP_NATIVE(UXboxLiveManager,execDeclineGameInvite)
	MAP_NATIVE(UXboxLiveManager,execAcceptGameInvite)
	MAP_NATIVE(UXboxLiveManager,execSendGameInvite)
	MAP_NATIVE(UXboxLiveManager,execSendFriendRequest)
	MAP_NATIVE(UXboxLiveManager,execBlockFriendRequest)
	MAP_NATIVE(UXboxLiveManager,execCancelFriendRequest)
	MAP_NATIVE(UXboxLiveManager,execDeclineFriendRequest)
	MAP_NATIVE(UXboxLiveManager,execAcceptFriendRequest)
	MAP_NATIVE(UXboxLiveManager,execGetFriendGameName)
	MAP_NATIVE(UXboxLiveManager,execRemoveFriend)
	MAP_NATIVE(UXboxLiveManager,execGetActiveFriendTitle)
	MAP_NATIVE(UXboxLiveManager,execGetActiveFriendName)
	MAP_NATIVE(UXboxLiveManager,execGetActiveFriend)
	MAP_NATIVE(UXboxLiveManager,execSetActiveFriend)
	MAP_NATIVE(UXboxLiveManager,execIsFriendsListChanged)
	MAP_NATIVE(UXboxLiveManager,execUpdateFriends)
	MAP_NATIVE(UXboxLiveManager,execGetNumberOfFriends)
	MAP_NATIVE(UXboxLiveManager,execGetFriend)
	MAP_NATIVE(UXboxLiveManager,execGetFriendTitleAtIndex)
	MAP_NATIVE(UXboxLiveManager,execGetFriendNameAtIndex)
	MAP_NATIVE(UXboxLiveManager,execGetFriendAtIndex)
	MAP_NATIVE(UXboxLiveManager,execSessionSetMaxSkill)
	MAP_NATIVE(UXboxLiveManager,execSessionSetMinSkill)
	MAP_NATIVE(UXboxLiveManager,execSessionSetCycleLevels)
	MAP_NATIVE(UXboxLiveManager,execSessionSetFriendlyFire)
	MAP_NATIVE(UXboxLiveManager,execSessionSetReserved)
	MAP_NATIVE(UXboxLiveManager,execSessionSetPrivateSlots)
	MAP_NATIVE(UXboxLiveManager,execSessionSetPublicSlots)
	MAP_NATIVE(UXboxLiveManager,execSessionSetTimeLimit)
	MAP_NATIVE(UXboxLiveManager,execSessionSetFragLimit)
	MAP_NATIVE(UXboxLiveManager,execSessionSetLanguage)
	MAP_NATIVE(UXboxLiveManager,execSessionSetMapName)
	MAP_NATIVE(UXboxLiveManager,execSessionSetGameType)
	MAP_NATIVE(UXboxLiveManager,execSessionListen)
	MAP_NATIVE(UXboxLiveManager,execSessionReset)
	MAP_NATIVE(UXboxLiveManager,execSessionDelete)
	MAP_NATIVE(UXboxLiveManager,execSessionProcess)
	MAP_NATIVE(UXboxLiveManager,execSessionUpdate)
	MAP_NATIVE(UXboxLiveManager,execSessionIsSubnetStarted)
	MAP_NATIVE(UXboxLiveManager,execSessionStartSubnet)
	MAP_NATIVE(UXboxLiveManager,execSessionIsCreateFinished)
	MAP_NATIVE(UXboxLiveManager,execSessionCreate)
	MAP_NATIVE(UXboxLiveManager,execFriendJoinGetURL)
	MAP_NATIVE(UXboxLiveManager,execFriendJoinIsFinished)
	MAP_NATIVE(UXboxLiveManager,execFriendJoinSession)
	MAP_NATIVE(UXboxLiveManager,execFriendFindIsFinished)
	MAP_NATIVE(UXboxLiveManager,execFriendFindSession)
	MAP_NATIVE(UXboxLiveManager,execFriendIsInSameSession)
	MAP_NATIVE(UXboxLiveManager,execFriendIsInSameGame)
	MAP_NATIVE(UXboxLiveManager,execJoinGetURL)
	MAP_NATIVE(UXboxLiveManager,execJoinIsFinished)
	MAP_NATIVE(UXboxLiveManager,execJoinSession)
	MAP_NATIVE(UXboxLiveManager,execUnconvertString)
	MAP_NATIVE(UXboxLiveManager,execConvertString)
	MAP_NATIVE(UXboxLiveManager,execOptimatchIsProbing)
	MAP_NATIVE(UXboxLiveManager,execOptimatchProbe)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetQoS)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetURL)
	MAP_NATIVE(UXboxLiveManager,execOptimatchJoinIsFinished)
	MAP_NATIVE(UXboxLiveManager,execOptimatchJoinSession)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetOpenPrivateSlots)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetTotalPrivateSlots)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetOpenPublicSlots)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetTotalPublicSlots)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetCycleLevels)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetFriendlyFire)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetPlayerCount)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetMaxSkill)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetMinSkill)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetLanguage)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetTimeLimit)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetFragLimit)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetOwner)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetMapName)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetGameType)
	MAP_NATIVE(UXboxLiveManager,execOptimatchGetResultCount)
	MAP_NATIVE(UXboxLiveManager,execOptimatchCancelQuery)
	MAP_NATIVE(UXboxLiveManager,execOptimatchProcessQuery)
	MAP_NATIVE(UXboxLiveManager,execOptimatchStartQuery)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchIsProbing)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchProbe)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetQoS)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetURL)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchJoinIsFinished)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchJoinSession)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetOpenPrivateSlots)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetTotalPrivateSlots)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetOpenPublicSlots)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetTotalPublicSlots)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetCycleLevels)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetFriendlyFire)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetPlayerCount)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetMaxSkill)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetMinSkill)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetLanguage)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetTimeLimit)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetFragLimit)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetOwner)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetMapName)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetGameType)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchGetResultCount)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchCancelQuery)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchProcessQuery)
	MAP_NATIVE(UXboxLiveManager,execQuickmatchStartQuery)
	MAP_NATIVE(UXboxLiveManager,execSetShouldUpdateStats)
	MAP_NATIVE(UXboxLiveManager,execGetMyLadderRank)
	MAP_NATIVE(UXboxLiveManager,execGetLadderSize)
	MAP_NATIVE(UXboxLiveManager,execIsGetMyLadderStatsDone)
	MAP_NATIVE(UXboxLiveManager,execGetMyLadderStats)
	MAP_NATIVE(UXboxLiveManager,execStatsGetFriendsResultFlagsCap)
	MAP_NATIVE(UXboxLiveManager,execStatsGetFriendsResultFlagsRet)
	MAP_NATIVE(UXboxLiveManager,execStatsGetFriendsResultSuicides)
	MAP_NATIVE(UXboxLiveManager,execStatsGetFriendsResultGamesWon)
	MAP_NATIVE(UXboxLiveManager,execStatsGetFriendsResultGames)
	MAP_NATIVE(UXboxLiveManager,execStatsGetFriendsResultMinutes)
	MAP_NATIVE(UXboxLiveManager,execStatsGetFriendsResultDeaths)
	MAP_NATIVE(UXboxLiveManager,execStatsGetFriendsResultKills)
	MAP_NATIVE(UXboxLiveManager,execStatsGetFriendsResultName)
	MAP_NATIVE(UXboxLiveManager,execStatsGetFriendsResultPosition)
	MAP_NATIVE(UXboxLiveManager,execStatsGetFriendsResultCount)
	MAP_NATIVE(UXboxLiveManager,execStatsGetResultFlagsCap)
	MAP_NATIVE(UXboxLiveManager,execStatsGetResultFlagsRet)
	MAP_NATIVE(UXboxLiveManager,execStatsGetResultSuicides)
	MAP_NATIVE(UXboxLiveManager,execStatsGetResultGamesWon)
	MAP_NATIVE(UXboxLiveManager,execStatsGetResultGames)
	MAP_NATIVE(UXboxLiveManager,execStatsGetResultMinutes)
	MAP_NATIVE(UXboxLiveManager,execStatsGetResultDeaths)
	MAP_NATIVE(UXboxLiveManager,execStatsGetResultKills)
	MAP_NATIVE(UXboxLiveManager,execStatsGetResultName)
	MAP_NATIVE(UXboxLiveManager,execStatsGetResultPosition)
	MAP_NATIVE(UXboxLiveManager,execStatsGetResultCount)
	MAP_NATIVE(UXboxLiveManager,execWasMyStatsUpdateSuccessful)
	MAP_NATIVE(UXboxLiveManager,execIsMyStatsUpdateDone)
	MAP_NATIVE(UXboxLiveManager,execStatsUpdateMyStats)
	MAP_NATIVE(UXboxLiveManager,execStatsCancelRequestUser)
	MAP_NATIVE(UXboxLiveManager,execStatsPumpRequestUser)
	MAP_NATIVE(UXboxLiveManager,execStatsRequestUser)
	MAP_NATIVE(UXboxLiveManager,execStatsCancelRequestFriends)
	MAP_NATIVE(UXboxLiveManager,execStatsPumpRequestFriends)
	MAP_NATIVE(UXboxLiveManager,execStatsRequestFriends)
	MAP_NATIVE(UXboxLiveManager,execStatsCancelRequestOverall)
	MAP_NATIVE(UXboxLiveManager,execStatsPumpRequestOverall)
	MAP_NATIVE(UXboxLiveManager,execStatsRequestOverall)
	MAP_NATIVE(UXboxLiveManager,execStatsCancelReset)
	MAP_NATIVE(UXboxLiveManager,execStatsPumpReset)
	MAP_NATIVE(UXboxLiveManager,execStatsReset)
	MAP_NATIVE(UXboxLiveManager,execGetStatisticsType)
	MAP_NATIVE(UXboxLiveManager,execStatsStopCachingLeaderboard)
	MAP_NATIVE(UXboxLiveManager,execStatsSetRequestedRank)
	MAP_NATIVE(UXboxLiveManager,execStatsGetActiveUserRank)
	MAP_NATIVE(UXboxLiveManager,execStatsIsRankReady)
	MAP_NATIVE(UXboxLiveManager,execStatsGetLeaderboardSize)
	MAP_NATIVE(UXboxLiveManager,execSetStatisticsType)
	MAP_NATIVE(UXboxLiveManager,execIsKicked)
	MAP_NATIVE(UXboxLiveManager,execIsServerDown)
	MAP_NATIVE(UXboxLiveManager,execGetVoiceMaskEnabled)
	MAP_NATIVE(UXboxLiveManager,execSetVoiceMaskEnabled)
	MAP_NATIVE(UXboxLiveManager,execGetVoiceMaskRoboticValue)
	MAP_NATIVE(UXboxLiveManager,execGetVoiceMaskWhisperValue)
	MAP_NATIVE(UXboxLiveManager,execGetVoiceMaskPitchScale)
	MAP_NATIVE(UXboxLiveManager,execGetVoiceMaskSpecEnergyWeight)
	MAP_NATIVE(UXboxLiveManager,execSetVoiceMaskRoboticValue)
	MAP_NATIVE(UXboxLiveManager,execSetVoiceMaskWhisperValue)
	MAP_NATIVE(UXboxLiveManager,execSetVoiceMaskPitchScale)
	MAP_NATIVE(UXboxLiveManager,execSetVoiceMaskSpecEnergyWeight)
	MAP_NATIVE(UXboxLiveManager,execGetVoiceMask)
	MAP_NATIVE(UXboxLiveManager,execSetVoiceMask)
	MAP_NATIVE(UXboxLiveManager,execGetVoiceStatus)
	MAP_NATIVE(UXboxLiveManager,execSetVoiceStatus)
	MAP_NATIVE(UXboxLiveManager,execGetOnlineStatus)
	MAP_NATIVE(UXboxLiveManager,execSetOnlineStatus)
	MAP_NATIVE(UXboxLiveManager,execGetVoiceThroughSpeakers)
	MAP_NATIVE(UXboxLiveManager,execSetVoiceThroughSpeakers)
	MAP_NATIVE(UXboxLiveManager,execIsPlayerOnMuteListByName)
	MAP_NATIVE(UXboxLiveManager,execRemovePlayerFromMuteListByName)
	MAP_NATIVE(UXboxLiveManager,execAddPlayerToMuteListByName)
	MAP_NATIVE(UXboxLiveManager,execIsPlayerOnMuteList)
	MAP_NATIVE(UXboxLiveManager,execRemovePlayerFromMuteList)
	MAP_NATIVE(UXboxLiveManager,execAddPlayerToMuteList)
	MAP_NATIVE(UXboxLiveManager,execIsPlayerInGame)
	MAP_NATIVE(UXboxLiveManager,execHasPlayerVoice)
	MAP_NATIVE(UXboxLiveManager,execIsPlayerMuted)
	MAP_NATIVE(UXboxLiveManager,execIsPlayerTalking)
	MAP_NATIVE(UXboxLiveManager,execGetPlayerName)
	MAP_NATIVE(UXboxLiveManager,execGetNumberOfPlayers)
	MAP_NATIVE(UXboxLiveManager,execUpdatePlayersTalking)
	MAP_NATIVE(UXboxLiveManager,execCachePlayerList)
	MAP_NATIVE(UXboxLiveManager,execGetRecommendedPlayers)
	MAP_NATIVE(UXboxLiveManager,execGetNiceName)
	MAP_NATIVE(UXboxLiveManager,execGetRandomMap)
	MAP_NATIVE(UXboxLiveManager,execGetNextMap)
	MAP_NATIVE(UXboxLiveManager,execGetFirstMap)
	MAP_NATIVE(UXboxLiveManager,execGetGamerTag)
	MAP_NATIVE(UXboxLiveManager,execVerifyIPLoggedIn)
	MAP_NATIVE(UXboxLiveManager,execHasUserVoice)
	MAP_NATIVE(UXboxLiveManager,execGetSearchLanguage)
	MAP_NATIVE(UXboxLiveManager,execGetSearchFriendlyFire)
	MAP_NATIVE(UXboxLiveManager,execGetSearchMap)
	MAP_NATIVE(UXboxLiveManager,execGetSearchGameType)
	MAP_NATIVE(UXboxLiveManager,execSetSearchParams)
	MAP_NATIVE(UXboxLiveManager,execSetLadderGame)
	MAP_NATIVE(UXboxLiveManager,execIsLadderGame)
	MAP_NATIVE(UXboxLiveManager,execGetUserInvitedAfterBoot)
	MAP_NATIVE(UXboxLiveManager,execGetFriendInviterAfterBoot)
	MAP_NATIVE(UXboxLiveManager,execResetJoiningAfterBoot)
	MAP_NATIVE(UXboxLiveManager,execIsJoiningAfterBoot)
	MAP_NATIVE(UXboxLiveManager,execGetLastError)
	MAP_NATIVE(UXboxLiveManager,execSetUserState)
	MAP_NATIVE(UXboxLiveManager,execShutdownAndCleanup)
	MAP_NATIVE(UXboxLiveManager,execGetCurrentUser)
	MAP_NATIVE(UXboxLiveManager,execSetCurrentUser)
	MAP_NATIVE(UXboxLiveManager,execIsIngame)
	MAP_NATIVE(UXboxLiveManager,execIsPlaying)
	MAP_NATIVE(UXboxLiveManager,execErrorLoggingIn)
	MAP_NATIVE(UXboxLiveManager,execIsLoggedIn)
	MAP_NATIVE(UXboxLiveManager,execStartLogin)
	MAP_NATIVE(UXboxLiveManager,execIsPasscodeCorrect)
	MAP_NATIVE(UXboxLiveManager,execHasPasscode)
	MAP_NATIVE(UXboxLiveManager,execRebootToDashboard)
	MAP_NATIVE(UXboxLiveManager,execIsAccountListUpdated)
	MAP_NATIVE(UXboxLiveManager,execGetAccountName)
	MAP_NATIVE(UXboxLiveManager,execGetNumberOfAccounts)
	MAP_NATIVE(UXboxLiveManager,execIsLoggedInTwice)
	MAP_NATIVE(UXboxLiveManager,execIsNetCableIn)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UXboxLiveManager);

NATIVE_INFO(UMatchMakingManager) GEngineUMatchMakingManagerNatives[] = 
{ 
	MAP_NATIVE(UMatchMakingManager,execPSX2McCheckPort)
	MAP_NATIVE(UMatchMakingManager,execPSX2DNASProgress)
	MAP_NATIVE(UMatchMakingManager,execPSX2DNASAuthenticate)
	MAP_NATIVE(UMatchMakingManager,execPSX2DNASExit)
	MAP_NATIVE(UMatchMakingManager,execPSX2DNASInit)
	MAP_NATIVE(UMatchMakingManager,execPSX2NetCtlGetStatus)
	MAP_NATIVE(UMatchMakingManager,execPSX2NetCtlDown)
	MAP_NATIVE(UMatchMakingManager,execPSX2NetCtlUp)
	MAP_NATIVE(UMatchMakingManager,execPSX2NetCtlBind)
	MAP_NATIVE(UMatchMakingManager,execPSX2NetCtlExit)
	MAP_NATIVE(UMatchMakingManager,execPSX2NetCtlInit)
	MAP_NATIVE(UMatchMakingManager,execPSX2NetCnfSelectCombination)
	MAP_NATIVE(UMatchMakingManager,execPSX2NetCnfGetDefault)
	MAP_NATIVE(UMatchMakingManager,execPSX2NetCnfGetCombination)
	MAP_NATIVE(UMatchMakingManager,execPSX2NetCnfGetCombinationList)
	MAP_NATIVE(UMatchMakingManager,execPSX2NetCnfExit)
	MAP_NATIVE(UMatchMakingManager,execPSX2NetCnfInit)
	MAP_NATIVE(UMatchMakingManager,execPSX2NetCnfGetResult)
	MAP_NATIVE(UMatchMakingManager,execPSX2NetCnfGetState)
	MAP_NATIVE(UMatchMakingManager,execPSX2SwitchToOfflineMode)
	MAP_NATIVE(UMatchMakingManager,execPSX2SwitchToOnlineMode)
	MAP_NATIVE(UMatchMakingManager,execIsMyGameServerStillRegistered)
	MAP_NATIVE(UMatchMakingManager,execUnregisterMyGameServer)
	MAP_NATIVE(UMatchMakingManager,execIsMatchFinishedAcknowledged)
	MAP_NATIVE(UMatchMakingManager,execMatchFinished)
	MAP_NATIVE(UMatchMakingManager,execIsStartMatchAcknowledged)
	MAP_NATIVE(UMatchMakingManager,execStartMatch)
	MAP_NATIVE(UMatchMakingManager,execIsMyGameServerUpdated)
	MAP_NATIVE(UMatchMakingManager,execUpdateMyGameServer)
	MAP_NATIVE(UMatchMakingManager,execAllPlayerConnectedToMyGameServer)
	MAP_NATIVE(UMatchMakingManager,execIsMyGameServerRegistered)
	MAP_NATIVE(UMatchMakingManager,execRegisterMyGameServer)
	MAP_NATIVE(UMatchMakingManager,execIsConnectionLostWithGS)
	MAP_NATIVE(UMatchMakingManager,execLeaveGameServer)
	MAP_NATIVE(UMatchMakingManager,execIFinishMatch)
	MAP_NATIVE(UMatchMakingManager,execIStartMatch)
	MAP_NATIVE(UMatchMakingManager,execIsMatchStartedByGameServer)
	MAP_NATIVE(UMatchMakingManager,execIsJoinGameServerAcknowledged)
	MAP_NATIVE(UMatchMakingManager,execJoinGameServer)
	MAP_NATIVE(UMatchMakingManager,execIsGameServerAdditionalInfoArrived)
	MAP_NATIVE(UMatchMakingManager,execRequestGameServerAdditionalInfo)
	MAP_NATIVE(UMatchMakingManager,execIsGameServerRefreshed)
	MAP_NATIVE(UMatchMakingManager,execRefreshGameServer)
	MAP_NATIVE(UMatchMakingManager,execAllGameServer)
	MAP_NATIVE(UMatchMakingManager,execIsPlayerAccountModified)
	MAP_NATIVE(UMatchMakingManager,execModifyPlayerAccount)
	MAP_NATIVE(UMatchMakingManager,execIsGameServerListComplete)
	MAP_NATIVE(UMatchMakingManager,execRequestGameServerList)
	MAP_NATIVE(UMatchMakingManager,execLogout)
	MAP_NATIVE(UMatchMakingManager,execLogin)
	MAP_NATIVE(UMatchMakingManager,execIsAccountValidityChecked)
	MAP_NATIVE(UMatchMakingManager,execCheckAccountValidity)
	MAP_NATIVE(UMatchMakingManager,execIsPlayerAccountCreated)
	MAP_NATIVE(UMatchMakingManager,execCreatePlayerAccount)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UMatchMakingManager);

NATIVE_INFO(UVideoPlayer) GEngineUVideoPlayerNatives[] = 
{ 
	MAP_NATIVE(UVideoPlayer,execGetStatus)
	MAP_NATIVE(UVideoPlayer,execSetSoundTrack)
	MAP_NATIVE(UVideoPlayer,execSetSoundVolume)
	MAP_NATIVE(UVideoPlayer,execResume)
	MAP_NATIVE(UVideoPlayer,execPause)
	MAP_NATIVE(UVideoPlayer,execStop)
	MAP_NATIVE(UVideoPlayer,execPlay)
	MAP_NATIVE(UVideoPlayer,execOpen)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UVideoPlayer);

NATIVE_INFO(ATrail) GEngineATrailNatives[] = 
{ 
	MAP_NATIVE(ATrail,execAddSection)
	MAP_NATIVE(ATrail,execReset)
	MAP_NATIVE(ATrail,execInit)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ATrail);

NATIVE_INFO(UTexture) GEngineUTextureNatives[] = 
{ 
	MAP_NATIVE(UTexture,execGetAnimLength)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UTexture);

NATIVE_INFO(UParticleEmitter) GEngineUParticleEmitterNatives[] = 
{ 
	MAP_NATIVE(UParticleEmitter,execSetMaxParticles)
	MAP_NATIVE(UParticleEmitter,execSpawnParticle)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UParticleEmitter);

NATIVE_INFO(UInteractionMaster) GEngineUInteractionMasterNatives[] = 
{ 
	MAP_NATIVE(UInteractionMaster,execTravel)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UInteractionMaster);

NATIVE_INFO(UInteraction) GEngineUInteractionNatives[] = 
{ 
	MAP_NATIVE(UInteraction,execScreenToWorld)
	MAP_NATIVE(UInteraction,execWorldToScreen)
	MAP_NATIVE(UInteraction,execConsoleCommand)
	MAP_NATIVE(UInteraction,execInitialize)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UInteraction);

NATIVE_INFO(UForceFeedbackController) GEngineUForceFeedbackControllerNatives[] = 
{ 
	MAP_NATIVE(UForceFeedbackController,execStartEffect)
	MAP_NATIVE(UForceFeedbackController,execEnableForceFeedback)
	MAP_NATIVE(UForceFeedbackController,execIsForceFeedbackEnable)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UForceFeedbackController);

NATIVE_INFO(UCanvas) GEngineUCanvasNatives[] = 
{ 
	MAP_NATIVE(UCanvas,execMakeColor)
	MAP_NATIVE(UCanvas,execSetDrawColor)
	MAP_NATIVE(UCanvas,execGetScreenHeight)
	MAP_NATIVE(UCanvas,execSetClip)
	MAP_NATIVE(UCanvas,execSetOrigin)
	MAP_NATIVE(UCanvas,execSetPos)
	MAP_NATIVE(UCanvas,execDealWithResetEvent)
	MAP_NATIVE(UCanvas,execDrawMsgboxBackground)
	MAP_NATIVE(UCanvas,execDrawCineFrame)
	MAP_NATIVE(UCanvas,execDrawTextJustified)
	MAP_NATIVE(UCanvas,execDrawTileScaled)
	MAP_NATIVE(UCanvas,execDrawTileJustified)
	MAP_NATIVE(UCanvas,execDrawTileStretched)
	MAP_NATIVE(UCanvas,execWrapStringToArray)
	MAP_NATIVE(UCanvas,execDrawLine)
	MAP_NATIVE(UCanvas,execDrawPortal)
	MAP_NATIVE(UCanvas,execTextSize)
	MAP_NATIVE(UCanvas,execDrawTextClipped)
	MAP_NATIVE(UCanvas,execDrawTileClipped)
	MAP_NATIVE(UCanvas,execDrawActor)
	MAP_NATIVE(UCanvas,execDrawTile)
	MAP_NATIVE(UCanvas,execDrawText)
	MAP_NATIVE(UCanvas,execStrLen)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,UCanvas);

NATIVE_INFO(AVolume) GEngineAVolumeNatives[] = 
{ 
	MAP_NATIVE(AVolume,execEncompasses)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AVolume);

NATIVE_INFO(APlayerController) GEngineAPlayerControllerNatives[] = 
{ 
	MAP_NATIVE(APlayerController,execViewShake)
	MAP_NATIVE(APlayerController,execCalcFirstPersonView)
	MAP_NATIVE(APlayerController,execAdjustAimForDisplay)
	MAP_NATIVE(APlayerController,execHandleWalking)
	MAP_NATIVE(APlayerController,execCheckBob)
	MAP_NATIVE(APlayerController,execViewFlash)
	MAP_NATIVE(APlayerController,execFindStairRotation)
	MAP_NATIVE(APlayerController,execPasteFromClipboard)
	MAP_NATIVE(APlayerController,execCopyToClipboard)
	MAP_NATIVE(APlayerController,execGetDefaultURL)
	MAP_NATIVE(APlayerController,execUpdateURL)
	MAP_NATIVE(APlayerController,execClientTravel)
	MAP_NATIVE(APlayerController,execSetViewTarget)
	MAP_NATIVE(APlayerController,execResetKeyboard)
	MAP_NATIVE(APlayerController,execGetEntryLevel)
	MAP_NATIVE(APlayerController,execConsoleCommand)
	MAP_NATIVE(APlayerController,execGetPlayerNetworkAddress)
	MAP_NATIVE(APlayerController,execOptimizeInputBindings)
	MAP_NATIVE(APlayerController,execAttribPadToViewport)
	MAP_NATIVE(APlayerController,execGetPadNumber)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,APlayerController);

NATIVE_INFO(AAmmunition) GEngineAAmmunitionNatives[] = 
{ 
	MAP_NATIVE(AAmmunition,execHasAmmo)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AAmmunition);

NATIVE_INFO(AStatLogFile) GEngineAStatLogFileNatives[] = 
{ 
	MAP_NATIVE(AStatLogFile,execFileLog)
	MAP_NATIVE(AStatLogFile,execFileFlush)
	MAP_NATIVE(AStatLogFile,execGetChecksum)
	MAP_NATIVE(AStatLogFile,execWatermark)
	MAP_NATIVE(AStatLogFile,execCloseLog)
	MAP_NATIVE(AStatLogFile,execOpenLog)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AStatLogFile);

NATIVE_INFO(AStatLog) GEngineAStatLogNatives[] = 
{ 
	MAP_NATIVE(AStatLog,execGetMapFileName)
	MAP_NATIVE(AStatLog,execGetGMTRef)
	MAP_NATIVE(AStatLog,execGetPlayerChecksum)
	MAP_NATIVE(AStatLog,execLogMutator)
	MAP_NATIVE(AStatLog,execInitialCheck)
	MAP_NATIVE(AStatLog,execBrowseRelativeLocalURL)
	MAP_NATIVE(AStatLog,execExecuteWorldLogBatcher)
	MAP_NATIVE(AStatLog,execBatchLocal)
	MAP_NATIVE(AStatLog,execExecuteSilentLogBatcher)
	MAP_NATIVE(AStatLog,execExecuteLocalLogBatcher)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AStatLog);

NATIVE_INFO(AHUD) GEngineAHUDNatives[] = 
{ 
	MAP_NATIVE(AHUD,execDrawWeaponsList)
	MAP_NATIVE(AHUD,execDrawAmmo)
	MAP_NATIVE(AHUD,execDrawPlayerInfo)
	MAP_NATIVE(AHUD,execDrawStdBackground)
	MAP_NATIVE(AHUD,execDraw3DLine)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AHUD);

NATIVE_INFO(AWarpZoneInfo) GEngineAWarpZoneInfoNatives[] = 
{ 
	MAP_NATIVE(AWarpZoneInfo,execUnWarp)
	MAP_NATIVE(AWarpZoneInfo,execWarp)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AWarpZoneInfo);

NATIVE_INFO(AZoneInfo) GEngineAZoneInfoNatives[] = 
{ 
	MAP_NATIVE(AZoneInfo,execZoneActors)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AZoneInfo);

NATIVE_INFO(AGameInfo) GEngineAGameInfoNatives[] = 
{ 
	MAP_NATIVE(AGameInfo,execParseKillMessage)
	MAP_NATIVE(AGameInfo,execGetNetworkNumber)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AGameInfo);

NATIVE_INFO(ALevelInfo) GEngineALevelInfoNatives[] = 
{ 
	MAP_NATIVE(ALevelInfo,execGetPlateForme)
	MAP_NATIVE(ALevelInfo,execDecalScreen)
	MAP_NATIVE(ALevelInfo,execGetAvailableRes)
	MAP_NATIVE(ALevelInfo,execSetOnlyPostRender)
	MAP_NATIVE(ALevelInfo,execSetViewport)
	MAP_NATIVE(ALevelInfo,execSetInjuredEffect)
	MAP_NATIVE(ALevelInfo,execSetSharpEffect)
	MAP_NATIVE(ALevelInfo,execSetBlurEffect)
	MAP_NATIVE(ALevelInfo,execSetPoisonEffect)
	MAP_NATIVE(ALevelInfo,execSetRndCubeSprSize)
	MAP_NATIVE(ALevelInfo,execAddRndCubeSprExclude)
	MAP_NATIVE(ALevelInfo,execChangeRndCubeSprProp)
	MAP_NATIVE(ALevelInfo,execSetRndCubeSprSpeed)
	MAP_NATIVE(ALevelInfo,execSetRndCubeSprState)
	MAP_NATIVE(ALevelInfo,execInitRndCubeSpr)
	MAP_NATIVE(ALevelInfo,execGetAddressURL)
	MAP_NATIVE(ALevelInfo,execGetLocalURL)
	MAP_NATIVE(ALevelInfo,execDecAttaque)
	MAP_NATIVE(ALevelInfo,execIncAttaque)
	MAP_NATIVE(ALevelInfo,execDecAlerte)
	MAP_NATIVE(ALevelInfo,execIncAlerte)
	MAP_NATIVE(ALevelInfo,execDecAttente)
	MAP_NATIVE(ALevelInfo,execIncAttente)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,ALevelInfo);

NATIVE_INFO(AWeapon) GEngineAWeaponNatives[] = 
{ 
	MAP_NATIVE(AWeapon,execPlayFiringSound)
	MAP_NATIVE(AWeapon,execGetFireStart)
	MAP_NATIVE(AWeapon,execHasAmmo)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,AWeapon);

NATIVE_INFO(URenderTargetMaterial) GEngineURenderTargetMaterialNatives[] = 
{ 
	MAP_NATIVE(URenderTargetMaterial,execFreeRect)
	MAP_NATIVE(URenderTargetMaterial,execAllocRect)
	MAP_NATIVE(URenderTargetMaterial,execUpdate)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(Engine,URenderTargetMaterial);

#endif // NATIVES_ONLY
#endif // __STATIC_LINK

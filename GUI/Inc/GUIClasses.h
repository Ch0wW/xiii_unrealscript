/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef GUI_API
#define GUI_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern GUI_API FName GUI_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(Timer)
AUTOGENERATE_NAME(Tick)
AUTOGENERATE_NAME(Initialize)
AUTOGENERATE_NAME(SetFocus)
AUTOGENERATE_NAME(AlignThumb)
AUTOGENERATE_NAME(OnChange)
AUTOGENERATE_NAME(MenuStateChange)
AUTOGENERATE_NAME(FocusFirst)
AUTOGENERATE_NAME(PrevControl)
AUTOGENERATE_NAME(LoseFocus)
AUTOGENERATE_NAME(NextControl)
AUTOGENERATE_NAME(FocusLast)
AUTOGENERATE_NAME(OnClick)
AUTOGENERATE_NAME(OnActivate)
AUTOGENERATE_NAME(FindComponentIndex)
AUTOGENERATE_NAME(GetStyle)
AUTOGENERATE_NAME(OnDeActivate)
AUTOGENERATE_NAME(HandleParameters)
AUTOGENERATE_NAME(OnAdjustTop)
AUTOGENERATE_NAME(PrevPage)
AUTOGENERATE_NAME(NextPage)
AUTOGENERATE_NAME(OnSaveINI)
AUTOGENERATE_NAME(OnLoadINI)
AUTOGENERATE_NAME(OnWatch)
AUTOGENERATE_NAME(OnDraw)
AUTOGENERATE_NAME(OnScrollZoneClick)
AUTOGENERATE_NAME(GetMenuFont)
AUTOGENERATE_NAME(OnClose)
AUTOGENERATE_NAME(OnReOpen)
AUTOGENERATE_NAME(OnOpen)
AUTOGENERATE_NAME(OnCanClose)
AUTOGENERATE_NAME(ChangeHint)
AUTOGENERATE_NAME(OnDrawCaption)
AUTOGENERATE_NAME(ButtonReleased)
AUTOGENERATE_NAME(OnDrawItem)
AUTOGENERATE_NAME(ButtonPressed)
AUTOGENERATE_NAME(CompareItem)
AUTOGENERATE_NAME(Swap)
AUTOGENERATE_NAME(OnCapturedMouseMove)
AUTOGENERATE_NAME(OnKeyEvent)
AUTOGENERATE_NAME(OnKeyType)
AUTOGENERATE_NAME(OnMouseRelease)
AUTOGENERATE_NAME(OnMousePressed)
AUTOGENERATE_NAME(OnRightClick)
AUTOGENERATE_NAME(OnDblClick)
AUTOGENERATE_NAME(OnInvalidate)
AUTOGENERATE_NAME(OnMessage)
AUTOGENERATE_NAME(OnRender)
AUTOGENERATE_NAME(OnHitTest)
AUTOGENERATE_NAME(OnPreDraw)
AUTOGENERATE_NAME(OnDrawText)
AUTOGENERATE_NAME(OnNeedRawKeyPress)
AUTOGENERATE_NAME(GetFont)
AUTOGENERATE_NAME(ChangeFocus)
AUTOGENERATE_NAME(MoveFocused)
AUTOGENERATE_NAME(NoInputTimeOut)

#ifndef NAMES_ONLY


struct UGUIController_eventNoInputTimeOut_Parms
{
};
struct UGUIController_eventMoveFocused_Parms
{
    class UGUIComponent* Ctrl;
    INT bmLeft;
    INT bmTop;
    INT bmWidth;
    INT bmHeight;
    FLOAT ClipX;
    FLOAT ClipY;
};
struct UGUIController_eventChangeFocus_Parms
{
    class UGUIComponent* Who;
};
struct UGUIController_eventOnNeedRawKeyPress_Parms
{
    BYTE NewKey;
    BITFIELD ReturnValue;
};
struct UGUIController_eventGetStyle_Parms
{
    FString StyleName;
    class UGUIStyles* ReturnValue;
};
struct UGUIController_eventGetMenuFont_Parms
{
    FString FontName;
    class UGUIFont* ReturnValue;
};
class GUI_API UGUIController : public UBaseGUIController
{
public:
    TArrayNoInit<class UGUIPage*> MenuStack;
    class UGUIPage* ActivePage;
    TArrayNoInit<class UGUIFont*> FontStack;
    TArrayNoInit<class UGUIStyles*> StyleStack;
    TArrayNoInit<FString> StyleNames;
    TArrayNoInit<class UMaterial*> MouseCursors;
    TArrayNoInit<FVector> MouseCursorOffset;
    class UXIIIMenuData* myMenuData;
    BITFIELD bContinueWithoutSaving:1 GCC_PACK(4);
    BITFIELD bSavingPossible:1;
    BITFIELD bLoadingPossible:1;
    BITFIELD bProfileSelected:1;
    INT MouseX GCC_PACK(4);
    INT MouseY;
    INT LastMouseX;
    INT LastMouseY;
    BITFIELD ShiftPressed:1 GCC_PACK(4);
    BITFIELD AltPressed:1;
    BITFIELD CtrlPressed:1;
    BITFIELD CableDisconnected:1;
    FLOAT DblClickWindow GCC_PACK(4);
    FLOAT LastClickTime;
    INT LastClickX;
    INT LastClickY;
    FLOAT ButtonRepeatDelay;
    BYTE RepeatKey;
    FLOAT RepeatDelta;
    FLOAT RepeatTime;
    FLOAT CursorFade;
    INT CursorStep;
    FLOAT FastCursorFade;
    INT FastCursorStep;
    class UGUIComponent* FocusedControl;
    class UGUIComponent* ActiveControl;
    class UGUIComponent* SkipControl;
    class UGUIComponent* MoveControl;
    BITFIELD bIgnoreNextRelease:1 GCC_PACK(4);
    BITFIELD bHighlightCurrent:1;
    BITFIELD bCurMenuInitialized:1;
    FStringNoInit GameResolution GCC_PACK(4);
    FLOAT MenuMouseSens;
    BITFIELD MainNotWanted:1 GCC_PACK(4);
    class USound* MouseOverSound GCC_PACK(4);
    class USound* ClickSound;
    class USound* EditSound;
    class USound* UpSound;
    class USound* DownSound;
    BITFIELD bForceMouseCheck:1 GCC_PACK(4);
    BITFIELD bIgnoreUntilPress:1;
    BITFIELD TimeOutArmed:1;
    FLOAT DelayOfInactivityBeforeCallingTimeOut GCC_PACK(4);
    FLOAT TimeOfLastInput;
    class UMaterial* DefaultPens[2];
    class UVideoPlayer* VP;
    FStringNoInit URL;
    FScriptDelegate __OnNeedRawKeyPress__Delegate;
    DECLARE_FUNCTION(execGetConnectionStatus);
    DECLARE_FUNCTION(execSetInputTimeOut);
    DECLARE_FUNCTION(execEndOfPressStartPage);
    DECLARE_FUNCTION(execIsWriteUserConfigFinished);
    DECLARE_FUNCTION(execRequestWriteUserConfig);
    DECLARE_FUNCTION(execIsReadUserConfigFinished);
    DECLARE_FUNCTION(execRequestReadUserConfig);
    DECLARE_FUNCTION(execIsWriteSlotFinished);
    DECLARE_FUNCTION(execRequestWriteSlot);
    DECLARE_FUNCTION(execIsReadSlotFinished);
    DECLARE_FUNCTION(execRequestReadSlot);
    DECLARE_FUNCTION(execIsEraseSlotFinished);
    DECLARE_FUNCTION(execRequestEraseSlot);
    DECLARE_FUNCTION(execIsGetSlotContentDateAndTimeFinished);
    DECLARE_FUNCTION(execRequestGetSlotContentDateAndTime);
    DECLARE_FUNCTION(execIsGetSlotContentDescriptionFinished);
    DECLARE_FUNCTION(execRequestGetSlotContentDescription);
    DECLARE_FUNCTION(execIsSlotEmptyFinished);
    DECLARE_FUNCTION(execRequestIsSlotEmpty);
    DECLARE_FUNCTION(execGetMaxNumberOfSavingSlots);
    DECLARE_FUNCTION(execGetDefaultDescription);
    DECLARE_FUNCTION(execLoadAtCheckpoint);
    DECLARE_FUNCTION(execIsThereACheckpoint);
    DECLARE_FUNCTION(execIsGetProfileListFinished);
    DECLARE_FUNCTION(execRequestGetProfileList);
    DECLARE_FUNCTION(execSetMemoryCardActivation);
    DECLARE_FUNCTION(execHasMemoryCardBeenChanged);
    DECLARE_FUNCTION(execIsMemoryCardReady);
    DECLARE_FUNCTION(execStartNewCheckOnMemoryCardForThisProfile);
    DECLARE_FUNCTION(execDoesMemoryCardIncludeThisProfile);
    DECLARE_FUNCTION(execIsUseProfileFinished);
    DECLARE_FUNCTION(execRequestUseProfile);
    DECLARE_FUNCTION(execIsCreateProfileFinished);
    DECLARE_FUNCTION(execRequestCreateProfile);
    DECLARE_FUNCTION(execIsSavingMediaAvailable);
    DECLARE_FUNCTION(execInitStateFrame);
    DECLARE_FUNCTION(execRebootToDashboardFromScripts);
    DECLARE_FUNCTION(execResetKeyboard);
    DECLARE_FUNCTION(execGetXIIIEngineVersion);
    DECLARE_FUNCTION(execInitController);
    DECLARE_FUNCTION(execGetMainMenuClass);
    DECLARE_FUNCTION(execGetCurrentRes);
    DECLARE_FUNCTION(execGetStyle);
    DECLARE_FUNCTION(execGetMenuFont);
    void eventNoInputTimeOut()
    {
        ProcessEvent(FindFunctionChecked(GUI_NoInputTimeOut),NULL);
    }
    void eventMoveFocused(class UGUIComponent* Ctrl, INT bmLeft, INT bmTop, INT bmWidth, INT bmHeight, FLOAT ClipX, FLOAT ClipY)
    {
        UGUIController_eventMoveFocused_Parms Parms;
        Parms.Ctrl=Ctrl;
        Parms.bmLeft=bmLeft;
        Parms.bmTop=bmTop;
        Parms.bmWidth=bmWidth;
        Parms.bmHeight=bmHeight;
        Parms.ClipX=ClipX;
        Parms.ClipY=ClipY;
        ProcessEvent(FindFunctionChecked(GUI_MoveFocused),&Parms);
    }
    void eventChangeFocus(class UGUIComponent* Who)
    {
        UGUIController_eventChangeFocus_Parms Parms;
        Parms.Who=Who;
        ProcessEvent(FindFunctionChecked(GUI_ChangeFocus),&Parms);
    }
    BITFIELD delegateOnNeedRawKeyPress(BYTE NewKey)
    {
        UGUIController_eventOnNeedRawKeyPress_Parms Parms;
        Parms.ReturnValue=0;
        Parms.NewKey=NewKey;
        ProcessDelegate(GUI_OnNeedRawKeyPress,&__OnNeedRawKeyPress__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    class UGUIStyles* eventGetStyle(const FString& StyleName)
    {
        UGUIController_eventGetStyle_Parms Parms;
        Parms.ReturnValue=0;
        Parms.StyleName=StyleName;
        ProcessEvent(FindFunctionChecked(GUI_GetStyle),&Parms);
        return Parms.ReturnValue;
    }
    class UGUIFont* eventGetMenuFont(const FString& FontName)
    {
        UGUIController_eventGetMenuFont_Parms Parms;
        Parms.ReturnValue=0;
        Parms.FontName=FontName;
        ProcessEvent(FindFunctionChecked(GUI_GetMenuFont),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUIController,UBaseGUIController,0|CLASS_Config,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIController)
};

enum ePageAlign
{
    PGA_None                =0,
    PGA_Client              =1,
    PGA_Left                =2,
    PGA_Right               =3,
    PGA_Top                 =4,
    PGA_Bottom              =5,
    PGA_MAX                 =6,
};
enum eIconPosition
{
    ICP_Normal              =0,
    ICP_Center              =1,
    ICP_Scaled              =2,
    ICP_Stretched           =3,
    ICP_Bound               =4,
    ICP_MAX                 =5,
};
enum EMenuRenderStyle
{
    MSTY_None               =0,
    MSTY_Normal             =1,
    MSTY_Masked             =2,
    MSTY_Translucent        =3,
    MSTY_Modulated          =4,
    MSTY_Alpha              =5,
    MSTY_Additive           =6,
    MSTY_Subtractive        =7,
    MSTY_Particle           =8,
    MSTY_AlphaZ             =9,
    MSTY_MAX                =10,
};
enum eEditMask
{
    EDM_None                =0,
    EDM_Alpha               =1,
    EDM_Numeric             =2,
    EDM_MAX                 =3,
};
enum eImgAlign
{
    IMGA_TopLeft            =0,
    IMGA_Center             =1,
    IMGA_BottomRight        =2,
    IMGA_MAX                =3,
};
enum eImgStyle
{
    ISTY_Normal             =0,
    ISTY_Stretched          =1,
    ISTY_Scaled             =2,
    ISTY_Bound              =3,
    ISTY_Justified          =4,
    ISTY_MAX                =5,
};
enum eTextCase
{
    TXTC_None               =0,
    TXTC_Upper              =1,
    TXTC_Lower              =2,
    TXTC_MAX                =3,
};
enum eTextAlign
{
    TXTA_Left               =0,
    TXTA_Center             =1,
    TXTA_Right              =2,
    TXTA_MAX                =3,
};
enum eMenuState
{
    MSAT_Blurry             =0,
    MSAT_Watched            =1,
    MSAT_Focused            =2,
    MSAT_Pressed            =3,
    MSAT_Disabled           =4,
    MSAT_MAX                =5,
};
#define UCONST_QBTN_YesNoCancel 50
#define UCONST_QBTN_YesNo 48
#define UCONST_QBTN_AbortRetry 68
#define UCONST_QBTN_OkCancel 3
#define UCONST_QBTN_Ignore 128
#define UCONST_QBTN_Abort 64
#define UCONST_QBTN_No 32
#define UCONST_QBTN_Yes 16
#define UCONST_QBTN_Continue 8
#define UCONST_QBTN_Retry 4
#define UCONST_QBTN_Cancel 2
#define UCONST_QBTN_Ok 1

class GUI_API UGUI : public UObject
{
public:
    class UGUIController* Controller;
    DECLARE_CLASS(UGUI,UObject,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUI)
};

enum EClickSound
{
    GUI_CS_None             =0,
    GUI_CS_Click            =1,
    GUI_CS_Edit             =2,
    GUI_CS_Up               =3,
    GUI_CS_Down             =4,
    GUI_MAX                 =5,
};

struct UGUIComponent_eventPrevPage_Parms
{
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventNextPage_Parms
{
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventPrevControl_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventNextControl_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventFocusLast_Parms
{
    class UGUIComponent* Sender;
    BITFIELD bIgnoreMultiTabStops;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventFocusFirst_Parms
{
    class UGUIComponent* Sender;
    BITFIELD bIgnoreMultiTabStops;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventLoseFocus_Parms
{
    class UGUIComponent* Sender;
};
struct UGUIComponent_eventSetFocus_Parms
{
    class UGUIComponent* Who;
};
struct UGUIComponent_eventMenuStateChange_Parms
{
    BYTE NewState;
};
struct UGUIComponent_eventTimer_Parms
{
};
struct UGUIComponent_eventOnSaveINI_Parms
{
    class UGUIComponent* Sender;
    FString ReturnValue;
};
struct UGUIComponent_eventOnLoadINI_Parms
{
    class UGUIComponent* Sender;
    FString S;
};
struct UGUIComponent_eventOnCapturedMouseMove_Parms
{
    FLOAT deltaX;
    FLOAT deltaY;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnKeyEvent_Parms
{
    BYTE Key;
    BYTE State;
    FLOAT Delta;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnKeyType_Parms
{
    BYTE Key;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnChange_Parms
{
    class UGUIComponent* Sender;
};
struct UGUIComponent_eventOnMouseRelease_Parms
{
    class UGUIComponent* Sender;
};
struct UGUIComponent_eventOnMousePressed_Parms
{
    class UGUIComponent* Sender;
    BITFIELD bRepeat;
};
struct UGUIComponent_eventOnRightClick_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnDblClick_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnClick_Parms
{
    class UGUIComponent* Sender;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnInvalidate_Parms
{
};
struct UGUIComponent_eventOnMessage_Parms
{
    FString msg;
    FLOAT MsgLife;
};
struct UGUIComponent_eventOnRender_Parms
{
    class UCanvas* Canvas;
};
struct UGUIComponent_eventOnHitTest_Parms
{
    FLOAT MouseX;
    FLOAT MouseY;
};
struct UGUIComponent_eventOnWatch_Parms
{
};
struct UGUIComponent_eventOnDeActivate_Parms
{
};
struct UGUIComponent_eventOnActivate_Parms
{
};
struct UGUIComponent_eventOnDraw_Parms
{
    class UCanvas* Canvas;
    BITFIELD ReturnValue;
};
struct UGUIComponent_eventOnPreDraw_Parms
{
    class UCanvas* Canvas;
    BITFIELD ReturnValue;
};
class GUI_API UGUIComponent : public UGUI
{
public:
    class UGUIComponent* MenuOwner;
    BYTE MenuState;
    FStringNoInit IniOption;
    FStringNoInit IniDefault;
    FStringNoInit StyleName;
    BITFIELD bBoundToParent:1 GCC_PACK(4);
    BITFIELD bScaleToParent:1;
    BITFIELD bHasFocus:1;
    BITFIELD bVisible:1;
    BITFIELD bAcceptsInput:1;
    BITFIELD bCaptureTabs:1;
    BITFIELD bCaptureMouse:1;
    BITFIELD bNeverFocus:1;
    BITFIELD bRepeatClick:1;
    BITFIELD bRequireReleaseClick:1;
    class UGUIComponent* FocusInstead GCC_PACK(4);
    FStringNoInit Hint;
    FLOAT WinTop;
    FLOAT WinLeft;
    FLOAT WinWidth;
    FLOAT WinHeight;
    INT MouseCursorIndex;
    BITFIELD bTabStop:1 GCC_PACK(4);
    BITFIELD bFocusOnWatch:1;
    INT Tag GCC_PACK(4);
    class UGUILabel* FriendlyLabel;
    BITFIELD bMouseOverSound:1 GCC_PACK(4);
    BYTE OnClickSound GCC_PACK(4);
    class UGUIStyles* Style;
    FLOAT Bounds[4];
    FLOAT ClientBounds[4];
    BITFIELD bPendingFocus:1 GCC_PACK(4);
    INT TimerIndex GCC_PACK(4);
    BITFIELD bTimerRepeat:1 GCC_PACK(4);
    FLOAT TimerCountdown GCC_PACK(4);
    FLOAT TimerInterval;
    FLOAT SaveX;
    FLOAT SaveY;
    FColor SaveColor;
    class UFont* SaveFont;
    BYTE SaveStyle;
    FScriptDelegate __OnPreDraw__Delegate;
    FScriptDelegate __OnDraw__Delegate;
    FScriptDelegate __OnActivate__Delegate;
    FScriptDelegate __OnDeActivate__Delegate;
    FScriptDelegate __OnWatch__Delegate;
    FScriptDelegate __OnHitTest__Delegate;
    FScriptDelegate __OnRender__Delegate;
    FScriptDelegate __OnMessage__Delegate;
    FScriptDelegate __OnInvalidate__Delegate;
    FScriptDelegate __OnClick__Delegate;
    FScriptDelegate __OnDblClick__Delegate;
    FScriptDelegate __OnRightClick__Delegate;
    FScriptDelegate __OnMousePressed__Delegate;
    FScriptDelegate __OnMouseRelease__Delegate;
    FScriptDelegate __OnChange__Delegate;
    FScriptDelegate __OnKeyType__Delegate;
    FScriptDelegate __OnKeyEvent__Delegate;
    FScriptDelegate __OnCapturedMouseMove__Delegate;
    FScriptDelegate __OnLoadINI__Delegate;
    FScriptDelegate __OnSaveINI__Delegate;
    DECLARE_FUNCTION(execActualTop);
    DECLARE_FUNCTION(execActualLeft);
    DECLARE_FUNCTION(execActualHeight);
    DECLARE_FUNCTION(execActualWidth);
    DECLARE_FUNCTION(execKillTimer);
    DECLARE_FUNCTION(execSetTimer);
    BITFIELD eventPrevPage()
    {
        UGUIComponent_eventPrevPage_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(GUI_PrevPage),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventNextPage()
    {
        UGUIComponent_eventNextPage_Parms Parms;
        Parms.ReturnValue=0;
        ProcessEvent(FindFunctionChecked(GUI_NextPage),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventPrevControl(class UGUIComponent* Sender)
    {
        UGUIComponent_eventPrevControl_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessEvent(FindFunctionChecked(GUI_PrevControl),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventNextControl(class UGUIComponent* Sender)
    {
        UGUIComponent_eventNextControl_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessEvent(FindFunctionChecked(GUI_NextControl),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventFocusLast(class UGUIComponent* Sender, BITFIELD bIgnoreMultiTabStops)
    {
        UGUIComponent_eventFocusLast_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        Parms.bIgnoreMultiTabStops=bIgnoreMultiTabStops;
        ProcessEvent(FindFunctionChecked(GUI_FocusLast),&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD eventFocusFirst(class UGUIComponent* Sender, BITFIELD bIgnoreMultiTabStops)
    {
        UGUIComponent_eventFocusFirst_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        Parms.bIgnoreMultiTabStops=bIgnoreMultiTabStops;
        ProcessEvent(FindFunctionChecked(GUI_FocusFirst),&Parms);
        return Parms.ReturnValue;
    }
    void eventLoseFocus(class UGUIComponent* Sender)
    {
        UGUIComponent_eventLoseFocus_Parms Parms;
        Parms.Sender=Sender;
        ProcessEvent(FindFunctionChecked(GUI_LoseFocus),&Parms);
    }
    void eventSetFocus(class UGUIComponent* Who)
    {
        UGUIComponent_eventSetFocus_Parms Parms;
        Parms.Who=Who;
        ProcessEvent(FindFunctionChecked(GUI_SetFocus),&Parms);
    }
    void eventMenuStateChange(BYTE NewState)
    {
        UGUIComponent_eventMenuStateChange_Parms Parms;
        Parms.NewState=NewState;
        ProcessEvent(FindFunctionChecked(GUI_MenuStateChange),&Parms);
    }
    void eventTimer()
    {
        if(IsProbing(NAME_Timer)) {
        ProcessEvent(FindFunctionChecked(GUI_Timer),NULL);
        }
    }
    FString delegateOnSaveINI(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnSaveINI_Parms Parms;
        Parms.Sender=Sender;
        ProcessDelegate(GUI_OnSaveINI,&__OnSaveINI__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnLoadINI(class UGUIComponent* Sender, const FString& S)
    {
        UGUIComponent_eventOnLoadINI_Parms Parms;
        Parms.Sender=Sender;
        Parms.S=S;
        ProcessDelegate(GUI_OnLoadINI,&__OnLoadINI__Delegate,&Parms);
    }
    BITFIELD delegateOnCapturedMouseMove(FLOAT deltaX, FLOAT deltaY)
    {
        UGUIComponent_eventOnCapturedMouseMove_Parms Parms;
        Parms.ReturnValue=0;
        Parms.deltaX=deltaX;
        Parms.deltaY=deltaY;
        ProcessDelegate(GUI_OnCapturedMouseMove,&__OnCapturedMouseMove__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnKeyEvent(BYTE& Key, BYTE& State, FLOAT Delta)
    {
        UGUIComponent_eventOnKeyEvent_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Key=Key;
        Parms.State=State;
        Parms.Delta=Delta;
        ProcessDelegate(GUI_OnKeyEvent,&__OnKeyEvent__Delegate,&Parms);
        Key=Parms.Key;
        State=Parms.State;
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnKeyType(BYTE& Key)
    {
        UGUIComponent_eventOnKeyType_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Key=Key;
        ProcessDelegate(GUI_OnKeyType,&__OnKeyType__Delegate,&Parms);
        Key=Parms.Key;
        return Parms.ReturnValue;
    }
    void delegateOnChange(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnChange_Parms Parms;
        Parms.Sender=Sender;
        ProcessDelegate(GUI_OnChange,&__OnChange__Delegate,&Parms);
    }
    void delegateOnMouseRelease(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnMouseRelease_Parms Parms;
        Parms.Sender=Sender;
        ProcessDelegate(GUI_OnMouseRelease,&__OnMouseRelease__Delegate,&Parms);
    }
    void delegateOnMousePressed(class UGUIComponent* Sender, BITFIELD bRepeat)
    {
        UGUIComponent_eventOnMousePressed_Parms Parms;
        Parms.Sender=Sender;
        Parms.bRepeat=bRepeat;
        ProcessDelegate(GUI_OnMousePressed,&__OnMousePressed__Delegate,&Parms);
    }
    BITFIELD delegateOnRightClick(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnRightClick_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessDelegate(GUI_OnRightClick,&__OnRightClick__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnDblClick(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnDblClick_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessDelegate(GUI_OnDblClick,&__OnDblClick__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnClick(class UGUIComponent* Sender)
    {
        UGUIComponent_eventOnClick_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Sender=Sender;
        ProcessDelegate(GUI_OnClick,&__OnClick__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnInvalidate()
    {
        ProcessDelegate(GUI_OnInvalidate,&__OnInvalidate__Delegate,NULL);
    }
    void delegateOnMessage(const FString& msg, FLOAT MsgLife)
    {
        UGUIComponent_eventOnMessage_Parms Parms;
        Parms.msg=msg;
        Parms.MsgLife=MsgLife;
        ProcessDelegate(GUI_OnMessage,&__OnMessage__Delegate,&Parms);
    }
    void delegateOnRender(class UCanvas* Canvas)
    {
        UGUIComponent_eventOnRender_Parms Parms;
        Parms.Canvas=Canvas;
        ProcessDelegate(GUI_OnRender,&__OnRender__Delegate,&Parms);
    }
    void delegateOnHitTest(FLOAT MouseX, FLOAT MouseY)
    {
        UGUIComponent_eventOnHitTest_Parms Parms;
        Parms.MouseX=MouseX;
        Parms.MouseY=MouseY;
        ProcessDelegate(GUI_OnHitTest,&__OnHitTest__Delegate,&Parms);
    }
    void delegateOnWatch()
    {
        ProcessDelegate(GUI_OnWatch,&__OnWatch__Delegate,NULL);
    }
    void delegateOnDeActivate()
    {
        ProcessDelegate(GUI_OnDeActivate,&__OnDeActivate__Delegate,NULL);
    }
    void delegateOnActivate()
    {
        ProcessDelegate(GUI_OnActivate,&__OnActivate__Delegate,NULL);
    }
    BITFIELD delegateOnDraw(class UCanvas* Canvas)
    {
        UGUIComponent_eventOnDraw_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Canvas=Canvas;
        ProcessDelegate(GUI_OnDraw,&__OnDraw__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnPreDraw(class UCanvas* Canvas)
    {
        UGUIComponent_eventOnPreDraw_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Canvas=Canvas;
        ProcessDelegate(GUI_OnPreDraw,&__OnPreDraw__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUIComponent,UGUI,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIComponent)
};


struct UGUIButton_eventButtonReleased_Parms
{
};
struct UGUIButton_eventButtonPressed_Parms
{
};
class GUI_API UGUIButton : public UGUIComponent
{
public:
    FStringNoInit Caption;
    void eventButtonReleased()
    {
        ProcessEvent(FindFunctionChecked(GUI_ButtonReleased),NULL);
    }
    void eventButtonPressed()
    {
        ProcessEvent(FindFunctionChecked(GUI_ButtonPressed),NULL);
    }
    DECLARE_CLASS(UGUIButton,UGUIComponent,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIButton)
};


class GUI_API UGUIGFXButton : public UGUIButton
{
public:
    class UMaterial* Graphic;
    BYTE Position;
    BITFIELD bCheckBox:1 GCC_PACK(4);
    BITFIELD bClientBound:1;
    BITFIELD bChecked:1;
    DECLARE_CLASS(UGUIGFXButton,UGUIButton,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIGFXButton)
};


class GUI_API UGUICheckBoxButton : public UGUIGFXButton
{
public:
    DECLARE_CLASS(UGUICheckBoxButton,UGUIGFXButton,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUICheckBoxButton)
};


class GUI_API UGUIVertGripButton : public UGUIGFXButton
{
public:
    DECLARE_CLASS(UGUIVertGripButton,UGUIGFXButton,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIVertGripButton)
};


class GUI_API UGUIVertScrollButton : public UGUIGFXButton
{
public:
    BITFIELD UpButton:1 GCC_PACK(4);
    DECLARE_CLASS(UGUIVertScrollButton,UGUIGFXButton,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIVertScrollButton)
};


struct UGUISlider_eventOnDrawCaption_Parms
{
    FString ReturnValue;
};
class GUI_API UGUISlider : public UGUIComponent
{
public:
    FLOAT MinValue;
    FLOAT MaxValue;
    FStringNoInit CaptionStyleName;
    FLOAT Value;
    class UGUIStyles* CaptionStyle;
    BITFIELD bIntSlider:1 GCC_PACK(4);
    FScriptDelegate __OnDrawCaption__Delegate GCC_PACK(4);
    FString delegateOnDrawCaption()
    {
        UGUISlider_eventOnDrawCaption_Parms Parms;
        ProcessDelegate(GUI_OnDrawCaption,&__OnDrawCaption__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUISlider,UGUIComponent,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUISlider)
};


struct UGUIMultiComponent_eventFindComponentIndex_Parms
{
    class UGUIComponent* Who;
    INT ReturnValue;
};
class GUI_API UGUIMultiComponent : public UGUIComponent
{
public:
    TArrayNoInit<class UGUIComponent*> Controls;
    class UGUIComponent* FocusedControl;
    INT eventFindComponentIndex(class UGUIComponent* Who)
    {
        UGUIMultiComponent_eventFindComponentIndex_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Who=Who;
        ProcessEvent(FindFunctionChecked(GUI_FindComponentIndex),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUIMultiComponent,UGUIComponent,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIMultiComponent)
};


struct UGUIScrollBarBase_eventAlignThumb_Parms
{
};
class GUI_API UGUIScrollBarBase : public UGUIMultiComponent
{
public:
    class UGUIListBase* MyList;
    void eventAlignThumb()
    {
        ProcessEvent(FindFunctionChecked(GUI_AlignThumb),NULL);
    }
    DECLARE_CLASS(UGUIScrollBarBase,UGUIMultiComponent,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIScrollBarBase)
};


class GUI_API UGUIVertScrollBar : public UGUIScrollBarBase
{
public:
    FLOAT GripTop;
    FLOAT GripHeight;
    FLOAT GrabOffset;
    DECLARE_CLASS(UGUIVertScrollBar,UGUIScrollBarBase,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIVertScrollBar)
};


class GUI_API UGUIListBoxBase : public UGUIMultiComponent
{
public:
    class UGUIVertScrollBar* ScrollBar;
    BITFIELD bVisibleWhenEmpty:1 GCC_PACK(4);
    DECLARE_CLASS(UGUIListBoxBase,UGUIMultiComponent,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIListBoxBase)
};


class GUI_API UGUIListBox : public UGUIListBoxBase
{
public:
    class UGUIList* List;
    DECLARE_CLASS(UGUIListBox,UGUIListBoxBase,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIListBox)
};


struct UGUIPage_eventHandleParameters_Parms
{
    FString Param1;
    FString Param2;
};
struct UGUIPage_eventChangeHint_Parms
{
    FString NewHint;
};
struct UGUIPage_eventTick_Parms
{
    FLOAT DeltaTime;
};
struct UGUIPage_eventOnClose_Parms
{
    BITFIELD bCanceled;
};
struct UGUIPage_eventOnCanClose_Parms
{
    BITFIELD bCanceled;
    BITFIELD ReturnValue;
};
struct UGUIPage_eventOnReOpen_Parms
{
};
struct UGUIPage_eventOnOpen_Parms
{
};
class GUI_API UGUIPage : public UGUIMultiComponent
{
public:
    class UMaterial* Background;
    FColor BackgroundColor;
    FColor InactiveFadeColor;
    BYTE BackgroundRStyle;
    BITFIELD bRenderWorld:1 GCC_PACK(4);
    BITFIELD bPauseIfPossible:1;
    BITFIELD bCheckResolution:1;
    class USound* OpenSound GCC_PACK(4);
    class USound* CloseSound;
    BITFIELD bRequire640x480:1 GCC_PACK(4);
    class UGUIPage* ParentPage GCC_PACK(4);
    TArrayNoInit<class UGUIComponent*> Timers;
    BITFIELD bAllowedAsLast:1 GCC_PACK(4);
    BITFIELD bHidePreviousPage:1;
    BITFIELD bDoStoreInSaveMenuStack:1;
    BITFIELD bNeedRawKey:1;
    FLOAT LatentFloat GCC_PACK(4);
    FScriptDelegate __OnOpen__Delegate;
    FScriptDelegate __OnReOpen__Delegate;
    FScriptDelegate __OnCanClose__Delegate;
    FScriptDelegate __OnClose__Delegate;
    DECLARE_FUNCTION(execSleep);
    void eventHandleParameters(const FString& Param1, const FString& Param2)
    {
        UGUIPage_eventHandleParameters_Parms Parms;
        Parms.Param1=Param1;
        Parms.Param2=Param2;
        ProcessEvent(FindFunctionChecked(GUI_HandleParameters),&Parms);
    }
    void eventChangeHint(const FString& NewHint)
    {
        UGUIPage_eventChangeHint_Parms Parms;
        Parms.NewHint=NewHint;
        ProcessEvent(FindFunctionChecked(GUI_ChangeHint),&Parms);
    }
    void eventTick(FLOAT DeltaTime)
    {
        UGUIPage_eventTick_Parms Parms;
        if(IsProbing(NAME_Tick)) {
        Parms.DeltaTime=DeltaTime;
        ProcessEvent(FindFunctionChecked(GUI_Tick),&Parms);
        }
    }
    void delegateOnClose(BITFIELD bCanceled)
    {
        UGUIPage_eventOnClose_Parms Parms;
        Parms.bCanceled=bCanceled;
        ProcessDelegate(GUI_OnClose,&__OnClose__Delegate,&Parms);
    }
    BITFIELD delegateOnCanClose(BITFIELD bCanceled)
    {
        UGUIPage_eventOnCanClose_Parms Parms;
        Parms.ReturnValue=0;
        Parms.bCanceled=bCanceled;
        ProcessDelegate(GUI_OnCanClose,&__OnCanClose__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    void delegateOnReOpen()
    {
        ProcessDelegate(GUI_OnReOpen,&__OnReOpen__Delegate,NULL);
    }
    void delegateOnOpen()
    {
        ProcessDelegate(GUI_OnOpen,&__OnOpen__Delegate,NULL);
    }
    DECLARE_CLASS(UGUIPage,UGUIMultiComponent,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIPage)
};


struct UGUIVertScrollZone_eventOnScrollZoneClick_Parms
{
    FLOAT Delta;
};
class GUI_API UGUIVertScrollZone : public UGUIComponent
{
public:
    FScriptDelegate __OnScrollZoneClick__Delegate;
    void delegateOnScrollZoneClick(FLOAT Delta)
    {
        UGUIVertScrollZone_eventOnScrollZoneClick_Parms Parms;
        Parms.Delta=Delta;
        ProcessDelegate(GUI_OnScrollZoneClick,&__OnScrollZoneClick__Delegate,&Parms);
    }
    DECLARE_CLASS(UGUIVertScrollZone,UGUIComponent,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIVertScrollZone)
};


class GUI_API UGUIImage : public UGUIComponent
{
public:
    class UMaterial* Image;
    FColor ImageColor;
    BYTE ImageStyle;
    BYTE ImageRenderStyle;
    BYTE ImageAlign;
    INT DimX1;
    INT DimY1;
    INT DimX2;
    INT DimY2;
    DECLARE_CLASS(UGUIImage,UGUIComponent,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIImage)
};


struct UGUIListBase_eventOnAdjustTop_Parms
{
    class UGUIComponent* Sender;
};
struct UGUIListBase_eventOnDrawItem_Parms
{
    class UCanvas* Canvas;
    INT Item;
    FLOAT X;
    FLOAT Y;
    FLOAT W;
    FLOAT H;
    BITFIELD bSelected;
};
class GUI_API UGUIListBase : public UGUIComponent
{
public:
    BITFIELD bSorted:1 GCC_PACK(4);
    FColor SelectedBKColor GCC_PACK(4);
    class UMaterial* SelectedImage;
    INT Top;
    INT Index;
    INT ItemsPerPage;
    INT ItemHeight;
    INT UserDefinedItemHeight;
    INT ItemWidth;
    INT ItemCount;
    BITFIELD bHotTrack:1 GCC_PACK(4);
    BITFIELD bVisibleWhenEmpty:1;
    class UGUIScrollBarBase* MyScrollBar GCC_PACK(4);
    FScriptDelegate __OnDrawItem__Delegate;
    FScriptDelegate __OnAdjustTop__Delegate;
    void delegateOnAdjustTop(class UGUIComponent* Sender)
    {
        UGUIListBase_eventOnAdjustTop_Parms Parms;
        Parms.Sender=Sender;
        ProcessDelegate(GUI_OnAdjustTop,&__OnAdjustTop__Delegate,&Parms);
    }
    void delegateOnDrawItem(class UCanvas* Canvas, INT Item, FLOAT X, FLOAT Y, FLOAT W, FLOAT H, BITFIELD bSelected)
    {
        UGUIListBase_eventOnDrawItem_Parms Parms;
        Parms.Canvas=Canvas;
        Parms.Item=Item;
        Parms.X=X;
        Parms.Y=Y;
        Parms.W=W;
        Parms.H=H;
        Parms.bSelected=bSelected;
        ProcessDelegate(GUI_OnDrawItem,&__OnDrawItem__Delegate,&Parms);
    }
    DECLARE_CLASS(UGUIListBase,UGUIComponent,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIListBase)
};


class GUI_API UGUIVertList : public UGUIListBase
{
public:
    DECLARE_CLASS(UGUIVertList,UGUIListBase,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIVertList)
};


struct UGUIList_eventSwap_Parms
{
    INT IndexA;
    INT IndexB;
};
struct UGUIList_eventCompareItem_Parms
{
    FGUIListElem ElemA;
    FGUIListElem ElemB;
    INT ReturnValue;
};
class GUI_API UGUIList : public UGUIVertList
{
public:
    BYTE TextAlign;
    TArrayNoInit<FGUIListElem> Elements;
    FScriptDelegate __CompareItem__Delegate;
    DECLARE_FUNCTION(execSortList);
    void eventSwap(INT IndexA, INT IndexB)
    {
        UGUIList_eventSwap_Parms Parms;
        Parms.IndexA=IndexA;
        Parms.IndexB=IndexB;
        ProcessEvent(FindFunctionChecked(GUI_Swap),&Parms);
    }
    INT delegateCompareItem(FGUIListElem ElemA, FGUIListElem ElemB)
    {
        UGUIList_eventCompareItem_Parms Parms;
        Parms.ReturnValue=0;
        Parms.ElemA=ElemA;
        Parms.ElemB=ElemB;
        ProcessDelegate(GUI_CompareItem,&__CompareItem__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUIList,UGUIVertList,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIList)
};


class GUI_API UGUILabel : public UGUIComponent
{
public:
    FStringNoInit Caption;
    BYTE TextAlign;
    FColor TextColor;
    FColor FocusedTextColor;
    BYTE TextStyle;
    FStringNoInit TextFont;
    BITFIELD bTransparent:1 GCC_PACK(4);
    BITFIELD bMultiLine:1;
    FColor BackColor GCC_PACK(4);
    DECLARE_CLASS(UGUILabel,UGUIComponent,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUILabel)
};


struct UGUIStyles_eventInitialize_Parms
{
};
struct UGUIStyles_eventOnDrawText_Parms
{
    class UCanvas* Canvas;
    BYTE MenuState;
    FLOAT Left;
    FLOAT Top;
    FLOAT width;
    FLOAT Height;
    BYTE align;
    FString Text;
    BITFIELD ReturnValue;
};
struct UGUIStyles_eventOnDraw_Parms
{
    class UCanvas* Canvas;
    BYTE MenuState;
    FLOAT Left;
    FLOAT Top;
    FLOAT width;
    FLOAT Height;
    BITFIELD ReturnValue;
};
class GUI_API UGUIStyles : public UGUI
{
public:
    FStringNoInit KeyName;
    BYTE RStyles[5];
    class UMaterial* Images[5];
    BYTE ImgStyle[5];
    FColor FontColors[5];
    FColor ImgColors[5];
    class UGUIFont* Fonts[5];
    INT BorderOffsets[4];
    FStringNoInit FontNames[5];
    BITFIELD bRegistered:1 GCC_PACK(4);
    FScriptDelegate __OnDraw__Delegate GCC_PACK(4);
    FScriptDelegate __OnDrawText__Delegate;
    DECLARE_FUNCTION(execDrawText);
    DECLARE_FUNCTION(execDraw);
    void eventInitialize()
    {
        ProcessEvent(FindFunctionChecked(GUI_Initialize),NULL);
    }
    BITFIELD delegateOnDrawText(class UCanvas* Canvas, BYTE MenuState, FLOAT Left, FLOAT Top, FLOAT width, FLOAT Height, BYTE align, const FString& Text)
    {
        UGUIStyles_eventOnDrawText_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Canvas=Canvas;
        Parms.MenuState=MenuState;
        Parms.Left=Left;
        Parms.Top=Top;
        Parms.width=width;
        Parms.Height=Height;
        Parms.align=align;
        Parms.Text=Text;
        ProcessDelegate(GUI_OnDrawText,&__OnDrawText__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    BITFIELD delegateOnDraw(class UCanvas* Canvas, BYTE MenuState, FLOAT Left, FLOAT Top, FLOAT width, FLOAT Height)
    {
        UGUIStyles_eventOnDraw_Parms Parms;
        Parms.ReturnValue=0;
        Parms.Canvas=Canvas;
        Parms.MenuState=MenuState;
        Parms.Left=Left;
        Parms.Top=Top;
        Parms.width=width;
        Parms.Height=Height;
        ProcessDelegate(GUI_OnDraw,&__OnDraw__Delegate,&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUIStyles,UGUI,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIStyles)
};


struct UGUIFont_eventGetFont_Parms
{
    INT XRes;
    class UFont* ReturnValue;
};
class GUI_API UGUIFont : public UGUI
{
public:
    FStringNoInit KeyName;
    BITFIELD bFixedSize:1 GCC_PACK(4);
    TArrayNoInit<FString> FontArrayNames GCC_PACK(4);
    TArrayNoInit<class UFont*> FontArrayFonts;
    DECLARE_FUNCTION(execGetFont);
    class UFont* eventGetFont(INT XRes)
    {
        UGUIFont_eventGetFont_Parms Parms;
        Parms.ReturnValue=0;
        Parms.XRes=XRes;
        ProcessEvent(FindFunctionChecked(GUI_GetFont),&Parms);
        return Parms.ReturnValue;
    }
    DECLARE_CLASS(UGUIFont,UGUI,0,GUI)
    NO_DEFAULT_CONSTRUCTOR(UGUIFont)
};

#endif

AUTOGENERATE_FUNCTION(UGUIComponent,-1,execActualTop);
AUTOGENERATE_FUNCTION(UGUIComponent,-1,execActualLeft);
AUTOGENERATE_FUNCTION(UGUIComponent,-1,execActualHeight);
AUTOGENERATE_FUNCTION(UGUIComponent,-1,execActualWidth);
AUTOGENERATE_FUNCTION(UGUIComponent,-1,execKillTimer);
AUTOGENERATE_FUNCTION(UGUIComponent,-1,execSetTimer);
AUTOGENERATE_FUNCTION(UGUIStyles,-1,execDrawText);
AUTOGENERATE_FUNCTION(UGUIStyles,-1,execDraw);
AUTOGENERATE_FUNCTION(UGUIFont,-1,execGetFont);
AUTOGENERATE_FUNCTION(UGUIList,-1,execSortList);
AUTOGENERATE_FUNCTION(UGUIPage,430,execSleep);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetConnectionStatus);
AUTOGENERATE_FUNCTION(UGUIController,-1,execSetInputTimeOut);
AUTOGENERATE_FUNCTION(UGUIController,-1,execEndOfPressStartPage);
AUTOGENERATE_FUNCTION(UGUIController,-1,execIsWriteUserConfigFinished);
AUTOGENERATE_FUNCTION(UGUIController,-1,execRequestWriteUserConfig);
AUTOGENERATE_FUNCTION(UGUIController,-1,execIsReadUserConfigFinished);
AUTOGENERATE_FUNCTION(UGUIController,-1,execRequestReadUserConfig);
AUTOGENERATE_FUNCTION(UGUIController,-1,execIsWriteSlotFinished);
AUTOGENERATE_FUNCTION(UGUIController,-1,execRequestWriteSlot);
AUTOGENERATE_FUNCTION(UGUIController,-1,execIsReadSlotFinished);
AUTOGENERATE_FUNCTION(UGUIController,-1,execRequestReadSlot);
AUTOGENERATE_FUNCTION(UGUIController,-1,execIsEraseSlotFinished);
AUTOGENERATE_FUNCTION(UGUIController,-1,execRequestEraseSlot);
AUTOGENERATE_FUNCTION(UGUIController,-1,execIsGetSlotContentDateAndTimeFinished);
AUTOGENERATE_FUNCTION(UGUIController,-1,execRequestGetSlotContentDateAndTime);
AUTOGENERATE_FUNCTION(UGUIController,-1,execIsGetSlotContentDescriptionFinished);
AUTOGENERATE_FUNCTION(UGUIController,-1,execRequestGetSlotContentDescription);
AUTOGENERATE_FUNCTION(UGUIController,-1,execIsSlotEmptyFinished);
AUTOGENERATE_FUNCTION(UGUIController,-1,execRequestIsSlotEmpty);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetMaxNumberOfSavingSlots);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetDefaultDescription);
AUTOGENERATE_FUNCTION(UGUIController,-1,execLoadAtCheckpoint);
AUTOGENERATE_FUNCTION(UGUIController,-1,execIsThereACheckpoint);
AUTOGENERATE_FUNCTION(UGUIController,-1,execIsGetProfileListFinished);
AUTOGENERATE_FUNCTION(UGUIController,-1,execRequestGetProfileList);
AUTOGENERATE_FUNCTION(UGUIController,-1,execSetMemoryCardActivation);
AUTOGENERATE_FUNCTION(UGUIController,-1,execHasMemoryCardBeenChanged);
AUTOGENERATE_FUNCTION(UGUIController,-1,execIsMemoryCardReady);
AUTOGENERATE_FUNCTION(UGUIController,-1,execStartNewCheckOnMemoryCardForThisProfile);
AUTOGENERATE_FUNCTION(UGUIController,-1,execDoesMemoryCardIncludeThisProfile);
AUTOGENERATE_FUNCTION(UGUIController,-1,execIsUseProfileFinished);
AUTOGENERATE_FUNCTION(UGUIController,-1,execRequestUseProfile);
AUTOGENERATE_FUNCTION(UGUIController,-1,execIsCreateProfileFinished);
AUTOGENERATE_FUNCTION(UGUIController,-1,execRequestCreateProfile);
AUTOGENERATE_FUNCTION(UGUIController,-1,execIsSavingMediaAvailable);
AUTOGENERATE_FUNCTION(UGUIController,-1,execInitStateFrame);
AUTOGENERATE_FUNCTION(UGUIController,-1,execRebootToDashboardFromScripts);
AUTOGENERATE_FUNCTION(UGUIController,-1,execResetKeyboard);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetXIIIEngineVersion);
AUTOGENERATE_FUNCTION(UGUIController,-1,execInitController);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetMainMenuClass);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetCurrentRes);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetStyle);
AUTOGENERATE_FUNCTION(UGUIController,-1,execGetMenuFont);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif

#if __STATIC_LINK
#ifndef GUI_NATIVE_DEFS
#define GUI_NATIVE_DEFS

DECLARE_NATIVE_TYPE(GUI,UGUICheckBoxButton);
DECLARE_NATIVE_TYPE(GUI,UGUIGFXButton);
DECLARE_NATIVE_TYPE(GUI,UGUIButton);
DECLARE_NATIVE_TYPE(GUI,UGUIComponent);
DECLARE_NATIVE_TYPE(GUI,UGUI);
DECLARE_NATIVE_TYPE(GUI,UGUISlider);
DECLARE_NATIVE_TYPE(GUI,UGUIVertScrollBar);
DECLARE_NATIVE_TYPE(GUI,UGUIScrollBarBase);
DECLARE_NATIVE_TYPE(GUI,UGUIMultiComponent);
DECLARE_NATIVE_TYPE(GUI,UGUIVertGripButton);
DECLARE_NATIVE_TYPE(GUI,UGUIVertScrollButton);
DECLARE_NATIVE_TYPE(GUI,UGUIVertScrollZone);
DECLARE_NATIVE_TYPE(GUI,UGUIStyles);
DECLARE_NATIVE_TYPE(GUI,UGUIFont);
DECLARE_NATIVE_TYPE(GUI,UGUIImage);
DECLARE_NATIVE_TYPE(GUI,UGUIListBox);
DECLARE_NATIVE_TYPE(GUI,UGUIListBoxBase);
DECLARE_NATIVE_TYPE(GUI,UGUIListBase);
DECLARE_NATIVE_TYPE(GUI,UGUIVertList);
DECLARE_NATIVE_TYPE(GUI,UGUIList);
DECLARE_NATIVE_TYPE(GUI,UGUILabel);
DECLARE_NATIVE_TYPE(GUI,UGUIPage);
DECLARE_NATIVE_TYPE(GUI,UGUIController);

#define AUTO_INITIALIZE_REGISTRANTS_GUI \
	UGUICheckBoxButton::StaticClass(); \
	UGUIGFXButton::StaticClass(); \
	UGUIButton::StaticClass(); \
	UGUIComponent::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGUIUGUIComponentNative; \
	UGUI::StaticClass(); \
	UGUISlider::StaticClass(); \
	UGUIVertScrollBar::StaticClass(); \
	UGUIScrollBarBase::StaticClass(); \
	UGUIMultiComponent::StaticClass(); \
	UGUIVertGripButton::StaticClass(); \
	UGUIVertScrollButton::StaticClass(); \
	UGUIVertScrollZone::StaticClass(); \
	UGUIStyles::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGUIUGUIStylesNative; \
	UGUIFont::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGUIUGUIFontNative; \
	UGUIImage::StaticClass(); \
	UGUIListBox::StaticClass(); \
	UGUIListBoxBase::StaticClass(); \
	UGUIListBase::StaticClass(); \
	UGUIVertList::StaticClass(); \
	UGUIList::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGUIUGUIListNative; \
	UGUILabel::StaticClass(); \
	UGUIPage::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGUIUGUIPageNative; \
	UGUIController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindGUIUGUIControllerNative; \

#endif // GUI_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(UGUIComponent) GGUIUGUIComponentNatives[] = 
{ 
	MAP_NATIVE(UGUIComponent,execActualTop)
	MAP_NATIVE(UGUIComponent,execActualLeft)
	MAP_NATIVE(UGUIComponent,execActualHeight)
	MAP_NATIVE(UGUIComponent,execActualWidth)
	MAP_NATIVE(UGUIComponent,execKillTimer)
	MAP_NATIVE(UGUIComponent,execSetTimer)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GUI,UGUIComponent);

NATIVE_INFO(UGUIStyles) GGUIUGUIStylesNatives[] = 
{ 
	MAP_NATIVE(UGUIStyles,execDrawText)
	MAP_NATIVE(UGUIStyles,execDraw)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GUI,UGUIStyles);

NATIVE_INFO(UGUIFont) GGUIUGUIFontNatives[] = 
{ 
	MAP_NATIVE(UGUIFont,execGetFont)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GUI,UGUIFont);

NATIVE_INFO(UGUIList) GGUIUGUIListNatives[] = 
{ 
	MAP_NATIVE(UGUIList,execSortList)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GUI,UGUIList);

NATIVE_INFO(UGUIPage) GGUIUGUIPageNatives[] = 
{ 
	MAP_NATIVE(UGUIPage,execSleep)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GUI,UGUIPage);

NATIVE_INFO(UGUIController) GGUIUGUIControllerNatives[] = 
{ 
	MAP_NATIVE(UGUIController,execGetConnectionStatus)
	MAP_NATIVE(UGUIController,execSetInputTimeOut)
	MAP_NATIVE(UGUIController,execEndOfPressStartPage)
	MAP_NATIVE(UGUIController,execIsWriteUserConfigFinished)
	MAP_NATIVE(UGUIController,execRequestWriteUserConfig)
	MAP_NATIVE(UGUIController,execIsReadUserConfigFinished)
	MAP_NATIVE(UGUIController,execRequestReadUserConfig)
	MAP_NATIVE(UGUIController,execIsWriteSlotFinished)
	MAP_NATIVE(UGUIController,execRequestWriteSlot)
	MAP_NATIVE(UGUIController,execIsReadSlotFinished)
	MAP_NATIVE(UGUIController,execRequestReadSlot)
	MAP_NATIVE(UGUIController,execIsEraseSlotFinished)
	MAP_NATIVE(UGUIController,execRequestEraseSlot)
	MAP_NATIVE(UGUIController,execIsGetSlotContentDateAndTimeFinished)
	MAP_NATIVE(UGUIController,execRequestGetSlotContentDateAndTime)
	MAP_NATIVE(UGUIController,execIsGetSlotContentDescriptionFinished)
	MAP_NATIVE(UGUIController,execRequestGetSlotContentDescription)
	MAP_NATIVE(UGUIController,execIsSlotEmptyFinished)
	MAP_NATIVE(UGUIController,execRequestIsSlotEmpty)
	MAP_NATIVE(UGUIController,execGetMaxNumberOfSavingSlots)
	MAP_NATIVE(UGUIController,execGetDefaultDescription)
	MAP_NATIVE(UGUIController,execLoadAtCheckpoint)
	MAP_NATIVE(UGUIController,execIsThereACheckpoint)
	MAP_NATIVE(UGUIController,execIsGetProfileListFinished)
	MAP_NATIVE(UGUIController,execRequestGetProfileList)
	MAP_NATIVE(UGUIController,execSetMemoryCardActivation)
	MAP_NATIVE(UGUIController,execHasMemoryCardBeenChanged)
	MAP_NATIVE(UGUIController,execIsMemoryCardReady)
	MAP_NATIVE(UGUIController,execStartNewCheckOnMemoryCardForThisProfile)
	MAP_NATIVE(UGUIController,execDoesMemoryCardIncludeThisProfile)
	MAP_NATIVE(UGUIController,execIsUseProfileFinished)
	MAP_NATIVE(UGUIController,execRequestUseProfile)
	MAP_NATIVE(UGUIController,execIsCreateProfileFinished)
	MAP_NATIVE(UGUIController,execRequestCreateProfile)
	MAP_NATIVE(UGUIController,execIsSavingMediaAvailable)
	MAP_NATIVE(UGUIController,execInitStateFrame)
	MAP_NATIVE(UGUIController,execRebootToDashboardFromScripts)
	MAP_NATIVE(UGUIController,execResetKeyboard)
	MAP_NATIVE(UGUIController,execGetXIIIEngineVersion)
	MAP_NATIVE(UGUIController,execInitController)
	MAP_NATIVE(UGUIController,execGetMainMenuClass)
	MAP_NATIVE(UGUIController,execGetCurrentRes)
	MAP_NATIVE(UGUIController,execGetStyle)
	MAP_NATIVE(UGUIController,execGetMenuFont)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(GUI,UGUIController);

#endif // NATIVES_ONLY
#endif // __STATIC_LINK

/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef XIIIMP_API
#define XIIIMP_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern XIIIMP_API FName XIIIMP_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(ChangeState)
AUTOGENERATE_NAME(AddDefaultOrders)
AUTOGENERATE_NAME(LogOrderList)
AUTOGENERATE_NAME(LaunchSound)
AUTOGENERATE_NAME(SetLoopAnimation)

#ifndef NAMES_ONLY

#define UCONST_Order_GrenadLauncher 1073741824
#define UCONST_Order_TrakNar 65536
#define UCONST_Order_Unblock 256
#define UCONST_Order_Seek 128
#define UCONST_Order_SnipeAndKill 64
#define UCONST_Order_SnipeSpot 32
#define UCONST_Order_Fear 16
#define UCONST_Order_Kill 8
#define UCONST_Order_Armor 4
#define UCONST_Order_Life 2
#define UCONST_Order_Weapon 1

struct ABotController_eventChangeState_Parms
{
};
struct ABotController_eventAddDefaultOrders_Parms
{
};
struct ABotController_eventLogOrderList_Parms
{
};
class XIIIMP_API ABotController : public AAIController
{
public:
    INT Id;
    INT OrderNumber;
    INT KillOrderPriority;
    TArrayNoInit<FORDER> OrderList;
    FORDER CurrentOrder;
    BITFIELD DBugBot:1 GCC_PACK(4);
    BITFIELD DBugWarning:1;
    BITFIELD DBugOrder:1;
    BITFIELD FirstWeaponPickUp:1;
    BITFIELD bInitPickUpList:1;
    BITFIELD bIsJumping:1;
    class AActor* Item GCC_PACK(4);
    FLOAT MoveSpeed;
    FLOAT MaxMoveSpeed;
    FLOAT ShotErrorTime;
    FLOAT MaxShotErrorTime;
    FLOAT SeekTime;
    FLOAT MaxSeekTime;
    FLOAT SnipeTime;
    FLOAT MaxSnipeTime;
    INT RespawnTime;
    INT InitialShotError;
    FStringNoInit MyName;
    class AActor* FearActor;
    class AActor* HidePoint;
    TArrayNoInit<class AActor*> MedKitList;
    TArrayNoInit<class AActor*> WeaponList;
    TArrayNoInit<class AActor*> ArmorList;
    TArrayNoInit<class ANavigationPoint*> SnipeSpotList;
    TArrayNoInit<class ANavigationPoint*> TrakNarSpotList;
    TArrayNoInit<class AActor*> FullPickUpList;
    INT JumpHeight;
    INT JumpSpeed;
    class ANavigationPoint* JumpTarget;
    class ANavigationPoint* SnipePoint;
    class ANavigationPoint* TrakNarPoint;
    BITFIELD PathErrorToAllArmor:1 GCC_PACK(4);
    BITFIELD PathErrorToAllWeapon:1;
    BITFIELD PathErrorToAllLife:1;
    BITFIELD DamnedImFlashed:1;
    BITFIELD MyWeaponIsAGrenad:1;
    BITFIELD Sniping:1;
    INT HeadShotModificator GCC_PACK(4);
    BITFIELD ReloadableWeapon:1 GCC_PACK(4);
    INT MaxSeekDist_Life GCC_PACK(4);
    INT MaxSeekDist_Weapon;
    INT MaxSeekDist_Armor;
    FLOAT MaxDistModificator;
    FLOAT AimTime;
    FLOAT LastDefaultOrderTime;
    class AActor* PathCache[16];
    INT PathCacheSize;
    INT PathIndex;
    BITFIELD FullPath:1 GCC_PACK(4);
    BITFIELD bFireMove:1;
    class AGameReplicationInfo* GRI GCC_PACK(4);
    FVector NextPosition;
    BITFIELD MarioMode:1 GCC_PACK(4);
    INT AttackArea GCC_PACK(4);
    FLOAT MissPercent;
    FLOAT StraffeDelay;
    INT TeamRole;
    BITFIELD WaitBeforeFire:1 GCC_PACK(4);
    BITFIELD ForceFear:1;
    FLOAT LastAdjustAimTime GCC_PACK(4);
    FVector LastEnemyPos;
    INT LastStraffeDir;
    INT NbStraffe;
    FLOAT StraffeValue;
    class AGrenadPathNode* MyGrenadTarget;
    BITFIELD GrenadIsLauched:1 GCC_PACK(4);
    FLOAT LastDistCheckTime GCC_PACK(4);
    BITFIELD CloseCombat:1 GCC_PACK(4);
    BITFIELD bBackMove:1;
    class ANavigationPoint* NavToUpDate GCC_PACK(4);
    TArrayNoInit<class AXIIIMPWatchPoint*> WatchPointList;
    TArrayNoInit<class AXIIIMPWatchPoint*> UseableWatchPointList;
    INT TeamID;
    FLOAT TimePassedBeforeSeeingMyEnemy;
    DECLARE_FUNCTION(execFindAllNearestWatchPoint);
    DECLARE_FUNCTION(execStopMvtWhenMayFall);
    DECLARE_FUNCTION(execClearAllOrders);
    DECLARE_FUNCTION(execIsInAttackArea);
    DECLARE_FUNCTION(execIsNearest);
    DECLARE_FUNCTION(execFindBestWeapon);
    DECLARE_FUNCTION(execFindNearestWeapon);
    DECLARE_FUNCTION(execFindBestArmor);
    DECLARE_FUNCTION(execFindNearestArmor);
    DECLARE_FUNCTION(execFindMedKit);
    DECLARE_FUNCTION(execSearchHidePoint);
    DECLARE_FUNCTION(execModifyOrder);
    DECLARE_FUNCTION(execAddOrder);
    DECLARE_FUNCTION(execExcludeOrders);
    DECLARE_FUNCTION(execRemoveOrder);
    DECLARE_FUNCTION(execFindMostImportantOrder);
    DECLARE_FUNCTION(execFindOrder);
    DECLARE_FUNCTION(execCalcPathWeight);
    DECLARE_FUNCTION(execExtendFindPathToward);
    void eventChangeState()
    {
        ProcessEvent(FindFunctionChecked(XIIIMP_ChangeState),NULL);
    }
    void eventAddDefaultOrders()
    {
        ProcessEvent(FindFunctionChecked(XIIIMP_AddDefaultOrders),NULL);
    }
    void eventLogOrderList()
    {
        ProcessEvent(FindFunctionChecked(XIIIMP_LogOrderList),NULL);
    }
    DECLARE_CLASS(ABotController,AAIController,0|CLASS_Config,XIIIMP)
    NO_DEFAULT_CONSTRUCTOR(ABotController)
};


struct ATheDuck_eventSetLoopAnimation_Parms
{
    INT Id;
};
struct ATheDuck_eventLaunchSound_Parms
{
};
class XIIIMP_API ATheDuck : public APawn
{
public:
    INT FullDamage;
    INT OldLoopAnimID;
    INT LoopAnimID;
    BYTE soundcounter0;
    BYTE soundcounter1;
    BYTE soundcounter2;
    BYTE soundcounter3;
    BYTE soundcounter4;
    BYTE Oldsoundcounter0;
    BYTE Oldsoundcounter1;
    BYTE Oldsoundcounter2;
    BYTE Oldsoundcounter3;
    BYTE Oldsoundcounter4;
    void eventSetLoopAnimation(INT Id)
    {
        ATheDuck_eventSetLoopAnimation_Parms Parms;
        Parms.Id=Id;
        ProcessEvent(FindFunctionChecked(XIIIMP_SetLoopAnimation),&Parms);
    }
    void eventLaunchSound()
    {
        ProcessEvent(FindFunctionChecked(XIIIMP_LaunchSound),NULL);
    }
    DECLARE_CLASS(ATheDuck,APawn,0,XIIIMP)
    NO_DEFAULT_CONSTRUCTOR(ATheDuck)
};

#endif

AUTOGENERATE_FUNCTION(ABotController,-1,execFindAllNearestWatchPoint);
AUTOGENERATE_FUNCTION(ABotController,-1,execStopMvtWhenMayFall);
AUTOGENERATE_FUNCTION(ABotController,-1,execClearAllOrders);
AUTOGENERATE_FUNCTION(ABotController,625,execIsInAttackArea);
AUTOGENERATE_FUNCTION(ABotController,626,execIsNearest);
AUTOGENERATE_FUNCTION(ABotController,627,execFindBestWeapon);
AUTOGENERATE_FUNCTION(ABotController,628,execFindNearestWeapon);
AUTOGENERATE_FUNCTION(ABotController,629,execFindBestArmor);
AUTOGENERATE_FUNCTION(ABotController,630,execFindNearestArmor);
AUTOGENERATE_FUNCTION(ABotController,631,execFindMedKit);
AUTOGENERATE_FUNCTION(ABotController,632,execSearchHidePoint);
AUTOGENERATE_FUNCTION(ABotController,633,execModifyOrder);
AUTOGENERATE_FUNCTION(ABotController,634,execAddOrder);
AUTOGENERATE_FUNCTION(ABotController,635,execExcludeOrders);
AUTOGENERATE_FUNCTION(ABotController,636,execRemoveOrder);
AUTOGENERATE_FUNCTION(ABotController,637,execFindMostImportantOrder);
AUTOGENERATE_FUNCTION(ABotController,638,execFindOrder);
AUTOGENERATE_FUNCTION(ABotController,639,execCalcPathWeight);
AUTOGENERATE_FUNCTION(ABotController,-1,execExtendFindPathToward);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif

#if __STATIC_LINK
#ifndef XIIIMP_NATIVE_DEFS
#define XIIIMP_NATIVE_DEFS

DECLARE_NATIVE_TYPE(XIIIMP,ATheDuck);
DECLARE_NATIVE_TYPE(XIIIMP,ABotController);

#define AUTO_INITIALIZE_REGISTRANTS_XIIIMP \
	ATheDuck::StaticClass(); \
	ABotController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXIIIMPABotControllerNative; \

#endif // XIIIMP_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(ABotController) GXIIIMPABotControllerNatives[] = 
{ 
	MAP_NATIVE(ABotController,execFindAllNearestWatchPoint)
	MAP_NATIVE(ABotController,execStopMvtWhenMayFall)
	MAP_NATIVE(ABotController,execClearAllOrders)
	MAP_NATIVE(ABotController,execIsInAttackArea)
	MAP_NATIVE(ABotController,execIsNearest)
	MAP_NATIVE(ABotController,execFindBestWeapon)
	MAP_NATIVE(ABotController,execFindNearestWeapon)
	MAP_NATIVE(ABotController,execFindBestArmor)
	MAP_NATIVE(ABotController,execFindNearestArmor)
	MAP_NATIVE(ABotController,execFindMedKit)
	MAP_NATIVE(ABotController,execSearchHidePoint)
	MAP_NATIVE(ABotController,execModifyOrder)
	MAP_NATIVE(ABotController,execAddOrder)
	MAP_NATIVE(ABotController,execExcludeOrders)
	MAP_NATIVE(ABotController,execRemoveOrder)
	MAP_NATIVE(ABotController,execFindMostImportantOrder)
	MAP_NATIVE(ABotController,execFindOrder)
	MAP_NATIVE(ABotController,execCalcPathWeight)
	MAP_NATIVE(ABotController,execExtendFindPathToward)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XIIIMP,ABotController);

#endif // NATIVES_ONLY
#endif // __STATIC_LINK

/*===========================================================================
    C++ class definitions exported from UnrealScript.
    This is automatically generated by the tools.
    DO NOT modify this manually! Edit the corresponding .uc files instead!
===========================================================================*/
#if SUPPORTS_PRAGMA_PACK
#pragma pack (push,4)
#endif

#ifndef XIDPAWN_API
#define XIDPAWN_API DLL_IMPORT
#endif

#ifndef NAMES_ONLY
#define AUTOGENERATE_NAME(name) extern XIDPAWN_API FName XIDPAWN_##name;
#define AUTOGENERATE_FUNCTION(cls,idx,name)
#endif

AUTOGENERATE_NAME(EnemyAcquired)

#ifndef NAMES_ONLY

enum SoundType
{
    rien                    =0,
    Sifflements             =1,
    Eternuments             =2,
    Toux                    =3,
    OnoAleatoire            =4,
};

class XIDPAWN_API APatrolPoint : public ANavigationPoint
{
public:
    FName Nextpatrol;
    FLOAT pausetime;
    FLOAT DeltaTime;
    FVector LookDir;
    TArrayNoInit<FName> PatrolAnim;
    BITFIELD bBoucleSurAnim:1 GCC_PACK(4);
    INT NumReseau GCC_PACK(4);
    class APatrolPoint* NextPatrolPoint;
    BITFIELD bEnCourant:1 GCC_PACK(4);
    BITFIELD bResteSurDernier:1;
    BYTE TypeSon GCC_PACK(4);
    FLOAT ProbaJouerOno;
    DECLARE_CLASS(APatrolPoint,ANavigationPoint,0,XIDPawn)
    NO_DEFAULT_CONSTRUCTOR(APatrolPoint)
};

enum ProprietesPossibles
{
    Rester                  =0,
    Sauter                  =1,
};

class XIDPAWN_API AAttackPoint : public ANavigationPoint
{
public:
    FVector LookDir;
    class AAttackPoint* NextAttackP;
    FName NextAttackPoint;
    INT NumReseau;
    FPropr Proprietes;
    BITFIELD bDejaPasse:1 GCC_PACK(4);
    BITFIELD bBoucleSurDernier:1;
    BITFIELD bAccroupi:1;
    BITFIELD bTriggerEvent:1;
    BITFIELD bTirEntreLes2:1;
    BITFIELD bTirSurPlace:1;
    BITFIELD bForceDeplacement:1;
    BITFIELD bTenteGrenadage:1;
    BITFIELD bReprenable:1;
    BITFIELD bAlerteAmisEnCriant:1;
    BITFIELD bMusiqueAttaque:1;
    INT NbPointsSkipables GCC_PACK(4);
    class ANavigationPoint* PointSortieEnRoulade;
    class AGrenadeTarget* Ciblegrenade;
    class AAttackPoint* PointDuSecondChemin;
    class ACrashPoint* PointArriveeCrash;
    DECLARE_CLASS(AAttackPoint,ANavigationPoint,0,XIDPawn)
    NO_DEFAULT_CONSTRUCTOR(AAttackPoint)
};

enum AttitudeInfo
{
    ATTITUDE_Fear           =0,
    ATTITUDE_Impressed      =1,
    ATTITUDE_Charge         =2,
    ATTITUDE_MAX            =3,
};

struct AIAController_eventEnemyAcquired_Parms
{
};
class XIDPAWN_API AIAController : public AAIController
{
public:
    FMovePointInfo MovePoint;
    FMoveActorInfo MoveActor;
    BYTE AttitudeTOInfo;
    class AActor* PointChemin[16];
    class AActor* Interrogation;
    class AActor* PointsInvestigation[3];
    class APawn* PeeredEnemy;
    class AXIIIPlayerPawn* XIII;
    class AXIIIPawn* PoteQuiMeBloque;
    class ABaseSoldier* BaseS;
    class ABaseSoldier* Pote;
    class ABaseSoldier* CadavreWithPickup;
    class AWeapon* WeaponOnGround;
    class AXIIIPorte* PorteOuverte;
    class AXIIIPorte* LastBumpedDoor;
    class ANavigationPoint* DoorP;
    class ANavigationPoint* DestNavPoint;
    class ANavigationPoint* PointIntermediaire;
    class APatrolPoint* LastPatrolPoint;
    class AAttackPoint* LastAttackPoint;
    class AAttackPoint* OldAttackPoint;
    class ASafePoint* OldSafePoint;
    class ASafePoint* SafePointOccupe;
    class AStrategicPoint* LastStrP;
    class AGrenadFlying* Grenade;
    class AGenAlerte* GenAlerte;
    FName EtatNeutre;
    FName nextstate;
    FName prevstate;
    FName PatrolAnim;
    FName WaitPatrolAnim;
    FName TurnLPatrolAnim;
    FName TurnRPatrolAnim;
    FRotator PointTenirRot;
    FVector EnemyTargetPos;
    FVector EnemyTargetVelocity;
    FVector DirectionTir;
    FVector WeaponStartTrace;
    FVector Temp_Vect;
    FVector HidingSpot;
    FVector PointTenirPos;
    FVector PoteQuiMeBloquePos;
    FVector PointDestination;
    FVector VecteurRecalage;
    FLOAT Temps_errance;
    FLOAT DistanceDeplacement;
    FLOAT DistNearWall;
    FLOAT Temps_RefreshEnemyPos;
    FLOAT DefaultPeripheralVision;
    FLOAT DefaultSightRadius;
    FLOAT DefaultHearingThreshold;
    FLOAT VitesseDeplacements;
    FLOAT Timer_VaRecharger;
    FLOAT Angle_Visee;
    FLOAT Temps_ref;
    FLOAT Temps_Ref2;
    FLOAT Temp_float;
    FLOAT FireTimerRefresh;
    FLOAT SleepTime;
    FLOAT VitesseHorizontaleSaut;
    FLOAT fTimerAttackMusic;
    FLOAT TempsDeclencheAlarme;
    INT NiveauALerte;
    INT NiveauALerteEnAS;
    INT NbCoupsRiposte;
    INT CompteurRecalage;
    INT CompteurTrame;
    INT NbPointChemin;
    INT iCompteur;
    INT temp_int;
    INT NumeroProchainPoint;
    INT NombreDePointsSkippes;
    INT iNumEtat;
    INT NextRouteCachePoint;
    INT numHuntPaths;
    INT iEtatVaVersSTrp;
    BITFIELD bDisableDamageattitudeto:1 GCC_PACK(4);
    BITFIELD CHARGE_LES_LOGS:1;
    BITFIELD bTire:1;
    BITFIELD bChercheStrategicPoint:1;
    BITFIELD bWaitForMover:1;
    BITFIELD bPrisonnier:1;
    BITFIELD bPrecedentTirBloque:1;
    BITFIELD bVigilant:1;
    BITFIELD bEtatAlerte:1;
    BITFIELD bRetraiteVersSafePoint:1;
    BITFIELD bCampeVersSafePoint:1;
    BITFIELD bStepNoise:1;
    BITFIELD bImpactNoise:1;
    BITFIELD bWeaponNoise:1;
    BITFIELD bCadavreVu:1;
    BITFIELD bPaffe:1;
    BITFIELD bDejaVu:1;
    BITFIELD bPotePaffe:1;
    BITFIELD bVaVersAlarme:1;
    BITFIELD bAlarmeInstigator:1;
    BITFIELD bBloqueFuiteGrenades:1;
    BITFIELD bPremiereRafale:1;
    BITFIELD bTirSurConeMax:1;
    BITFIELD bUTurnMove:1;
    BITFIELD bAVuQuelquechose:1;
    BITFIELD bSwitchMusicInWaitState:1;
    BITFIELD bSaut:1;
    BITFIELD Result:1;
    BITFIELD bAccroupiSurAP:1;
    BITFIELD bDeplacementsRoulade:1;
    BITFIELD bDontSeeAnyMore:1;
    BITFIELD bTemp_Bool:1;
    BITFIELD bEnCouverture:1;
    BITFIELD bLanceGrenade:1;
    BITFIELD bFuitPourreloader:1;
    BITFIELD bARienVu:1;
    BITFIELD bLookAtEnemy:1;
    BITFIELD bInWaitMode:1;
    BITFIELD bInterruptStateToOpenDoor:1;
    BITFIELD bTriggerBuffered:1;
    DECLARE_FUNCTION(execFindNewStakeOutDir);
    DECLARE_FUNCTION(execPickStartPoint);
    DECLARE_FUNCTION(execPseudoSteering);
    DECLARE_FUNCTION(execHalteAuFeu);
    DECLARE_FUNCTION(execTestDirection);
    DECLARE_FUNCTION(execLigneVisee);
    DECLARE_FUNCTION(execDirectionDuTir);
    DECLARE_FUNCTION(execLineOfFireObstacle);
    DECLARE_FUNCTION(execFindBestPathTo);
    DECLARE_FUNCTION(execFindBestPathToward);
    DECLARE_FUNCTION(execNearWall);
    DECLARE_FUNCTION(execSetEnemy);
    DECLARE_FUNCTION(execAllianceLevel);
    void eventEnemyAcquired()
    {
        ProcessEvent(FindFunctionChecked(XIDPAWN_EnemyAcquired),NULL);
    }
    DECLARE_CLASS(AIAController,AAIController,0|CLASS_Config,XIDPawn)
    NO_DEFAULT_CONSTRUCTOR(AIAController)
};


class XIDPAWN_API AGenFRD : public AKeypoint
{
public:
    DECLARE_CLASS(AGenFRD,AKeypoint,0,XIDPawn)
    NO_DEFAULT_CONSTRUCTOR(AGenFRD)
};


class XIDPAWN_API AGenAlerte : public AGenFRD
{
public:
    class AXIIIGameInfo* gameinf;
    class ABaseSoldier* BaseS;
    class AIAController* iacontr;
    class AXIIIPlayerPawn* XIII;
    TArrayNoInit<class AGrenadFlying*> GrenadeList;
    TArrayNoInit<class ABaseSoldier*> SoldierInFightList;
    INT NBAllieEnCouverture;
    INT dummy;
    BITFIELD bDansGroupeAlarme:1 GCC_PACK(4);
    BITFIELD bAllAlarmsActivated:1;
    INT nbalerte GCC_PACK(4);
    INT nbattaque;
    INT nbattente;
    DECLARE_CLASS(AGenAlerte,AGenFRD,0,XIDPawn)
    NO_DEFAULT_CONSTRUCTOR(AGenAlerte)
};

enum Numtimbre
{
    Timbre_1                =0,
    Timbre_2                =1,
    Timbre_3                =2,
    Timbre_MAX              =3,
};

class XIDPAWN_API ABaseSoldier : public AXIIIPawn
{
public:
    FInventoryItem InitialInventory[8];
    FInitialAllianceInfo InitialAlliances[4];
    FName ORDER;
    FLOAT PourcErrance;
    FLOAT TempsRechercheNMI;
    FLOAT Agressivite;
    FLOAT TempsIdentification;
    FLOAT DistanceAttaque;
    FLOAT TempsVisee;
    INT StrategicPointAttraction;
    INT ProbaDeclencheAlarme;
    INT NumReseauPropre;
    INT NumReseauAttaque;
    FLOAT TempsPasVu;
    BITFIELD bAlerte:1 GCC_PACK(4);
    BITFIELD bRappliqueSiAlerte:1;
    BITFIELD bPasseAttScr_SiDeclenche:1;
    FLOAT OffsetTimeBetweenShots GCC_PACK(4);
    BITFIELD bPasDeclenchableParAlarme:1 GCC_PACK(4);
    BITFIELD bNeVoitPasCadavre:1;
    BITFIELD bMeurtEnTombant:1;
    BITFIELD bAlerteAmisEnCriant:1;
    FLOAT WalkingSpeed GCC_PACK(4);
    BITFIELD bPatrolWithWalkSearchAnim:1 GCC_PACK(4);
    class AWanderingVolume* MyWanderingVolume GCC_PACK(4);
    TArrayNoInit<class UMeshAnimation*> SpecificAnimations;
    BITFIELD bFouilleCadavres:1 GCC_PACK(4);
    BITFIELD bNeFuitPasGrenades:1;
    FName GroupeAlarme[4] GCC_PACK(4);
    BITFIELD bTurnIntoAgressiveSoldier:1 GCC_PACK(4);
    BITFIELD bDontCallFriends:1;
    BYTE NumeroTimbre GCC_PACK(4);
    INT CodeMesh;
    BITFIELD bDejaFouille:1 GCC_PACK(4);
    BITFIELD bJetombe:1;
    BITFIELD bBasesGenere:1;
    BITFIELD bControleChute:1;
    BITFIELD bDetecteBloquage:1;
    BITFIELD bSlave:1;
    BITFIELD bMonCadavreEstDejaVu:1;
    BITFIELD bJOuvreLaBouche:1;
    BITFIELD bBlockNextOuahOuah:1;
    BITFIELD bPasseAttScr_ApresGen:1;
    BITFIELD bSpawnInAir:1;
    INT iOuahOuah GCC_PACK(4);
    FLOAT ScaleOuahOuah;
    FLOAT AlphaRotation;
    FLOAT TimerBeforeStop;
    FLOAT DistanceBord;
    FLOAT Timer_PoteMeBloque;
    FVector Vect_Position;
    FName TypeDommage;
    class Agennmi* GenEnnemi;
    class ACrashPoint* PointCrash;
    class ABaseSoldier* LeBloqueur;
    class AEmitter* OnoChute;
    DECLARE_FUNCTION(execEyePosition);
    DECLARE_CLASS(ABaseSoldier,AXIIIPawn,0,XIDPawn)
    NO_DEFAULT_CONSTRUCTOR(ABaseSoldier)
};

#endif

AUTOGENERATE_FUNCTION(AIAController,-1,execFindNewStakeOutDir);
AUTOGENERATE_FUNCTION(AIAController,-1,execPickStartPoint);
AUTOGENERATE_FUNCTION(AIAController,-1,execPseudoSteering);
AUTOGENERATE_FUNCTION(AIAController,-1,execHalteAuFeu);
AUTOGENERATE_FUNCTION(AIAController,-1,execTestDirection);
AUTOGENERATE_FUNCTION(AIAController,-1,execLigneVisee);
AUTOGENERATE_FUNCTION(AIAController,-1,execDirectionDuTir);
AUTOGENERATE_FUNCTION(AIAController,-1,execLineOfFireObstacle);
AUTOGENERATE_FUNCTION(AIAController,-1,execFindBestPathTo);
AUTOGENERATE_FUNCTION(AIAController,-1,execFindBestPathToward);
AUTOGENERATE_FUNCTION(AIAController,-1,execNearWall);
AUTOGENERATE_FUNCTION(AIAController,-1,execSetEnemy);
AUTOGENERATE_FUNCTION(AIAController,-1,execAllianceLevel);
AUTOGENERATE_FUNCTION(ABaseSoldier,-1,execEyePosition);

#ifndef NAMES_ONLY
#undef AUTOGENERATE_NAME
#undef AUTOGENERATE_FUNCTION
#endif

#if SUPPORTS_PRAGMA_PACK
#pragma pack (pop)
#endif

#if __STATIC_LINK
#ifndef XIDPAWN_NATIVE_DEFS
#define XIDPAWN_NATIVE_DEFS

DECLARE_NATIVE_TYPE(XIDPawn,APatrolPoint);
DECLARE_NATIVE_TYPE(XIDPawn,AIAController);
DECLARE_NATIVE_TYPE(XIDPawn,AGenFRD);
DECLARE_NATIVE_TYPE(XIDPawn,AGenAlerte);
DECLARE_NATIVE_TYPE(XIDPawn,ABaseSoldier);
DECLARE_NATIVE_TYPE(XIDPawn,AAttackPoint);

#define AUTO_INITIALIZE_REGISTRANTS_XIDPAWN \
	APatrolPoint::StaticClass(); \
	AIAController::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXIDPawnAIAControllerNative; \
	AGenFRD::StaticClass(); \
	AGenAlerte::StaticClass(); \
	ABaseSoldier::StaticClass(); \
	GNativeLookupFuncs[Lookup++] = &FindXIDPawnABaseSoldierNative; \
	AAttackPoint::StaticClass(); \

#endif // XIDPawn_NATIVE_DEFS

#ifdef NATIVES_ONLY
NATIVE_INFO(AIAController) GXIDPawnAIAControllerNatives[] = 
{ 
	MAP_NATIVE(AIAController,execFindNewStakeOutDir)
	MAP_NATIVE(AIAController,execPickStartPoint)
	MAP_NATIVE(AIAController,execPseudoSteering)
	MAP_NATIVE(AIAController,execHalteAuFeu)
	MAP_NATIVE(AIAController,execTestDirection)
	MAP_NATIVE(AIAController,execLigneVisee)
	MAP_NATIVE(AIAController,execDirectionDuTir)
	MAP_NATIVE(AIAController,execLineOfFireObstacle)
	MAP_NATIVE(AIAController,execFindBestPathTo)
	MAP_NATIVE(AIAController,execFindBestPathToward)
	MAP_NATIVE(AIAController,execNearWall)
	MAP_NATIVE(AIAController,execSetEnemy)
	MAP_NATIVE(AIAController,execAllianceLevel)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XIDPawn,AIAController);

NATIVE_INFO(ABaseSoldier) GXIDPawnABaseSoldierNatives[] = 
{ 
	MAP_NATIVE(ABaseSoldier,execEyePosition)
	{NULL,NULL}
};
IMPLEMENT_NATIVE_HANDLER(XIDPawn,ABaseSoldier);

#endif // NATIVES_ONLY
#endif // __STATIC_LINK
